generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  userType     UserType?
  interactions Interaction[]

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

enum UserType {
  CALL_CENTER_REP
  CUSTOMER
  FINANCIAL_REP
}

model Interaction {
  id              String          @id @default(cuid())
  interactionType InteractionType
  content         String
  timestamp       DateTime
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  Widget          Widget?         @relation(fields: [widgetId], references: [id])
  widgetId        String?
}

enum InteractionType {
  CALL
  CHAT
  EMAIL
  WEB_USAGE
  IVR_HUGO_USAGE
  OUTBOUND_CORRESPONDENCE
  MARKETING_MATERIAL
  TEXT
}

model Widget {
  id           String        @id @default(cuid())
  embeddedIn   String
  interactions Interaction[]
}

model Filter {
  id       String       @id @default(cuid())
  audience AudienceType
  output   OutputType
}

enum AudienceType {
  CALL_CENTER
  CLIENT_PORTAL
  GUARDIAN_ONLINE
  GPAC
  SMART_OFFICE
  LIVING_BALANCE_SHEET
}

enum OutputType {
  CALLS
  CHATS
  EMAILS
  WEB_USAGE
  IVR_HUGO_USAGE
  OUTBOUND_CORRESPONDENCE
  MARKETING_MATERIALS
  TEXTS
}
