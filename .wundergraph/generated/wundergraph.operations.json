{
"graphql_operation_files": [
{
"operation_name": "ClientPortalAggregateActivity",
"api_mount_path": "clientPortal/AggregateActivity",
"file_path": "clientPortal/AggregateActivity.graphql",
"content": "query ClientPortalAggregateActivity($where: clientPortal_ActivityWhereInput, $orderBy: [clientPortal_ActivityOrderByWithRelationInput], $cursor: clientPortal_ActivityWhereUniqueInput, $take: Int, $skip: Int){clientPortal_aggregateActivity(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id activityType timestamp details clientId _all} _min {id activityType timestamp clientId} _max {id activityType timestamp clientId}}}"
},
{
"operation_name": "ClientPortalAggregateClient",
"api_mount_path": "clientPortal/AggregateClient",
"file_path": "clientPortal/AggregateClient.graphql",
"content": "query ClientPortalAggregateClient($where: clientPortal_ClientWhereInput, $orderBy: [clientPortal_ClientOrderByWithRelationInput], $cursor: clientPortal_ClientWhereUniqueInput, $take: Int, $skip: Int){clientPortal_aggregateClient(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id username password _all} _min {id username password} _max {id username password}}}"
},
{
"operation_name": "ClientPortalAggregateService",
"api_mount_path": "clientPortal/AggregateService",
"file_path": "clientPortal/AggregateService.graphql",
"content": "query ClientPortalAggregateService($where: clientPortal_ServiceWhereInput, $orderBy: [clientPortal_ServiceOrderByWithRelationInput], $cursor: clientPortal_ServiceWhereUniqueInput, $take: Int, $skip: Int){clientPortal_aggregateService(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id serviceType content clientId _all} _min {id serviceType clientId} _max {id serviceType clientId}}}"
},
{
"operation_name": "ClientPortalCreateManyActivity",
"api_mount_path": "clientPortal/CreateManyActivity",
"file_path": "clientPortal/CreateManyActivity.graphql",
"content": "mutation ClientPortalCreateManyActivity($data: [clientPortal_ActivityCreateManyInput]!, $skipDuplicates: Boolean){clientPortal_createManyActivity(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "ClientPortalCreateManyClient",
"api_mount_path": "clientPortal/CreateManyClient",
"file_path": "clientPortal/CreateManyClient.graphql",
"content": "mutation ClientPortalCreateManyClient($data: [clientPortal_ClientCreateManyInput]!, $skipDuplicates: Boolean){clientPortal_createManyClient(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "ClientPortalCreateManyService",
"api_mount_path": "clientPortal/CreateManyService",
"file_path": "clientPortal/CreateManyService.graphql",
"content": "mutation ClientPortalCreateManyService($data: [clientPortal_ServiceCreateManyInput]!, $skipDuplicates: Boolean){clientPortal_createManyService(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "ClientPortalCreateOneActivity",
"api_mount_path": "clientPortal/CreateOneActivity",
"file_path": "clientPortal/CreateOneActivity.graphql",
"content": "mutation ClientPortalCreateOneActivity($data: clientPortal_ActivityCreateInput!){clientPortal_createOneActivity(data: $data){id activityType timestamp details clientId}}"
},
{
"operation_name": "ClientPortalCreateOneClient",
"api_mount_path": "clientPortal/CreateOneClient",
"file_path": "clientPortal/CreateOneClient.graphql",
"content": "mutation ClientPortalCreateOneClient($data: clientPortal_ClientCreateInput!){clientPortal_createOneClient(data: $data){id username password}}"
},
{
"operation_name": "ClientPortalCreateOneService",
"api_mount_path": "clientPortal/CreateOneService",
"file_path": "clientPortal/CreateOneService.graphql",
"content": "mutation ClientPortalCreateOneService($data: clientPortal_ServiceCreateInput!){clientPortal_createOneService(data: $data){id serviceType content clientId}}"
},
{
"operation_name": "ClientPortalDeleteManyActivity",
"api_mount_path": "clientPortal/DeleteManyActivity",
"file_path": "clientPortal/DeleteManyActivity.graphql",
"content": "mutation ClientPortalDeleteManyActivity($where: clientPortal_ActivityWhereInput){clientPortal_deleteManyActivity(where: $where){count}}"
},
{
"operation_name": "ClientPortalDeleteManyClient",
"api_mount_path": "clientPortal/DeleteManyClient",
"file_path": "clientPortal/DeleteManyClient.graphql",
"content": "mutation ClientPortalDeleteManyClient($where: clientPortal_ClientWhereInput){clientPortal_deleteManyClient(where: $where){count}}"
},
{
"operation_name": "ClientPortalDeleteManyService",
"api_mount_path": "clientPortal/DeleteManyService",
"file_path": "clientPortal/DeleteManyService.graphql",
"content": "mutation ClientPortalDeleteManyService($where: clientPortal_ServiceWhereInput){clientPortal_deleteManyService(where: $where){count}}"
},
{
"operation_name": "ClientPortalDeleteOneActivity",
"api_mount_path": "clientPortal/DeleteOneActivity",
"file_path": "clientPortal/DeleteOneActivity.graphql",
"content": "mutation ClientPortalDeleteOneActivity($where: clientPortal_ActivityWhereUniqueInput!){clientPortal_deleteOneActivity(where: $where){id activityType timestamp details clientId}}"
},
{
"operation_name": "ClientPortalDeleteOneClient",
"api_mount_path": "clientPortal/DeleteOneClient",
"file_path": "clientPortal/DeleteOneClient.graphql",
"content": "mutation ClientPortalDeleteOneClient($where: clientPortal_ClientWhereUniqueInput!){clientPortal_deleteOneClient(where: $where){id username password}}"
},
{
"operation_name": "ClientPortalDeleteOneService",
"api_mount_path": "clientPortal/DeleteOneService",
"file_path": "clientPortal/DeleteOneService.graphql",
"content": "mutation ClientPortalDeleteOneService($where: clientPortal_ServiceWhereUniqueInput!){clientPortal_deleteOneService(where: $where){id serviceType content clientId}}"
},
{
"operation_name": "ClientPortalExecuteRaw",
"api_mount_path": "clientPortal/ExecuteRaw",
"file_path": "clientPortal/ExecuteRaw.graphql",
"content": "mutation ClientPortalExecuteRaw($query: String!, $parameters: [String]){clientPortal_executeRaw(query: $query, parameters: $parameters)}"
},
{
"operation_name": "ClientPortalFindFirstActivity",
"api_mount_path": "clientPortal/FindFirstActivity",
"file_path": "clientPortal/FindFirstActivity.graphql",
"content": "query ClientPortalFindFirstActivity($where: clientPortal_ActivityWhereInput, $orderBy: [clientPortal_ActivityOrderByWithRelationInput], $cursor: clientPortal_ActivityWhereUniqueInput, $take: Int, $skip: Int, $distinct: [clientPortal_ActivityScalarFieldEnum]){clientPortal_findFirstActivity(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id activityType timestamp details clientId}}"
},
{
"operation_name": "ClientPortalFindFirstActivityOrThrow",
"api_mount_path": "clientPortal/FindFirstActivityOrThrow",
"file_path": "clientPortal/FindFirstActivityOrThrow.graphql",
"content": "query ClientPortalFindFirstActivityOrThrow($where: clientPortal_ActivityWhereInput, $orderBy: [clientPortal_ActivityOrderByWithRelationInput], $cursor: clientPortal_ActivityWhereUniqueInput, $take: Int, $skip: Int, $distinct: [clientPortal_ActivityScalarFieldEnum]){clientPortal_findFirstActivityOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id activityType timestamp details clientId}}"
},
{
"operation_name": "ClientPortalFindFirstClient",
"api_mount_path": "clientPortal/FindFirstClient",
"file_path": "clientPortal/FindFirstClient.graphql",
"content": "query ClientPortalFindFirstClient($where: clientPortal_ClientWhereInput, $orderBy: [clientPortal_ClientOrderByWithRelationInput], $cursor: clientPortal_ClientWhereUniqueInput, $take: Int, $skip: Int, $distinct: [clientPortal_ClientScalarFieldEnum]){clientPortal_findFirstClient(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password}}"
},
{
"operation_name": "ClientPortalFindFirstClientOrThrow",
"api_mount_path": "clientPortal/FindFirstClientOrThrow",
"file_path": "clientPortal/FindFirstClientOrThrow.graphql",
"content": "query ClientPortalFindFirstClientOrThrow($where: clientPortal_ClientWhereInput, $orderBy: [clientPortal_ClientOrderByWithRelationInput], $cursor: clientPortal_ClientWhereUniqueInput, $take: Int, $skip: Int, $distinct: [clientPortal_ClientScalarFieldEnum]){clientPortal_findFirstClientOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password}}"
},
{
"operation_name": "ClientPortalFindFirstService",
"api_mount_path": "clientPortal/FindFirstService",
"file_path": "clientPortal/FindFirstService.graphql",
"content": "query ClientPortalFindFirstService($where: clientPortal_ServiceWhereInput, $orderBy: [clientPortal_ServiceOrderByWithRelationInput], $cursor: clientPortal_ServiceWhereUniqueInput, $take: Int, $skip: Int, $distinct: [clientPortal_ServiceScalarFieldEnum]){clientPortal_findFirstService(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id serviceType content clientId}}"
},
{
"operation_name": "ClientPortalFindFirstServiceOrThrow",
"api_mount_path": "clientPortal/FindFirstServiceOrThrow",
"file_path": "clientPortal/FindFirstServiceOrThrow.graphql",
"content": "query ClientPortalFindFirstServiceOrThrow($where: clientPortal_ServiceWhereInput, $orderBy: [clientPortal_ServiceOrderByWithRelationInput], $cursor: clientPortal_ServiceWhereUniqueInput, $take: Int, $skip: Int, $distinct: [clientPortal_ServiceScalarFieldEnum]){clientPortal_findFirstServiceOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id serviceType content clientId}}"
},
{
"operation_name": "ClientPortalFindManyActivity",
"api_mount_path": "clientPortal/FindManyActivity",
"file_path": "clientPortal/FindManyActivity.graphql",
"content": "query ClientPortalFindManyActivity($where: clientPortal_ActivityWhereInput, $orderBy: [clientPortal_ActivityOrderByWithRelationInput], $cursor: clientPortal_ActivityWhereUniqueInput, $take: Int, $skip: Int, $distinct: [clientPortal_ActivityScalarFieldEnum]){clientPortal_findManyActivity(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id activityType timestamp details clientId}}"
},
{
"operation_name": "ClientPortalFindManyClient",
"api_mount_path": "clientPortal/FindManyClient",
"file_path": "clientPortal/FindManyClient.graphql",
"content": "query ClientPortalFindManyClient($where: clientPortal_ClientWhereInput, $orderBy: [clientPortal_ClientOrderByWithRelationInput], $cursor: clientPortal_ClientWhereUniqueInput, $take: Int, $skip: Int, $distinct: [clientPortal_ClientScalarFieldEnum]){clientPortal_findManyClient(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password}}"
},
{
"operation_name": "ClientPortalFindManyService",
"api_mount_path": "clientPortal/FindManyService",
"file_path": "clientPortal/FindManyService.graphql",
"content": "query ClientPortalFindManyService($where: clientPortal_ServiceWhereInput, $orderBy: [clientPortal_ServiceOrderByWithRelationInput], $cursor: clientPortal_ServiceWhereUniqueInput, $take: Int, $skip: Int, $distinct: [clientPortal_ServiceScalarFieldEnum]){clientPortal_findManyService(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id serviceType content clientId}}"
},
{
"operation_name": "ClientPortalFindUniqueActivity",
"api_mount_path": "clientPortal/FindUniqueActivity",
"file_path": "clientPortal/FindUniqueActivity.graphql",
"content": "query ClientPortalFindUniqueActivity($where: clientPortal_ActivityWhereUniqueInput!){clientPortal_findUniqueActivity(where: $where){id activityType timestamp details clientId}}"
},
{
"operation_name": "ClientPortalFindUniqueActivityOrThrow",
"api_mount_path": "clientPortal/FindUniqueActivityOrThrow",
"file_path": "clientPortal/FindUniqueActivityOrThrow.graphql",
"content": "query ClientPortalFindUniqueActivityOrThrow($where: clientPortal_ActivityWhereUniqueInput!){clientPortal_findUniqueActivityOrThrow(where: $where){id activityType timestamp details clientId}}"
},
{
"operation_name": "ClientPortalFindUniqueClient",
"api_mount_path": "clientPortal/FindUniqueClient",
"file_path": "clientPortal/FindUniqueClient.graphql",
"content": "query ClientPortalFindUniqueClient($where: clientPortal_ClientWhereUniqueInput!){clientPortal_findUniqueClient(where: $where){id username password}}"
},
{
"operation_name": "ClientPortalFindUniqueClientOrThrow",
"api_mount_path": "clientPortal/FindUniqueClientOrThrow",
"file_path": "clientPortal/FindUniqueClientOrThrow.graphql",
"content": "query ClientPortalFindUniqueClientOrThrow($where: clientPortal_ClientWhereUniqueInput!){clientPortal_findUniqueClientOrThrow(where: $where){id username password}}"
},
{
"operation_name": "ClientPortalFindUniqueService",
"api_mount_path": "clientPortal/FindUniqueService",
"file_path": "clientPortal/FindUniqueService.graphql",
"content": "query ClientPortalFindUniqueService($where: clientPortal_ServiceWhereUniqueInput!){clientPortal_findUniqueService(where: $where){id serviceType content clientId}}"
},
{
"operation_name": "ClientPortalFindUniqueServiceOrThrow",
"api_mount_path": "clientPortal/FindUniqueServiceOrThrow",
"file_path": "clientPortal/FindUniqueServiceOrThrow.graphql",
"content": "query ClientPortalFindUniqueServiceOrThrow($where: clientPortal_ServiceWhereUniqueInput!){clientPortal_findUniqueServiceOrThrow(where: $where){id serviceType content clientId}}"
},
{
"operation_name": "ClientPortalGroupByActivity",
"api_mount_path": "clientPortal/GroupByActivity",
"file_path": "clientPortal/GroupByActivity.graphql",
"content": "query ClientPortalGroupByActivity($where: clientPortal_ActivityWhereInput, $orderBy: [clientPortal_ActivityOrderByWithAggregationInput], $by: [clientPortal_ActivityScalarFieldEnum]!, $having: clientPortal_ActivityScalarWhereWithAggregatesInput, $take: Int, $skip: Int){clientPortal_groupByActivity(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id activityType timestamp details clientId _count {id activityType timestamp details clientId _all} _min {id activityType timestamp clientId} _max {id activityType timestamp clientId}}}"
},
{
"operation_name": "ClientPortalGroupByClient",
"api_mount_path": "clientPortal/GroupByClient",
"file_path": "clientPortal/GroupByClient.graphql",
"content": "query ClientPortalGroupByClient($where: clientPortal_ClientWhereInput, $orderBy: [clientPortal_ClientOrderByWithAggregationInput], $by: [clientPortal_ClientScalarFieldEnum]!, $having: clientPortal_ClientScalarWhereWithAggregatesInput, $take: Int, $skip: Int){clientPortal_groupByClient(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id username password _count {id username password _all} _min {id username password} _max {id username password}}}"
},
{
"operation_name": "ClientPortalGroupByService",
"api_mount_path": "clientPortal/GroupByService",
"file_path": "clientPortal/GroupByService.graphql",
"content": "query ClientPortalGroupByService($where: clientPortal_ServiceWhereInput, $orderBy: [clientPortal_ServiceOrderByWithAggregationInput], $by: [clientPortal_ServiceScalarFieldEnum]!, $having: clientPortal_ServiceScalarWhereWithAggregatesInput, $take: Int, $skip: Int){clientPortal_groupByService(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id serviceType content clientId _count {id serviceType content clientId _all} _min {id serviceType clientId} _max {id serviceType clientId}}}"
},
{
"operation_name": "ClientPortalQueryRaw",
"api_mount_path": "clientPortal/QueryRaw",
"file_path": "clientPortal/QueryRaw.graphql",
"content": "query ClientPortalQueryRaw($query: String!, $parameters: [String]){clientPortal_queryRaw(query: $query, parameters: $parameters){ID Int Float String Boolean DateTime JSON Object {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} Array {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON OptionalObject {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalArray {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON}}}"
},
{
"operation_name": "ClientPortalQueryRawJSON",
"api_mount_path": "clientPortal/QueryRawJSON",
"file_path": "clientPortal/QueryRawJSON.graphql",
"content": "query ClientPortalQueryRawJSON($query: String!, $parameters: [String]){clientPortal_queryRawJSON(query: $query, parameters: $parameters)}"
},
{
"operation_name": "ClientPortalUpdateManyActivity",
"api_mount_path": "clientPortal/UpdateManyActivity",
"file_path": "clientPortal/UpdateManyActivity.graphql",
"content": "mutation ClientPortalUpdateManyActivity($data: clientPortal_ActivityUpdateManyMutationInput!, $where: clientPortal_ActivityWhereInput){clientPortal_updateManyActivity(data: $data, where: $where){count}}"
},
{
"operation_name": "ClientPortalUpdateManyClient",
"api_mount_path": "clientPortal/UpdateManyClient",
"file_path": "clientPortal/UpdateManyClient.graphql",
"content": "mutation ClientPortalUpdateManyClient($data: clientPortal_ClientUpdateManyMutationInput!, $where: clientPortal_ClientWhereInput){clientPortal_updateManyClient(data: $data, where: $where){count}}"
},
{
"operation_name": "ClientPortalUpdateManyService",
"api_mount_path": "clientPortal/UpdateManyService",
"file_path": "clientPortal/UpdateManyService.graphql",
"content": "mutation ClientPortalUpdateManyService($data: clientPortal_ServiceUpdateManyMutationInput!, $where: clientPortal_ServiceWhereInput){clientPortal_updateManyService(data: $data, where: $where){count}}"
},
{
"operation_name": "ClientPortalUpdateOneActivity",
"api_mount_path": "clientPortal/UpdateOneActivity",
"file_path": "clientPortal/UpdateOneActivity.graphql",
"content": "mutation ClientPortalUpdateOneActivity($data: clientPortal_ActivityUpdateInput!, $where: clientPortal_ActivityWhereUniqueInput!){clientPortal_updateOneActivity(data: $data, where: $where){id activityType timestamp details clientId}}"
},
{
"operation_name": "ClientPortalUpdateOneClient",
"api_mount_path": "clientPortal/UpdateOneClient",
"file_path": "clientPortal/UpdateOneClient.graphql",
"content": "mutation ClientPortalUpdateOneClient($data: clientPortal_ClientUpdateInput!, $where: clientPortal_ClientWhereUniqueInput!){clientPortal_updateOneClient(data: $data, where: $where){id username password}}"
},
{
"operation_name": "ClientPortalUpdateOneService",
"api_mount_path": "clientPortal/UpdateOneService",
"file_path": "clientPortal/UpdateOneService.graphql",
"content": "mutation ClientPortalUpdateOneService($data: clientPortal_ServiceUpdateInput!, $where: clientPortal_ServiceWhereUniqueInput!){clientPortal_updateOneService(data: $data, where: $where){id serviceType content clientId}}"
},
{
"operation_name": "ClientPortalUpsertOneActivity",
"api_mount_path": "clientPortal/UpsertOneActivity",
"file_path": "clientPortal/UpsertOneActivity.graphql",
"content": "mutation ClientPortalUpsertOneActivity($where: clientPortal_ActivityWhereUniqueInput!, $create: clientPortal_ActivityCreateInput!, $update: clientPortal_ActivityUpdateInput!){clientPortal_upsertOneActivity(where: $where, create: $create, update: $update){id activityType timestamp details clientId}}"
},
{
"operation_name": "ClientPortalUpsertOneClient",
"api_mount_path": "clientPortal/UpsertOneClient",
"file_path": "clientPortal/UpsertOneClient.graphql",
"content": "mutation ClientPortalUpsertOneClient($where: clientPortal_ClientWhereUniqueInput!, $create: clientPortal_ClientCreateInput!, $update: clientPortal_ClientUpdateInput!){clientPortal_upsertOneClient(where: $where, create: $create, update: $update){id username password}}"
},
{
"operation_name": "ClientPortalUpsertOneService",
"api_mount_path": "clientPortal/UpsertOneService",
"file_path": "clientPortal/UpsertOneService.graphql",
"content": "mutation ClientPortalUpsertOneService($where: clientPortal_ServiceWhereUniqueInput!, $create: clientPortal_ServiceCreateInput!, $update: clientPortal_ServiceUpdateInput!){clientPortal_upsertOneService(where: $where, create: $create, update: $update){id serviceType content clientId}}"
},
{
"operation_name": "CountriesContinent",
"api_mount_path": "countries/Continent",
"file_path": "countries/Continent.graphql",
"content": "query CountriesContinent($code: ID!, $countries_continent_countries_countries_name_lang: String){countries_continent(code: $code){code countries {awsRegion capital code currencies currency emoji emojiU languages {code name native rtl} name(lang: $countries_continent_countries_countries_name_lang) native phone phones states {code name} subdivisions {code emoji name}} name}}"
},
{
"operation_name": "CountriesContinents",
"api_mount_path": "countries/Continents",
"file_path": "countries/Continents.graphql",
"content": "query CountriesContinents($filter: countries_ContinentFilterInput, $countries_continents_countries_countries_name_lang: String){countries_continents(filter: $filter){code countries {awsRegion capital code currencies currency emoji emojiU languages {code name native rtl} name(lang: $countries_continents_countries_countries_name_lang) native phone phones states {code name} subdivisions {code emoji name}} name}}"
},
{
"operation_name": "CountriesCountries",
"api_mount_path": "countries/Countries",
"file_path": "countries/Countries.graphql",
"content": "query CountriesCountries($filter: countries_CountryFilterInput, $countries_countries_name_lang: String){countries_countries(filter: $filter){awsRegion capital code continent {code name} currencies currency emoji emojiU languages {code name native rtl} name(lang: $countries_countries_name_lang) native phone phones states {code name} subdivisions {code emoji name}}}"
},
{
"operation_name": "CountriesCountry",
"api_mount_path": "countries/Country",
"file_path": "countries/Country.graphql",
"content": "query CountriesCountry($code: ID!, $countries_country_name_lang: String){countries_country(code: $code){awsRegion capital code continent {code name} currencies currency emoji emojiU languages {code name native rtl} name(lang: $countries_country_name_lang) native phone phones states {code name} subdivisions {code emoji name}}}"
},
{
"operation_name": "CountriesCountryByCode",
"api_mount_path": "countries/CountryByCode",
"file_path": "countries/CountryByCode.graphql",
"content": "query CountriesCountryByCode($code: ID!){countries_country(code: $code){code name currencies capital}}"
},
{
"operation_name": "CountriesLanguage",
"api_mount_path": "countries/Language",
"file_path": "countries/Language.graphql",
"content": "query CountriesLanguage($code: ID!){countries_language(code: $code){code name native rtl}}"
},
{
"operation_name": "CountriesLanguages",
"api_mount_path": "countries/Languages",
"file_path": "countries/Languages.graphql",
"content": "query CountriesLanguages($filter: countries_LanguageFilterInput){countries_languages(filter: $filter){code name native rtl}}"
},
{
"operation_name": "CustomerCommunicationAggregateAccount",
"api_mount_path": "customerCommunication/AggregateAccount",
"file_path": "customerCommunication/AggregateAccount.graphql",
"content": "query CustomerCommunicationAggregateAccount($where: customerCommunication_AccountWhereInput, $orderBy: [customerCommunication_AccountOrderByWithRelationInput], $cursor: customerCommunication_AccountWhereUniqueInput, $take: Int, $skip: Int){customerCommunication_aggregateAccount(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt _all} _avg {expires_at} _sum {expires_at} _min {id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _max {id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt}}}"
},
{
"operation_name": "CustomerCommunicationAggregateFilter",
"api_mount_path": "customerCommunication/AggregateFilter",
"file_path": "customerCommunication/AggregateFilter.graphql",
"content": "query CustomerCommunicationAggregateFilter($where: customerCommunication_FilterWhereInput, $orderBy: [customerCommunication_FilterOrderByWithRelationInput], $cursor: customerCommunication_FilterWhereUniqueInput, $take: Int, $skip: Int){customerCommunication_aggregateFilter(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id audience output _all} _min {id audience output} _max {id audience output}}}"
},
{
"operation_name": "CustomerCommunicationAggregateInteraction",
"api_mount_path": "customerCommunication/AggregateInteraction",
"file_path": "customerCommunication/AggregateInteraction.graphql",
"content": "query CustomerCommunicationAggregateInteraction($where: customerCommunication_InteractionWhereInput, $orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $cursor: customerCommunication_InteractionWhereUniqueInput, $take: Int, $skip: Int){customerCommunication_aggregateInteraction(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id interactionType content timestamp userId widgetId _all} _min {id interactionType content timestamp userId widgetId} _max {id interactionType content timestamp userId widgetId}}}"
},
{
"operation_name": "CustomerCommunicationAggregateSession",
"api_mount_path": "customerCommunication/AggregateSession",
"file_path": "customerCommunication/AggregateSession.graphql",
"content": "query CustomerCommunicationAggregateSession($where: customerCommunication_SessionWhereInput, $orderBy: [customerCommunication_SessionOrderByWithRelationInput], $cursor: customerCommunication_SessionWhereUniqueInput, $take: Int, $skip: Int){customerCommunication_aggregateSession(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id sessionToken userId expires _all} _min {id sessionToken userId expires} _max {id sessionToken userId expires}}}"
},
{
"operation_name": "CustomerCommunicationAggregateUser",
"api_mount_path": "customerCommunication/AggregateUser",
"file_path": "customerCommunication/AggregateUser.graphql",
"content": "query CustomerCommunicationAggregateUser($where: customerCommunication_UserWhereInput, $orderBy: [customerCommunication_UserOrderByWithRelationInput], $cursor: customerCommunication_UserWhereUniqueInput, $take: Int, $skip: Int){customerCommunication_aggregateUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd _all} _min {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd} _max {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd}}}"
},
{
"operation_name": "CustomerCommunicationAggregateVerificationToken",
"api_mount_path": "customerCommunication/AggregateVerificationToken",
"file_path": "customerCommunication/AggregateVerificationToken.graphql",
"content": "query CustomerCommunicationAggregateVerificationToken($where: customerCommunication_VerificationTokenWhereInput, $orderBy: [customerCommunication_VerificationTokenOrderByWithRelationInput], $cursor: customerCommunication_VerificationTokenWhereUniqueInput, $take: Int, $skip: Int){customerCommunication_aggregateVerificationToken(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {identifier token expires _all} _min {identifier token expires} _max {identifier token expires}}}"
},
{
"operation_name": "CustomerCommunicationAggregateWidget",
"api_mount_path": "customerCommunication/AggregateWidget",
"file_path": "customerCommunication/AggregateWidget.graphql",
"content": "query CustomerCommunicationAggregateWidget($where: customerCommunication_WidgetWhereInput, $orderBy: [customerCommunication_WidgetOrderByWithRelationInput], $cursor: customerCommunication_WidgetWhereUniqueInput, $take: Int, $skip: Int){customerCommunication_aggregateWidget(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id embeddedIn _all} _min {id embeddedIn} _max {id embeddedIn}}}"
},
{
"operation_name": "CustomerCommunicationCreateManyAccount",
"api_mount_path": "customerCommunication/CreateManyAccount",
"file_path": "customerCommunication/CreateManyAccount.graphql",
"content": "mutation CustomerCommunicationCreateManyAccount($data: [customerCommunication_AccountCreateManyInput]!, $skipDuplicates: Boolean){customerCommunication_createManyAccount(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "CustomerCommunicationCreateManyFilter",
"api_mount_path": "customerCommunication/CreateManyFilter",
"file_path": "customerCommunication/CreateManyFilter.graphql",
"content": "mutation CustomerCommunicationCreateManyFilter($data: [customerCommunication_FilterCreateManyInput]!, $skipDuplicates: Boolean){customerCommunication_createManyFilter(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "CustomerCommunicationCreateManyInteraction",
"api_mount_path": "customerCommunication/CreateManyInteraction",
"file_path": "customerCommunication/CreateManyInteraction.graphql",
"content": "mutation CustomerCommunicationCreateManyInteraction($data: [customerCommunication_InteractionCreateManyInput]!, $skipDuplicates: Boolean){customerCommunication_createManyInteraction(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "CustomerCommunicationCreateManySession",
"api_mount_path": "customerCommunication/CreateManySession",
"file_path": "customerCommunication/CreateManySession.graphql",
"content": "mutation CustomerCommunicationCreateManySession($data: [customerCommunication_SessionCreateManyInput]!, $skipDuplicates: Boolean){customerCommunication_createManySession(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "CustomerCommunicationCreateManyUser",
"api_mount_path": "customerCommunication/CreateManyUser",
"file_path": "customerCommunication/CreateManyUser.graphql",
"content": "mutation CustomerCommunicationCreateManyUser($data: [customerCommunication_UserCreateManyInput]!, $skipDuplicates: Boolean){customerCommunication_createManyUser(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "CustomerCommunicationCreateManyVerificationToken",
"api_mount_path": "customerCommunication/CreateManyVerificationToken",
"file_path": "customerCommunication/CreateManyVerificationToken.graphql",
"content": "mutation CustomerCommunicationCreateManyVerificationToken($data: [customerCommunication_VerificationTokenCreateManyInput]!, $skipDuplicates: Boolean){customerCommunication_createManyVerificationToken(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "CustomerCommunicationCreateManyWidget",
"api_mount_path": "customerCommunication/CreateManyWidget",
"file_path": "customerCommunication/CreateManyWidget.graphql",
"content": "mutation CustomerCommunicationCreateManyWidget($data: [customerCommunication_WidgetCreateManyInput]!, $skipDuplicates: Boolean){customerCommunication_createManyWidget(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "CustomerCommunicationCreateOneAccount",
"api_mount_path": "customerCommunication/CreateOneAccount",
"file_path": "customerCommunication/CreateOneAccount.graphql",
"content": "mutation CustomerCommunicationCreateOneAccount($data: customerCommunication_AccountCreateInput!, $customerCommunication_createOneAccount_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_createOneAccount_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_createOneAccount_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_createOneAccount_user_user_interactions_take: Int, $customerCommunication_createOneAccount_user_user_interactions_skip: Int, $customerCommunication_createOneAccount_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_createOneAccount_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_createOneAccount_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_createOneAccount_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_createOneAccount_user_user_sessions_take: Int, $customerCommunication_createOneAccount_user_user_sessions_skip: Int, $customerCommunication_createOneAccount_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_createOneAccount(data: $data){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_createOneAccount_user_user_interactions_where, orderBy: $customerCommunication_createOneAccount_user_user_interactions_orderBy, cursor: $customerCommunication_createOneAccount_user_user_interactions_cursor, take: $customerCommunication_createOneAccount_user_user_interactions_take, skip: $customerCommunication_createOneAccount_user_user_interactions_skip, distinct: $customerCommunication_createOneAccount_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} sessions(where: $customerCommunication_createOneAccount_user_user_sessions_where, orderBy: $customerCommunication_createOneAccount_user_user_sessions_orderBy, cursor: $customerCommunication_createOneAccount_user_user_sessions_cursor, take: $customerCommunication_createOneAccount_user_user_sessions_take, skip: $customerCommunication_createOneAccount_user_user_sessions_skip, distinct: $customerCommunication_createOneAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationCreateOneFilter",
"api_mount_path": "customerCommunication/CreateOneFilter",
"file_path": "customerCommunication/CreateOneFilter.graphql",
"content": "mutation CustomerCommunicationCreateOneFilter($data: customerCommunication_FilterCreateInput!){customerCommunication_createOneFilter(data: $data){id audience output}}"
},
{
"operation_name": "CustomerCommunicationCreateOneInteraction",
"api_mount_path": "customerCommunication/CreateOneInteraction",
"file_path": "customerCommunication/CreateOneInteraction.graphql",
"content": "mutation CustomerCommunicationCreateOneInteraction($data: customerCommunication_InteractionCreateInput!, $customerCommunication_createOneInteraction_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_createOneInteraction_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_createOneInteraction_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_createOneInteraction_user_user_accounts_take: Int, $customerCommunication_createOneInteraction_user_user_accounts_skip: Int, $customerCommunication_createOneInteraction_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_createOneInteraction_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_createOneInteraction_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_createOneInteraction_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_createOneInteraction_user_user_sessions_take: Int, $customerCommunication_createOneInteraction_user_user_sessions_skip: Int, $customerCommunication_createOneInteraction_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_createOneInteraction(data: $data){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_createOneInteraction_user_user_accounts_where, orderBy: $customerCommunication_createOneInteraction_user_user_accounts_orderBy, cursor: $customerCommunication_createOneInteraction_user_user_accounts_cursor, take: $customerCommunication_createOneInteraction_user_user_accounts_take, skip: $customerCommunication_createOneInteraction_user_user_accounts_skip, distinct: $customerCommunication_createOneInteraction_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_createOneInteraction_user_user_sessions_where, orderBy: $customerCommunication_createOneInteraction_user_user_sessions_orderBy, cursor: $customerCommunication_createOneInteraction_user_user_sessions_cursor, take: $customerCommunication_createOneInteraction_user_user_sessions_take, skip: $customerCommunication_createOneInteraction_user_user_sessions_skip, distinct: $customerCommunication_createOneInteraction_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}} Widget {id embeddedIn _count {interactions}}}}"
},
{
"operation_name": "CustomerCommunicationCreateOneSession",
"api_mount_path": "customerCommunication/CreateOneSession",
"file_path": "customerCommunication/CreateOneSession.graphql",
"content": "mutation CustomerCommunicationCreateOneSession($data: customerCommunication_SessionCreateInput!, $customerCommunication_createOneSession_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_createOneSession_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_createOneSession_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_createOneSession_user_user_interactions_take: Int, $customerCommunication_createOneSession_user_user_interactions_skip: Int, $customerCommunication_createOneSession_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_createOneSession_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_createOneSession_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_createOneSession_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_createOneSession_user_user_accounts_take: Int, $customerCommunication_createOneSession_user_user_accounts_skip: Int, $customerCommunication_createOneSession_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum]){customerCommunication_createOneSession(data: $data){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_createOneSession_user_user_interactions_where, orderBy: $customerCommunication_createOneSession_user_user_interactions_orderBy, cursor: $customerCommunication_createOneSession_user_user_interactions_cursor, take: $customerCommunication_createOneSession_user_user_interactions_take, skip: $customerCommunication_createOneSession_user_user_interactions_skip, distinct: $customerCommunication_createOneSession_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_createOneSession_user_user_accounts_where, orderBy: $customerCommunication_createOneSession_user_user_accounts_orderBy, cursor: $customerCommunication_createOneSession_user_user_accounts_cursor, take: $customerCommunication_createOneSession_user_user_accounts_take, skip: $customerCommunication_createOneSession_user_user_accounts_skip, distinct: $customerCommunication_createOneSession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationCreateOneUser",
"api_mount_path": "customerCommunication/CreateOneUser",
"file_path": "customerCommunication/CreateOneUser.graphql",
"content": "mutation CustomerCommunicationCreateOneUser($data: customerCommunication_UserCreateInput!, $customerCommunication_createOneUser_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_createOneUser_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_createOneUser_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_createOneUser_interactions_take: Int, $customerCommunication_createOneUser_interactions_skip: Int, $customerCommunication_createOneUser_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_createOneUser_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_createOneUser_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_createOneUser_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_createOneUser_accounts_take: Int, $customerCommunication_createOneUser_accounts_skip: Int, $customerCommunication_createOneUser_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_createOneUser_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_createOneUser_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_createOneUser_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_createOneUser_sessions_take: Int, $customerCommunication_createOneUser_sessions_skip: Int, $customerCommunication_createOneUser_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_createOneUser(data: $data){id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_createOneUser_interactions_where, orderBy: $customerCommunication_createOneUser_interactions_orderBy, cursor: $customerCommunication_createOneUser_interactions_cursor, take: $customerCommunication_createOneUser_interactions_take, skip: $customerCommunication_createOneUser_interactions_skip, distinct: $customerCommunication_createOneUser_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_createOneUser_accounts_where, orderBy: $customerCommunication_createOneUser_accounts_orderBy, cursor: $customerCommunication_createOneUser_accounts_cursor, take: $customerCommunication_createOneUser_accounts_take, skip: $customerCommunication_createOneUser_accounts_skip, distinct: $customerCommunication_createOneUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_createOneUser_sessions_where, orderBy: $customerCommunication_createOneUser_sessions_orderBy, cursor: $customerCommunication_createOneUser_sessions_cursor, take: $customerCommunication_createOneUser_sessions_take, skip: $customerCommunication_createOneUser_sessions_skip, distinct: $customerCommunication_createOneUser_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}"
},
{
"operation_name": "CustomerCommunicationCreateOneVerificationToken",
"api_mount_path": "customerCommunication/CreateOneVerificationToken",
"file_path": "customerCommunication/CreateOneVerificationToken.graphql",
"content": "mutation CustomerCommunicationCreateOneVerificationToken($data: customerCommunication_VerificationTokenCreateInput!){customerCommunication_createOneVerificationToken(data: $data){identifier token expires}}"
},
{
"operation_name": "CustomerCommunicationCreateOneWidget",
"api_mount_path": "customerCommunication/CreateOneWidget",
"file_path": "customerCommunication/CreateOneWidget.graphql",
"content": "mutation CustomerCommunicationCreateOneWidget($data: customerCommunication_WidgetCreateInput!, $customerCommunication_createOneWidget_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_createOneWidget_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_createOneWidget_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_createOneWidget_interactions_take: Int, $customerCommunication_createOneWidget_interactions_skip: Int, $customerCommunication_createOneWidget_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_createOneWidget_interactions_interactions_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_createOneWidget_interactions_interactions_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_createOneWidget_interactions_interactions_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_createOneWidget_interactions_interactions_user_user_accounts_take: Int, $customerCommunication_createOneWidget_interactions_interactions_user_user_accounts_skip: Int, $customerCommunication_createOneWidget_interactions_interactions_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_createOneWidget_interactions_interactions_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_createOneWidget_interactions_interactions_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_createOneWidget_interactions_interactions_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_createOneWidget_interactions_interactions_user_user_sessions_take: Int, $customerCommunication_createOneWidget_interactions_interactions_user_user_sessions_skip: Int, $customerCommunication_createOneWidget_interactions_interactions_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_createOneWidget(data: $data){id embeddedIn interactions(where: $customerCommunication_createOneWidget_interactions_where, orderBy: $customerCommunication_createOneWidget_interactions_orderBy, cursor: $customerCommunication_createOneWidget_interactions_cursor, take: $customerCommunication_createOneWidget_interactions_take, skip: $customerCommunication_createOneWidget_interactions_skip, distinct: $customerCommunication_createOneWidget_interactions_distinct){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_createOneWidget_interactions_interactions_user_user_accounts_where, orderBy: $customerCommunication_createOneWidget_interactions_interactions_user_user_accounts_orderBy, cursor: $customerCommunication_createOneWidget_interactions_interactions_user_user_accounts_cursor, take: $customerCommunication_createOneWidget_interactions_interactions_user_user_accounts_take, skip: $customerCommunication_createOneWidget_interactions_interactions_user_user_accounts_skip, distinct: $customerCommunication_createOneWidget_interactions_interactions_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_createOneWidget_interactions_interactions_user_user_sessions_where, orderBy: $customerCommunication_createOneWidget_interactions_interactions_user_user_sessions_orderBy, cursor: $customerCommunication_createOneWidget_interactions_interactions_user_user_sessions_cursor, take: $customerCommunication_createOneWidget_interactions_interactions_user_user_sessions_take, skip: $customerCommunication_createOneWidget_interactions_interactions_user_user_sessions_skip, distinct: $customerCommunication_createOneWidget_interactions_interactions_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}} _count {interactions}}}"
},
{
"operation_name": "CustomerCommunicationDeleteManyAccount",
"api_mount_path": "customerCommunication/DeleteManyAccount",
"file_path": "customerCommunication/DeleteManyAccount.graphql",
"content": "mutation CustomerCommunicationDeleteManyAccount($where: customerCommunication_AccountWhereInput){customerCommunication_deleteManyAccount(where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationDeleteManyFilter",
"api_mount_path": "customerCommunication/DeleteManyFilter",
"file_path": "customerCommunication/DeleteManyFilter.graphql",
"content": "mutation CustomerCommunicationDeleteManyFilter($where: customerCommunication_FilterWhereInput){customerCommunication_deleteManyFilter(where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationDeleteManyInteraction",
"api_mount_path": "customerCommunication/DeleteManyInteraction",
"file_path": "customerCommunication/DeleteManyInteraction.graphql",
"content": "mutation CustomerCommunicationDeleteManyInteraction($where: customerCommunication_InteractionWhereInput){customerCommunication_deleteManyInteraction(where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationDeleteManySession",
"api_mount_path": "customerCommunication/DeleteManySession",
"file_path": "customerCommunication/DeleteManySession.graphql",
"content": "mutation CustomerCommunicationDeleteManySession($where: customerCommunication_SessionWhereInput){customerCommunication_deleteManySession(where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationDeleteManyUser",
"api_mount_path": "customerCommunication/DeleteManyUser",
"file_path": "customerCommunication/DeleteManyUser.graphql",
"content": "mutation CustomerCommunicationDeleteManyUser($where: customerCommunication_UserWhereInput){customerCommunication_deleteManyUser(where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationDeleteManyVerificationToken",
"api_mount_path": "customerCommunication/DeleteManyVerificationToken",
"file_path": "customerCommunication/DeleteManyVerificationToken.graphql",
"content": "mutation CustomerCommunicationDeleteManyVerificationToken($where: customerCommunication_VerificationTokenWhereInput){customerCommunication_deleteManyVerificationToken(where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationDeleteManyWidget",
"api_mount_path": "customerCommunication/DeleteManyWidget",
"file_path": "customerCommunication/DeleteManyWidget.graphql",
"content": "mutation CustomerCommunicationDeleteManyWidget($where: customerCommunication_WidgetWhereInput){customerCommunication_deleteManyWidget(where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationDeleteOneAccount",
"api_mount_path": "customerCommunication/DeleteOneAccount",
"file_path": "customerCommunication/DeleteOneAccount.graphql",
"content": "mutation CustomerCommunicationDeleteOneAccount($where: customerCommunication_AccountWhereUniqueInput!, $customerCommunication_deleteOneAccount_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_deleteOneAccount_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_deleteOneAccount_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_deleteOneAccount_user_user_interactions_take: Int, $customerCommunication_deleteOneAccount_user_user_interactions_skip: Int, $customerCommunication_deleteOneAccount_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_deleteOneAccount_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_deleteOneAccount_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_deleteOneAccount_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_deleteOneAccount_user_user_sessions_take: Int, $customerCommunication_deleteOneAccount_user_user_sessions_skip: Int, $customerCommunication_deleteOneAccount_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_deleteOneAccount(where: $where){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_deleteOneAccount_user_user_interactions_where, orderBy: $customerCommunication_deleteOneAccount_user_user_interactions_orderBy, cursor: $customerCommunication_deleteOneAccount_user_user_interactions_cursor, take: $customerCommunication_deleteOneAccount_user_user_interactions_take, skip: $customerCommunication_deleteOneAccount_user_user_interactions_skip, distinct: $customerCommunication_deleteOneAccount_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} sessions(where: $customerCommunication_deleteOneAccount_user_user_sessions_where, orderBy: $customerCommunication_deleteOneAccount_user_user_sessions_orderBy, cursor: $customerCommunication_deleteOneAccount_user_user_sessions_cursor, take: $customerCommunication_deleteOneAccount_user_user_sessions_take, skip: $customerCommunication_deleteOneAccount_user_user_sessions_skip, distinct: $customerCommunication_deleteOneAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationDeleteOneFilter",
"api_mount_path": "customerCommunication/DeleteOneFilter",
"file_path": "customerCommunication/DeleteOneFilter.graphql",
"content": "mutation CustomerCommunicationDeleteOneFilter($where: customerCommunication_FilterWhereUniqueInput!){customerCommunication_deleteOneFilter(where: $where){id audience output}}"
},
{
"operation_name": "CustomerCommunicationDeleteOneInteraction",
"api_mount_path": "customerCommunication/DeleteOneInteraction",
"file_path": "customerCommunication/DeleteOneInteraction.graphql",
"content": "mutation CustomerCommunicationDeleteOneInteraction($where: customerCommunication_InteractionWhereUniqueInput!, $customerCommunication_deleteOneInteraction_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_deleteOneInteraction_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_deleteOneInteraction_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_deleteOneInteraction_user_user_accounts_take: Int, $customerCommunication_deleteOneInteraction_user_user_accounts_skip: Int, $customerCommunication_deleteOneInteraction_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_deleteOneInteraction_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_deleteOneInteraction_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_deleteOneInteraction_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_deleteOneInteraction_user_user_sessions_take: Int, $customerCommunication_deleteOneInteraction_user_user_sessions_skip: Int, $customerCommunication_deleteOneInteraction_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_deleteOneInteraction(where: $where){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_deleteOneInteraction_user_user_accounts_where, orderBy: $customerCommunication_deleteOneInteraction_user_user_accounts_orderBy, cursor: $customerCommunication_deleteOneInteraction_user_user_accounts_cursor, take: $customerCommunication_deleteOneInteraction_user_user_accounts_take, skip: $customerCommunication_deleteOneInteraction_user_user_accounts_skip, distinct: $customerCommunication_deleteOneInteraction_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_deleteOneInteraction_user_user_sessions_where, orderBy: $customerCommunication_deleteOneInteraction_user_user_sessions_orderBy, cursor: $customerCommunication_deleteOneInteraction_user_user_sessions_cursor, take: $customerCommunication_deleteOneInteraction_user_user_sessions_take, skip: $customerCommunication_deleteOneInteraction_user_user_sessions_skip, distinct: $customerCommunication_deleteOneInteraction_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}} Widget {id embeddedIn _count {interactions}}}}"
},
{
"operation_name": "CustomerCommunicationDeleteOneSession",
"api_mount_path": "customerCommunication/DeleteOneSession",
"file_path": "customerCommunication/DeleteOneSession.graphql",
"content": "mutation CustomerCommunicationDeleteOneSession($where: customerCommunication_SessionWhereUniqueInput!, $customerCommunication_deleteOneSession_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_deleteOneSession_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_deleteOneSession_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_deleteOneSession_user_user_interactions_take: Int, $customerCommunication_deleteOneSession_user_user_interactions_skip: Int, $customerCommunication_deleteOneSession_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_deleteOneSession_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_deleteOneSession_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_deleteOneSession_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_deleteOneSession_user_user_accounts_take: Int, $customerCommunication_deleteOneSession_user_user_accounts_skip: Int, $customerCommunication_deleteOneSession_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum]){customerCommunication_deleteOneSession(where: $where){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_deleteOneSession_user_user_interactions_where, orderBy: $customerCommunication_deleteOneSession_user_user_interactions_orderBy, cursor: $customerCommunication_deleteOneSession_user_user_interactions_cursor, take: $customerCommunication_deleteOneSession_user_user_interactions_take, skip: $customerCommunication_deleteOneSession_user_user_interactions_skip, distinct: $customerCommunication_deleteOneSession_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_deleteOneSession_user_user_accounts_where, orderBy: $customerCommunication_deleteOneSession_user_user_accounts_orderBy, cursor: $customerCommunication_deleteOneSession_user_user_accounts_cursor, take: $customerCommunication_deleteOneSession_user_user_accounts_take, skip: $customerCommunication_deleteOneSession_user_user_accounts_skip, distinct: $customerCommunication_deleteOneSession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationDeleteOneUser",
"api_mount_path": "customerCommunication/DeleteOneUser",
"file_path": "customerCommunication/DeleteOneUser.graphql",
"content": "mutation CustomerCommunicationDeleteOneUser($where: customerCommunication_UserWhereUniqueInput!, $customerCommunication_deleteOneUser_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_deleteOneUser_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_deleteOneUser_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_deleteOneUser_interactions_take: Int, $customerCommunication_deleteOneUser_interactions_skip: Int, $customerCommunication_deleteOneUser_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_deleteOneUser_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_deleteOneUser_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_deleteOneUser_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_deleteOneUser_accounts_take: Int, $customerCommunication_deleteOneUser_accounts_skip: Int, $customerCommunication_deleteOneUser_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_deleteOneUser_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_deleteOneUser_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_deleteOneUser_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_deleteOneUser_sessions_take: Int, $customerCommunication_deleteOneUser_sessions_skip: Int, $customerCommunication_deleteOneUser_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_deleteOneUser(where: $where){id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_deleteOneUser_interactions_where, orderBy: $customerCommunication_deleteOneUser_interactions_orderBy, cursor: $customerCommunication_deleteOneUser_interactions_cursor, take: $customerCommunication_deleteOneUser_interactions_take, skip: $customerCommunication_deleteOneUser_interactions_skip, distinct: $customerCommunication_deleteOneUser_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_deleteOneUser_accounts_where, orderBy: $customerCommunication_deleteOneUser_accounts_orderBy, cursor: $customerCommunication_deleteOneUser_accounts_cursor, take: $customerCommunication_deleteOneUser_accounts_take, skip: $customerCommunication_deleteOneUser_accounts_skip, distinct: $customerCommunication_deleteOneUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_deleteOneUser_sessions_where, orderBy: $customerCommunication_deleteOneUser_sessions_orderBy, cursor: $customerCommunication_deleteOneUser_sessions_cursor, take: $customerCommunication_deleteOneUser_sessions_take, skip: $customerCommunication_deleteOneUser_sessions_skip, distinct: $customerCommunication_deleteOneUser_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}"
},
{
"operation_name": "CustomerCommunicationDeleteOneVerificationToken",
"api_mount_path": "customerCommunication/DeleteOneVerificationToken",
"file_path": "customerCommunication/DeleteOneVerificationToken.graphql",
"content": "mutation CustomerCommunicationDeleteOneVerificationToken($where: customerCommunication_VerificationTokenWhereUniqueInput!){customerCommunication_deleteOneVerificationToken(where: $where){identifier token expires}}"
},
{
"operation_name": "CustomerCommunicationDeleteOneWidget",
"api_mount_path": "customerCommunication/DeleteOneWidget",
"file_path": "customerCommunication/DeleteOneWidget.graphql",
"content": "mutation CustomerCommunicationDeleteOneWidget($where: customerCommunication_WidgetWhereUniqueInput!, $customerCommunication_deleteOneWidget_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_deleteOneWidget_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_deleteOneWidget_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_deleteOneWidget_interactions_take: Int, $customerCommunication_deleteOneWidget_interactions_skip: Int, $customerCommunication_deleteOneWidget_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_deleteOneWidget_interactions_interactions_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_deleteOneWidget_interactions_interactions_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_deleteOneWidget_interactions_interactions_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_deleteOneWidget_interactions_interactions_user_user_accounts_take: Int, $customerCommunication_deleteOneWidget_interactions_interactions_user_user_accounts_skip: Int, $customerCommunication_deleteOneWidget_interactions_interactions_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_deleteOneWidget_interactions_interactions_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_deleteOneWidget_interactions_interactions_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_deleteOneWidget_interactions_interactions_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_deleteOneWidget_interactions_interactions_user_user_sessions_take: Int, $customerCommunication_deleteOneWidget_interactions_interactions_user_user_sessions_skip: Int, $customerCommunication_deleteOneWidget_interactions_interactions_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_deleteOneWidget(where: $where){id embeddedIn interactions(where: $customerCommunication_deleteOneWidget_interactions_where, orderBy: $customerCommunication_deleteOneWidget_interactions_orderBy, cursor: $customerCommunication_deleteOneWidget_interactions_cursor, take: $customerCommunication_deleteOneWidget_interactions_take, skip: $customerCommunication_deleteOneWidget_interactions_skip, distinct: $customerCommunication_deleteOneWidget_interactions_distinct){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_deleteOneWidget_interactions_interactions_user_user_accounts_where, orderBy: $customerCommunication_deleteOneWidget_interactions_interactions_user_user_accounts_orderBy, cursor: $customerCommunication_deleteOneWidget_interactions_interactions_user_user_accounts_cursor, take: $customerCommunication_deleteOneWidget_interactions_interactions_user_user_accounts_take, skip: $customerCommunication_deleteOneWidget_interactions_interactions_user_user_accounts_skip, distinct: $customerCommunication_deleteOneWidget_interactions_interactions_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_deleteOneWidget_interactions_interactions_user_user_sessions_where, orderBy: $customerCommunication_deleteOneWidget_interactions_interactions_user_user_sessions_orderBy, cursor: $customerCommunication_deleteOneWidget_interactions_interactions_user_user_sessions_cursor, take: $customerCommunication_deleteOneWidget_interactions_interactions_user_user_sessions_take, skip: $customerCommunication_deleteOneWidget_interactions_interactions_user_user_sessions_skip, distinct: $customerCommunication_deleteOneWidget_interactions_interactions_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}} _count {interactions}}}"
},
{
"operation_name": "CustomerCommunicationExecuteRaw",
"api_mount_path": "customerCommunication/ExecuteRaw",
"file_path": "customerCommunication/ExecuteRaw.graphql",
"content": "mutation CustomerCommunicationExecuteRaw($query: String!, $parameters: [String]){customerCommunication_executeRaw(query: $query, parameters: $parameters)}"
},
{
"operation_name": "CustomerCommunicationFindFirstAccount",
"api_mount_path": "customerCommunication/FindFirstAccount",
"file_path": "customerCommunication/FindFirstAccount.graphql",
"content": "query CustomerCommunicationFindFirstAccount($where: customerCommunication_AccountWhereInput, $orderBy: [customerCommunication_AccountOrderByWithRelationInput], $cursor: customerCommunication_AccountWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findFirstAccount_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findFirstAccount_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findFirstAccount_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findFirstAccount_user_user_interactions_take: Int, $customerCommunication_findFirstAccount_user_user_interactions_skip: Int, $customerCommunication_findFirstAccount_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findFirstAccount_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findFirstAccount_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findFirstAccount_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findFirstAccount_user_user_sessions_take: Int, $customerCommunication_findFirstAccount_user_user_sessions_skip: Int, $customerCommunication_findFirstAccount_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findFirstAccount(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findFirstAccount_user_user_interactions_where, orderBy: $customerCommunication_findFirstAccount_user_user_interactions_orderBy, cursor: $customerCommunication_findFirstAccount_user_user_interactions_cursor, take: $customerCommunication_findFirstAccount_user_user_interactions_take, skip: $customerCommunication_findFirstAccount_user_user_interactions_skip, distinct: $customerCommunication_findFirstAccount_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} sessions(where: $customerCommunication_findFirstAccount_user_user_sessions_where, orderBy: $customerCommunication_findFirstAccount_user_user_sessions_orderBy, cursor: $customerCommunication_findFirstAccount_user_user_sessions_cursor, take: $customerCommunication_findFirstAccount_user_user_sessions_take, skip: $customerCommunication_findFirstAccount_user_user_sessions_skip, distinct: $customerCommunication_findFirstAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationFindFirstAccountOrThrow",
"api_mount_path": "customerCommunication/FindFirstAccountOrThrow",
"file_path": "customerCommunication/FindFirstAccountOrThrow.graphql",
"content": "query CustomerCommunicationFindFirstAccountOrThrow($where: customerCommunication_AccountWhereInput, $orderBy: [customerCommunication_AccountOrderByWithRelationInput], $cursor: customerCommunication_AccountWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findFirstAccountOrThrow_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findFirstAccountOrThrow_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findFirstAccountOrThrow_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findFirstAccountOrThrow_user_user_interactions_take: Int, $customerCommunication_findFirstAccountOrThrow_user_user_interactions_skip: Int, $customerCommunication_findFirstAccountOrThrow_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findFirstAccountOrThrow_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findFirstAccountOrThrow_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findFirstAccountOrThrow_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findFirstAccountOrThrow_user_user_sessions_take: Int, $customerCommunication_findFirstAccountOrThrow_user_user_sessions_skip: Int, $customerCommunication_findFirstAccountOrThrow_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findFirstAccountOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findFirstAccountOrThrow_user_user_interactions_where, orderBy: $customerCommunication_findFirstAccountOrThrow_user_user_interactions_orderBy, cursor: $customerCommunication_findFirstAccountOrThrow_user_user_interactions_cursor, take: $customerCommunication_findFirstAccountOrThrow_user_user_interactions_take, skip: $customerCommunication_findFirstAccountOrThrow_user_user_interactions_skip, distinct: $customerCommunication_findFirstAccountOrThrow_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} sessions(where: $customerCommunication_findFirstAccountOrThrow_user_user_sessions_where, orderBy: $customerCommunication_findFirstAccountOrThrow_user_user_sessions_orderBy, cursor: $customerCommunication_findFirstAccountOrThrow_user_user_sessions_cursor, take: $customerCommunication_findFirstAccountOrThrow_user_user_sessions_take, skip: $customerCommunication_findFirstAccountOrThrow_user_user_sessions_skip, distinct: $customerCommunication_findFirstAccountOrThrow_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationFindFirstFilter",
"api_mount_path": "customerCommunication/FindFirstFilter",
"file_path": "customerCommunication/FindFirstFilter.graphql",
"content": "query CustomerCommunicationFindFirstFilter($where: customerCommunication_FilterWhereInput, $orderBy: [customerCommunication_FilterOrderByWithRelationInput], $cursor: customerCommunication_FilterWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_FilterScalarFieldEnum]){customerCommunication_findFirstFilter(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id audience output}}"
},
{
"operation_name": "CustomerCommunicationFindFirstFilterOrThrow",
"api_mount_path": "customerCommunication/FindFirstFilterOrThrow",
"file_path": "customerCommunication/FindFirstFilterOrThrow.graphql",
"content": "query CustomerCommunicationFindFirstFilterOrThrow($where: customerCommunication_FilterWhereInput, $orderBy: [customerCommunication_FilterOrderByWithRelationInput], $cursor: customerCommunication_FilterWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_FilterScalarFieldEnum]){customerCommunication_findFirstFilterOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id audience output}}"
},
{
"operation_name": "CustomerCommunicationFindFirstInteraction",
"api_mount_path": "customerCommunication/FindFirstInteraction",
"file_path": "customerCommunication/FindFirstInteraction.graphql",
"content": "query CustomerCommunicationFindFirstInteraction($where: customerCommunication_InteractionWhereInput, $orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $cursor: customerCommunication_InteractionWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findFirstInteraction_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findFirstInteraction_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findFirstInteraction_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findFirstInteraction_user_user_accounts_take: Int, $customerCommunication_findFirstInteraction_user_user_accounts_skip: Int, $customerCommunication_findFirstInteraction_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findFirstInteraction_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findFirstInteraction_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findFirstInteraction_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findFirstInteraction_user_user_sessions_take: Int, $customerCommunication_findFirstInteraction_user_user_sessions_skip: Int, $customerCommunication_findFirstInteraction_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findFirstInteraction(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_findFirstInteraction_user_user_accounts_where, orderBy: $customerCommunication_findFirstInteraction_user_user_accounts_orderBy, cursor: $customerCommunication_findFirstInteraction_user_user_accounts_cursor, take: $customerCommunication_findFirstInteraction_user_user_accounts_take, skip: $customerCommunication_findFirstInteraction_user_user_accounts_skip, distinct: $customerCommunication_findFirstInteraction_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findFirstInteraction_user_user_sessions_where, orderBy: $customerCommunication_findFirstInteraction_user_user_sessions_orderBy, cursor: $customerCommunication_findFirstInteraction_user_user_sessions_cursor, take: $customerCommunication_findFirstInteraction_user_user_sessions_take, skip: $customerCommunication_findFirstInteraction_user_user_sessions_skip, distinct: $customerCommunication_findFirstInteraction_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}} Widget {id embeddedIn _count {interactions}}}}"
},
{
"operation_name": "CustomerCommunicationFindFirstInteractionOrThrow",
"api_mount_path": "customerCommunication/FindFirstInteractionOrThrow",
"file_path": "customerCommunication/FindFirstInteractionOrThrow.graphql",
"content": "query CustomerCommunicationFindFirstInteractionOrThrow($where: customerCommunication_InteractionWhereInput, $orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $cursor: customerCommunication_InteractionWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findFirstInteractionOrThrow_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findFirstInteractionOrThrow_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findFirstInteractionOrThrow_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findFirstInteractionOrThrow_user_user_accounts_take: Int, $customerCommunication_findFirstInteractionOrThrow_user_user_accounts_skip: Int, $customerCommunication_findFirstInteractionOrThrow_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findFirstInteractionOrThrow_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findFirstInteractionOrThrow_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findFirstInteractionOrThrow_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findFirstInteractionOrThrow_user_user_sessions_take: Int, $customerCommunication_findFirstInteractionOrThrow_user_user_sessions_skip: Int, $customerCommunication_findFirstInteractionOrThrow_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findFirstInteractionOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_findFirstInteractionOrThrow_user_user_accounts_where, orderBy: $customerCommunication_findFirstInteractionOrThrow_user_user_accounts_orderBy, cursor: $customerCommunication_findFirstInteractionOrThrow_user_user_accounts_cursor, take: $customerCommunication_findFirstInteractionOrThrow_user_user_accounts_take, skip: $customerCommunication_findFirstInteractionOrThrow_user_user_accounts_skip, distinct: $customerCommunication_findFirstInteractionOrThrow_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findFirstInteractionOrThrow_user_user_sessions_where, orderBy: $customerCommunication_findFirstInteractionOrThrow_user_user_sessions_orderBy, cursor: $customerCommunication_findFirstInteractionOrThrow_user_user_sessions_cursor, take: $customerCommunication_findFirstInteractionOrThrow_user_user_sessions_take, skip: $customerCommunication_findFirstInteractionOrThrow_user_user_sessions_skip, distinct: $customerCommunication_findFirstInteractionOrThrow_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}} Widget {id embeddedIn _count {interactions}}}}"
},
{
"operation_name": "CustomerCommunicationFindFirstSession",
"api_mount_path": "customerCommunication/FindFirstSession",
"file_path": "customerCommunication/FindFirstSession.graphql",
"content": "query CustomerCommunicationFindFirstSession($where: customerCommunication_SessionWhereInput, $orderBy: [customerCommunication_SessionOrderByWithRelationInput], $cursor: customerCommunication_SessionWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_SessionScalarFieldEnum], $customerCommunication_findFirstSession_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findFirstSession_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findFirstSession_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findFirstSession_user_user_interactions_take: Int, $customerCommunication_findFirstSession_user_user_interactions_skip: Int, $customerCommunication_findFirstSession_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findFirstSession_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findFirstSession_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findFirstSession_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findFirstSession_user_user_accounts_take: Int, $customerCommunication_findFirstSession_user_user_accounts_skip: Int, $customerCommunication_findFirstSession_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum]){customerCommunication_findFirstSession(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findFirstSession_user_user_interactions_where, orderBy: $customerCommunication_findFirstSession_user_user_interactions_orderBy, cursor: $customerCommunication_findFirstSession_user_user_interactions_cursor, take: $customerCommunication_findFirstSession_user_user_interactions_take, skip: $customerCommunication_findFirstSession_user_user_interactions_skip, distinct: $customerCommunication_findFirstSession_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_findFirstSession_user_user_accounts_where, orderBy: $customerCommunication_findFirstSession_user_user_accounts_orderBy, cursor: $customerCommunication_findFirstSession_user_user_accounts_cursor, take: $customerCommunication_findFirstSession_user_user_accounts_take, skip: $customerCommunication_findFirstSession_user_user_accounts_skip, distinct: $customerCommunication_findFirstSession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationFindFirstSessionOrThrow",
"api_mount_path": "customerCommunication/FindFirstSessionOrThrow",
"file_path": "customerCommunication/FindFirstSessionOrThrow.graphql",
"content": "query CustomerCommunicationFindFirstSessionOrThrow($where: customerCommunication_SessionWhereInput, $orderBy: [customerCommunication_SessionOrderByWithRelationInput], $cursor: customerCommunication_SessionWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_SessionScalarFieldEnum], $customerCommunication_findFirstSessionOrThrow_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findFirstSessionOrThrow_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findFirstSessionOrThrow_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findFirstSessionOrThrow_user_user_interactions_take: Int, $customerCommunication_findFirstSessionOrThrow_user_user_interactions_skip: Int, $customerCommunication_findFirstSessionOrThrow_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findFirstSessionOrThrow_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findFirstSessionOrThrow_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findFirstSessionOrThrow_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findFirstSessionOrThrow_user_user_accounts_take: Int, $customerCommunication_findFirstSessionOrThrow_user_user_accounts_skip: Int, $customerCommunication_findFirstSessionOrThrow_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum]){customerCommunication_findFirstSessionOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findFirstSessionOrThrow_user_user_interactions_where, orderBy: $customerCommunication_findFirstSessionOrThrow_user_user_interactions_orderBy, cursor: $customerCommunication_findFirstSessionOrThrow_user_user_interactions_cursor, take: $customerCommunication_findFirstSessionOrThrow_user_user_interactions_take, skip: $customerCommunication_findFirstSessionOrThrow_user_user_interactions_skip, distinct: $customerCommunication_findFirstSessionOrThrow_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_findFirstSessionOrThrow_user_user_accounts_where, orderBy: $customerCommunication_findFirstSessionOrThrow_user_user_accounts_orderBy, cursor: $customerCommunication_findFirstSessionOrThrow_user_user_accounts_cursor, take: $customerCommunication_findFirstSessionOrThrow_user_user_accounts_take, skip: $customerCommunication_findFirstSessionOrThrow_user_user_accounts_skip, distinct: $customerCommunication_findFirstSessionOrThrow_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationFindFirstUser",
"api_mount_path": "customerCommunication/FindFirstUser",
"file_path": "customerCommunication/FindFirstUser.graphql",
"content": "query CustomerCommunicationFindFirstUser($where: customerCommunication_UserWhereInput, $orderBy: [customerCommunication_UserOrderByWithRelationInput], $cursor: customerCommunication_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_UserScalarFieldEnum], $customerCommunication_findFirstUser_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findFirstUser_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findFirstUser_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findFirstUser_interactions_take: Int, $customerCommunication_findFirstUser_interactions_skip: Int, $customerCommunication_findFirstUser_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findFirstUser_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findFirstUser_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findFirstUser_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findFirstUser_accounts_take: Int, $customerCommunication_findFirstUser_accounts_skip: Int, $customerCommunication_findFirstUser_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findFirstUser_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findFirstUser_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findFirstUser_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findFirstUser_sessions_take: Int, $customerCommunication_findFirstUser_sessions_skip: Int, $customerCommunication_findFirstUser_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findFirstUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findFirstUser_interactions_where, orderBy: $customerCommunication_findFirstUser_interactions_orderBy, cursor: $customerCommunication_findFirstUser_interactions_cursor, take: $customerCommunication_findFirstUser_interactions_take, skip: $customerCommunication_findFirstUser_interactions_skip, distinct: $customerCommunication_findFirstUser_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_findFirstUser_accounts_where, orderBy: $customerCommunication_findFirstUser_accounts_orderBy, cursor: $customerCommunication_findFirstUser_accounts_cursor, take: $customerCommunication_findFirstUser_accounts_take, skip: $customerCommunication_findFirstUser_accounts_skip, distinct: $customerCommunication_findFirstUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findFirstUser_sessions_where, orderBy: $customerCommunication_findFirstUser_sessions_orderBy, cursor: $customerCommunication_findFirstUser_sessions_cursor, take: $customerCommunication_findFirstUser_sessions_take, skip: $customerCommunication_findFirstUser_sessions_skip, distinct: $customerCommunication_findFirstUser_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}"
},
{
"operation_name": "CustomerCommunicationFindFirstUserOrThrow",
"api_mount_path": "customerCommunication/FindFirstUserOrThrow",
"file_path": "customerCommunication/FindFirstUserOrThrow.graphql",
"content": "query CustomerCommunicationFindFirstUserOrThrow($where: customerCommunication_UserWhereInput, $orderBy: [customerCommunication_UserOrderByWithRelationInput], $cursor: customerCommunication_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_UserScalarFieldEnum], $customerCommunication_findFirstUserOrThrow_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findFirstUserOrThrow_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findFirstUserOrThrow_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findFirstUserOrThrow_interactions_take: Int, $customerCommunication_findFirstUserOrThrow_interactions_skip: Int, $customerCommunication_findFirstUserOrThrow_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findFirstUserOrThrow_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findFirstUserOrThrow_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findFirstUserOrThrow_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findFirstUserOrThrow_accounts_take: Int, $customerCommunication_findFirstUserOrThrow_accounts_skip: Int, $customerCommunication_findFirstUserOrThrow_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findFirstUserOrThrow_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findFirstUserOrThrow_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findFirstUserOrThrow_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findFirstUserOrThrow_sessions_take: Int, $customerCommunication_findFirstUserOrThrow_sessions_skip: Int, $customerCommunication_findFirstUserOrThrow_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findFirstUserOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findFirstUserOrThrow_interactions_where, orderBy: $customerCommunication_findFirstUserOrThrow_interactions_orderBy, cursor: $customerCommunication_findFirstUserOrThrow_interactions_cursor, take: $customerCommunication_findFirstUserOrThrow_interactions_take, skip: $customerCommunication_findFirstUserOrThrow_interactions_skip, distinct: $customerCommunication_findFirstUserOrThrow_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_findFirstUserOrThrow_accounts_where, orderBy: $customerCommunication_findFirstUserOrThrow_accounts_orderBy, cursor: $customerCommunication_findFirstUserOrThrow_accounts_cursor, take: $customerCommunication_findFirstUserOrThrow_accounts_take, skip: $customerCommunication_findFirstUserOrThrow_accounts_skip, distinct: $customerCommunication_findFirstUserOrThrow_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findFirstUserOrThrow_sessions_where, orderBy: $customerCommunication_findFirstUserOrThrow_sessions_orderBy, cursor: $customerCommunication_findFirstUserOrThrow_sessions_cursor, take: $customerCommunication_findFirstUserOrThrow_sessions_take, skip: $customerCommunication_findFirstUserOrThrow_sessions_skip, distinct: $customerCommunication_findFirstUserOrThrow_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}"
},
{
"operation_name": "CustomerCommunicationFindFirstVerificationToken",
"api_mount_path": "customerCommunication/FindFirstVerificationToken",
"file_path": "customerCommunication/FindFirstVerificationToken.graphql",
"content": "query CustomerCommunicationFindFirstVerificationToken($where: customerCommunication_VerificationTokenWhereInput, $orderBy: [customerCommunication_VerificationTokenOrderByWithRelationInput], $cursor: customerCommunication_VerificationTokenWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_VerificationTokenScalarFieldEnum]){customerCommunication_findFirstVerificationToken(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){identifier token expires}}"
},
{
"operation_name": "CustomerCommunicationFindFirstVerificationTokenOrThrow",
"api_mount_path": "customerCommunication/FindFirstVerificationTokenOrThrow",
"file_path": "customerCommunication/FindFirstVerificationTokenOrThrow.graphql",
"content": "query CustomerCommunicationFindFirstVerificationTokenOrThrow($where: customerCommunication_VerificationTokenWhereInput, $orderBy: [customerCommunication_VerificationTokenOrderByWithRelationInput], $cursor: customerCommunication_VerificationTokenWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_VerificationTokenScalarFieldEnum]){customerCommunication_findFirstVerificationTokenOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){identifier token expires}}"
},
{
"operation_name": "CustomerCommunicationFindFirstWidget",
"api_mount_path": "customerCommunication/FindFirstWidget",
"file_path": "customerCommunication/FindFirstWidget.graphql",
"content": "query CustomerCommunicationFindFirstWidget($where: customerCommunication_WidgetWhereInput, $orderBy: [customerCommunication_WidgetOrderByWithRelationInput], $cursor: customerCommunication_WidgetWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_WidgetScalarFieldEnum], $customerCommunication_findFirstWidget_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findFirstWidget_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findFirstWidget_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findFirstWidget_interactions_take: Int, $customerCommunication_findFirstWidget_interactions_skip: Int, $customerCommunication_findFirstWidget_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findFirstWidget_interactions_interactions_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findFirstWidget_interactions_interactions_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findFirstWidget_interactions_interactions_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findFirstWidget_interactions_interactions_user_user_accounts_take: Int, $customerCommunication_findFirstWidget_interactions_interactions_user_user_accounts_skip: Int, $customerCommunication_findFirstWidget_interactions_interactions_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findFirstWidget_interactions_interactions_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findFirstWidget_interactions_interactions_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findFirstWidget_interactions_interactions_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findFirstWidget_interactions_interactions_user_user_sessions_take: Int, $customerCommunication_findFirstWidget_interactions_interactions_user_user_sessions_skip: Int, $customerCommunication_findFirstWidget_interactions_interactions_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findFirstWidget(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id embeddedIn interactions(where: $customerCommunication_findFirstWidget_interactions_where, orderBy: $customerCommunication_findFirstWidget_interactions_orderBy, cursor: $customerCommunication_findFirstWidget_interactions_cursor, take: $customerCommunication_findFirstWidget_interactions_take, skip: $customerCommunication_findFirstWidget_interactions_skip, distinct: $customerCommunication_findFirstWidget_interactions_distinct){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_findFirstWidget_interactions_interactions_user_user_accounts_where, orderBy: $customerCommunication_findFirstWidget_interactions_interactions_user_user_accounts_orderBy, cursor: $customerCommunication_findFirstWidget_interactions_interactions_user_user_accounts_cursor, take: $customerCommunication_findFirstWidget_interactions_interactions_user_user_accounts_take, skip: $customerCommunication_findFirstWidget_interactions_interactions_user_user_accounts_skip, distinct: $customerCommunication_findFirstWidget_interactions_interactions_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findFirstWidget_interactions_interactions_user_user_sessions_where, orderBy: $customerCommunication_findFirstWidget_interactions_interactions_user_user_sessions_orderBy, cursor: $customerCommunication_findFirstWidget_interactions_interactions_user_user_sessions_cursor, take: $customerCommunication_findFirstWidget_interactions_interactions_user_user_sessions_take, skip: $customerCommunication_findFirstWidget_interactions_interactions_user_user_sessions_skip, distinct: $customerCommunication_findFirstWidget_interactions_interactions_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}} _count {interactions}}}"
},
{
"operation_name": "CustomerCommunicationFindFirstWidgetOrThrow",
"api_mount_path": "customerCommunication/FindFirstWidgetOrThrow",
"file_path": "customerCommunication/FindFirstWidgetOrThrow.graphql",
"content": "query CustomerCommunicationFindFirstWidgetOrThrow($where: customerCommunication_WidgetWhereInput, $orderBy: [customerCommunication_WidgetOrderByWithRelationInput], $cursor: customerCommunication_WidgetWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_WidgetScalarFieldEnum], $customerCommunication_findFirstWidgetOrThrow_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findFirstWidgetOrThrow_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findFirstWidgetOrThrow_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findFirstWidgetOrThrow_interactions_take: Int, $customerCommunication_findFirstWidgetOrThrow_interactions_skip: Int, $customerCommunication_findFirstWidgetOrThrow_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_accounts_take: Int, $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_accounts_skip: Int, $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_sessions_take: Int, $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_sessions_skip: Int, $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findFirstWidgetOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id embeddedIn interactions(where: $customerCommunication_findFirstWidgetOrThrow_interactions_where, orderBy: $customerCommunication_findFirstWidgetOrThrow_interactions_orderBy, cursor: $customerCommunication_findFirstWidgetOrThrow_interactions_cursor, take: $customerCommunication_findFirstWidgetOrThrow_interactions_take, skip: $customerCommunication_findFirstWidgetOrThrow_interactions_skip, distinct: $customerCommunication_findFirstWidgetOrThrow_interactions_distinct){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_accounts_where, orderBy: $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_accounts_orderBy, cursor: $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_accounts_cursor, take: $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_accounts_take, skip: $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_accounts_skip, distinct: $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_sessions_where, orderBy: $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_sessions_orderBy, cursor: $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_sessions_cursor, take: $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_sessions_take, skip: $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_sessions_skip, distinct: $customerCommunication_findFirstWidgetOrThrow_interactions_interactions_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}} _count {interactions}}}"
},
{
"operation_name": "CustomerCommunicationFindManyAccount",
"api_mount_path": "customerCommunication/FindManyAccount",
"file_path": "customerCommunication/FindManyAccount.graphql",
"content": "query CustomerCommunicationFindManyAccount($where: customerCommunication_AccountWhereInput, $orderBy: [customerCommunication_AccountOrderByWithRelationInput], $cursor: customerCommunication_AccountWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findManyAccount_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findManyAccount_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findManyAccount_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findManyAccount_user_user_interactions_take: Int, $customerCommunication_findManyAccount_user_user_interactions_skip: Int, $customerCommunication_findManyAccount_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findManyAccount_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findManyAccount_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findManyAccount_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findManyAccount_user_user_sessions_take: Int, $customerCommunication_findManyAccount_user_user_sessions_skip: Int, $customerCommunication_findManyAccount_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findManyAccount(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findManyAccount_user_user_interactions_where, orderBy: $customerCommunication_findManyAccount_user_user_interactions_orderBy, cursor: $customerCommunication_findManyAccount_user_user_interactions_cursor, take: $customerCommunication_findManyAccount_user_user_interactions_take, skip: $customerCommunication_findManyAccount_user_user_interactions_skip, distinct: $customerCommunication_findManyAccount_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} sessions(where: $customerCommunication_findManyAccount_user_user_sessions_where, orderBy: $customerCommunication_findManyAccount_user_user_sessions_orderBy, cursor: $customerCommunication_findManyAccount_user_user_sessions_cursor, take: $customerCommunication_findManyAccount_user_user_sessions_take, skip: $customerCommunication_findManyAccount_user_user_sessions_skip, distinct: $customerCommunication_findManyAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationFindManyFilter",
"api_mount_path": "customerCommunication/FindManyFilter",
"file_path": "customerCommunication/FindManyFilter.graphql",
"content": "query CustomerCommunicationFindManyFilter($where: customerCommunication_FilterWhereInput, $orderBy: [customerCommunication_FilterOrderByWithRelationInput], $cursor: customerCommunication_FilterWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_FilterScalarFieldEnum]){customerCommunication_findManyFilter(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id audience output}}"
},
{
"operation_name": "CustomerCommunicationFindManyInteraction",
"api_mount_path": "customerCommunication/FindManyInteraction",
"file_path": "customerCommunication/FindManyInteraction.graphql",
"content": "query CustomerCommunicationFindManyInteraction($where: customerCommunication_InteractionWhereInput, $orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $cursor: customerCommunication_InteractionWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findManyInteraction_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findManyInteraction_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findManyInteraction_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findManyInteraction_user_user_accounts_take: Int, $customerCommunication_findManyInteraction_user_user_accounts_skip: Int, $customerCommunication_findManyInteraction_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findManyInteraction_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findManyInteraction_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findManyInteraction_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findManyInteraction_user_user_sessions_take: Int, $customerCommunication_findManyInteraction_user_user_sessions_skip: Int, $customerCommunication_findManyInteraction_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findManyInteraction(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_findManyInteraction_user_user_accounts_where, orderBy: $customerCommunication_findManyInteraction_user_user_accounts_orderBy, cursor: $customerCommunication_findManyInteraction_user_user_accounts_cursor, take: $customerCommunication_findManyInteraction_user_user_accounts_take, skip: $customerCommunication_findManyInteraction_user_user_accounts_skip, distinct: $customerCommunication_findManyInteraction_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findManyInteraction_user_user_sessions_where, orderBy: $customerCommunication_findManyInteraction_user_user_sessions_orderBy, cursor: $customerCommunication_findManyInteraction_user_user_sessions_cursor, take: $customerCommunication_findManyInteraction_user_user_sessions_take, skip: $customerCommunication_findManyInteraction_user_user_sessions_skip, distinct: $customerCommunication_findManyInteraction_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}} Widget {id embeddedIn _count {interactions}}}}"
},
{
"operation_name": "CustomerCommunicationFindManySession",
"api_mount_path": "customerCommunication/FindManySession",
"file_path": "customerCommunication/FindManySession.graphql",
"content": "query CustomerCommunicationFindManySession($where: customerCommunication_SessionWhereInput, $orderBy: [customerCommunication_SessionOrderByWithRelationInput], $cursor: customerCommunication_SessionWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_SessionScalarFieldEnum], $customerCommunication_findManySession_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findManySession_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findManySession_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findManySession_user_user_interactions_take: Int, $customerCommunication_findManySession_user_user_interactions_skip: Int, $customerCommunication_findManySession_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findManySession_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findManySession_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findManySession_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findManySession_user_user_accounts_take: Int, $customerCommunication_findManySession_user_user_accounts_skip: Int, $customerCommunication_findManySession_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum]){customerCommunication_findManySession(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findManySession_user_user_interactions_where, orderBy: $customerCommunication_findManySession_user_user_interactions_orderBy, cursor: $customerCommunication_findManySession_user_user_interactions_cursor, take: $customerCommunication_findManySession_user_user_interactions_take, skip: $customerCommunication_findManySession_user_user_interactions_skip, distinct: $customerCommunication_findManySession_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_findManySession_user_user_accounts_where, orderBy: $customerCommunication_findManySession_user_user_accounts_orderBy, cursor: $customerCommunication_findManySession_user_user_accounts_cursor, take: $customerCommunication_findManySession_user_user_accounts_take, skip: $customerCommunication_findManySession_user_user_accounts_skip, distinct: $customerCommunication_findManySession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationFindManyUser",
"api_mount_path": "customerCommunication/FindManyUser",
"file_path": "customerCommunication/FindManyUser.graphql",
"content": "query CustomerCommunicationFindManyUser($where: customerCommunication_UserWhereInput, $orderBy: [customerCommunication_UserOrderByWithRelationInput], $cursor: customerCommunication_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_UserScalarFieldEnum], $customerCommunication_findManyUser_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findManyUser_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findManyUser_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findManyUser_interactions_take: Int, $customerCommunication_findManyUser_interactions_skip: Int, $customerCommunication_findManyUser_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findManyUser_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findManyUser_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findManyUser_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findManyUser_accounts_take: Int, $customerCommunication_findManyUser_accounts_skip: Int, $customerCommunication_findManyUser_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findManyUser_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findManyUser_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findManyUser_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findManyUser_sessions_take: Int, $customerCommunication_findManyUser_sessions_skip: Int, $customerCommunication_findManyUser_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findManyUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findManyUser_interactions_where, orderBy: $customerCommunication_findManyUser_interactions_orderBy, cursor: $customerCommunication_findManyUser_interactions_cursor, take: $customerCommunication_findManyUser_interactions_take, skip: $customerCommunication_findManyUser_interactions_skip, distinct: $customerCommunication_findManyUser_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_findManyUser_accounts_where, orderBy: $customerCommunication_findManyUser_accounts_orderBy, cursor: $customerCommunication_findManyUser_accounts_cursor, take: $customerCommunication_findManyUser_accounts_take, skip: $customerCommunication_findManyUser_accounts_skip, distinct: $customerCommunication_findManyUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findManyUser_sessions_where, orderBy: $customerCommunication_findManyUser_sessions_orderBy, cursor: $customerCommunication_findManyUser_sessions_cursor, take: $customerCommunication_findManyUser_sessions_take, skip: $customerCommunication_findManyUser_sessions_skip, distinct: $customerCommunication_findManyUser_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}"
},
{
"operation_name": "CustomerCommunicationFindManyVerificationToken",
"api_mount_path": "customerCommunication/FindManyVerificationToken",
"file_path": "customerCommunication/FindManyVerificationToken.graphql",
"content": "query CustomerCommunicationFindManyVerificationToken($where: customerCommunication_VerificationTokenWhereInput, $orderBy: [customerCommunication_VerificationTokenOrderByWithRelationInput], $cursor: customerCommunication_VerificationTokenWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_VerificationTokenScalarFieldEnum]){customerCommunication_findManyVerificationToken(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){identifier token expires}}"
},
{
"operation_name": "CustomerCommunicationFindManyWidget",
"api_mount_path": "customerCommunication/FindManyWidget",
"file_path": "customerCommunication/FindManyWidget.graphql",
"content": "query CustomerCommunicationFindManyWidget($where: customerCommunication_WidgetWhereInput, $orderBy: [customerCommunication_WidgetOrderByWithRelationInput], $cursor: customerCommunication_WidgetWhereUniqueInput, $take: Int, $skip: Int, $distinct: [customerCommunication_WidgetScalarFieldEnum], $customerCommunication_findManyWidget_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findManyWidget_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findManyWidget_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findManyWidget_interactions_take: Int, $customerCommunication_findManyWidget_interactions_skip: Int, $customerCommunication_findManyWidget_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findManyWidget_interactions_interactions_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findManyWidget_interactions_interactions_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findManyWidget_interactions_interactions_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findManyWidget_interactions_interactions_user_user_accounts_take: Int, $customerCommunication_findManyWidget_interactions_interactions_user_user_accounts_skip: Int, $customerCommunication_findManyWidget_interactions_interactions_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findManyWidget_interactions_interactions_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findManyWidget_interactions_interactions_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findManyWidget_interactions_interactions_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findManyWidget_interactions_interactions_user_user_sessions_take: Int, $customerCommunication_findManyWidget_interactions_interactions_user_user_sessions_skip: Int, $customerCommunication_findManyWidget_interactions_interactions_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findManyWidget(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id embeddedIn interactions(where: $customerCommunication_findManyWidget_interactions_where, orderBy: $customerCommunication_findManyWidget_interactions_orderBy, cursor: $customerCommunication_findManyWidget_interactions_cursor, take: $customerCommunication_findManyWidget_interactions_take, skip: $customerCommunication_findManyWidget_interactions_skip, distinct: $customerCommunication_findManyWidget_interactions_distinct){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_findManyWidget_interactions_interactions_user_user_accounts_where, orderBy: $customerCommunication_findManyWidget_interactions_interactions_user_user_accounts_orderBy, cursor: $customerCommunication_findManyWidget_interactions_interactions_user_user_accounts_cursor, take: $customerCommunication_findManyWidget_interactions_interactions_user_user_accounts_take, skip: $customerCommunication_findManyWidget_interactions_interactions_user_user_accounts_skip, distinct: $customerCommunication_findManyWidget_interactions_interactions_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findManyWidget_interactions_interactions_user_user_sessions_where, orderBy: $customerCommunication_findManyWidget_interactions_interactions_user_user_sessions_orderBy, cursor: $customerCommunication_findManyWidget_interactions_interactions_user_user_sessions_cursor, take: $customerCommunication_findManyWidget_interactions_interactions_user_user_sessions_take, skip: $customerCommunication_findManyWidget_interactions_interactions_user_user_sessions_skip, distinct: $customerCommunication_findManyWidget_interactions_interactions_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}} _count {interactions}}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueAccount",
"api_mount_path": "customerCommunication/FindUniqueAccount",
"file_path": "customerCommunication/FindUniqueAccount.graphql",
"content": "query CustomerCommunicationFindUniqueAccount($where: customerCommunication_AccountWhereUniqueInput!, $customerCommunication_findUniqueAccount_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findUniqueAccount_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findUniqueAccount_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findUniqueAccount_user_user_interactions_take: Int, $customerCommunication_findUniqueAccount_user_user_interactions_skip: Int, $customerCommunication_findUniqueAccount_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findUniqueAccount_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findUniqueAccount_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findUniqueAccount_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findUniqueAccount_user_user_sessions_take: Int, $customerCommunication_findUniqueAccount_user_user_sessions_skip: Int, $customerCommunication_findUniqueAccount_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findUniqueAccount(where: $where){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findUniqueAccount_user_user_interactions_where, orderBy: $customerCommunication_findUniqueAccount_user_user_interactions_orderBy, cursor: $customerCommunication_findUniqueAccount_user_user_interactions_cursor, take: $customerCommunication_findUniqueAccount_user_user_interactions_take, skip: $customerCommunication_findUniqueAccount_user_user_interactions_skip, distinct: $customerCommunication_findUniqueAccount_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} sessions(where: $customerCommunication_findUniqueAccount_user_user_sessions_where, orderBy: $customerCommunication_findUniqueAccount_user_user_sessions_orderBy, cursor: $customerCommunication_findUniqueAccount_user_user_sessions_cursor, take: $customerCommunication_findUniqueAccount_user_user_sessions_take, skip: $customerCommunication_findUniqueAccount_user_user_sessions_skip, distinct: $customerCommunication_findUniqueAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueAccountOrThrow",
"api_mount_path": "customerCommunication/FindUniqueAccountOrThrow",
"file_path": "customerCommunication/FindUniqueAccountOrThrow.graphql",
"content": "query CustomerCommunicationFindUniqueAccountOrThrow($where: customerCommunication_AccountWhereUniqueInput!, $customerCommunication_findUniqueAccountOrThrow_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findUniqueAccountOrThrow_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findUniqueAccountOrThrow_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findUniqueAccountOrThrow_user_user_interactions_take: Int, $customerCommunication_findUniqueAccountOrThrow_user_user_interactions_skip: Int, $customerCommunication_findUniqueAccountOrThrow_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findUniqueAccountOrThrow_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findUniqueAccountOrThrow_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findUniqueAccountOrThrow_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findUniqueAccountOrThrow_user_user_sessions_take: Int, $customerCommunication_findUniqueAccountOrThrow_user_user_sessions_skip: Int, $customerCommunication_findUniqueAccountOrThrow_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findUniqueAccountOrThrow(where: $where){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findUniqueAccountOrThrow_user_user_interactions_where, orderBy: $customerCommunication_findUniqueAccountOrThrow_user_user_interactions_orderBy, cursor: $customerCommunication_findUniqueAccountOrThrow_user_user_interactions_cursor, take: $customerCommunication_findUniqueAccountOrThrow_user_user_interactions_take, skip: $customerCommunication_findUniqueAccountOrThrow_user_user_interactions_skip, distinct: $customerCommunication_findUniqueAccountOrThrow_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} sessions(where: $customerCommunication_findUniqueAccountOrThrow_user_user_sessions_where, orderBy: $customerCommunication_findUniqueAccountOrThrow_user_user_sessions_orderBy, cursor: $customerCommunication_findUniqueAccountOrThrow_user_user_sessions_cursor, take: $customerCommunication_findUniqueAccountOrThrow_user_user_sessions_take, skip: $customerCommunication_findUniqueAccountOrThrow_user_user_sessions_skip, distinct: $customerCommunication_findUniqueAccountOrThrow_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueFilter",
"api_mount_path": "customerCommunication/FindUniqueFilter",
"file_path": "customerCommunication/FindUniqueFilter.graphql",
"content": "query CustomerCommunicationFindUniqueFilter($where: customerCommunication_FilterWhereUniqueInput!){customerCommunication_findUniqueFilter(where: $where){id audience output}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueFilterOrThrow",
"api_mount_path": "customerCommunication/FindUniqueFilterOrThrow",
"file_path": "customerCommunication/FindUniqueFilterOrThrow.graphql",
"content": "query CustomerCommunicationFindUniqueFilterOrThrow($where: customerCommunication_FilterWhereUniqueInput!){customerCommunication_findUniqueFilterOrThrow(where: $where){id audience output}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueInteraction",
"api_mount_path": "customerCommunication/FindUniqueInteraction",
"file_path": "customerCommunication/FindUniqueInteraction.graphql",
"content": "query CustomerCommunicationFindUniqueInteraction($where: customerCommunication_InteractionWhereUniqueInput!, $customerCommunication_findUniqueInteraction_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findUniqueInteraction_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findUniqueInteraction_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findUniqueInteraction_user_user_accounts_take: Int, $customerCommunication_findUniqueInteraction_user_user_accounts_skip: Int, $customerCommunication_findUniqueInteraction_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findUniqueInteraction_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findUniqueInteraction_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findUniqueInteraction_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findUniqueInteraction_user_user_sessions_take: Int, $customerCommunication_findUniqueInteraction_user_user_sessions_skip: Int, $customerCommunication_findUniqueInteraction_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findUniqueInteraction(where: $where){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_findUniqueInteraction_user_user_accounts_where, orderBy: $customerCommunication_findUniqueInteraction_user_user_accounts_orderBy, cursor: $customerCommunication_findUniqueInteraction_user_user_accounts_cursor, take: $customerCommunication_findUniqueInteraction_user_user_accounts_take, skip: $customerCommunication_findUniqueInteraction_user_user_accounts_skip, distinct: $customerCommunication_findUniqueInteraction_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findUniqueInteraction_user_user_sessions_where, orderBy: $customerCommunication_findUniqueInteraction_user_user_sessions_orderBy, cursor: $customerCommunication_findUniqueInteraction_user_user_sessions_cursor, take: $customerCommunication_findUniqueInteraction_user_user_sessions_take, skip: $customerCommunication_findUniqueInteraction_user_user_sessions_skip, distinct: $customerCommunication_findUniqueInteraction_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}} Widget {id embeddedIn _count {interactions}}}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueInteractionOrThrow",
"api_mount_path": "customerCommunication/FindUniqueInteractionOrThrow",
"file_path": "customerCommunication/FindUniqueInteractionOrThrow.graphql",
"content": "query CustomerCommunicationFindUniqueInteractionOrThrow($where: customerCommunication_InteractionWhereUniqueInput!, $customerCommunication_findUniqueInteractionOrThrow_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findUniqueInteractionOrThrow_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findUniqueInteractionOrThrow_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findUniqueInteractionOrThrow_user_user_accounts_take: Int, $customerCommunication_findUniqueInteractionOrThrow_user_user_accounts_skip: Int, $customerCommunication_findUniqueInteractionOrThrow_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findUniqueInteractionOrThrow_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findUniqueInteractionOrThrow_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findUniqueInteractionOrThrow_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findUniqueInteractionOrThrow_user_user_sessions_take: Int, $customerCommunication_findUniqueInteractionOrThrow_user_user_sessions_skip: Int, $customerCommunication_findUniqueInteractionOrThrow_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findUniqueInteractionOrThrow(where: $where){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_findUniqueInteractionOrThrow_user_user_accounts_where, orderBy: $customerCommunication_findUniqueInteractionOrThrow_user_user_accounts_orderBy, cursor: $customerCommunication_findUniqueInteractionOrThrow_user_user_accounts_cursor, take: $customerCommunication_findUniqueInteractionOrThrow_user_user_accounts_take, skip: $customerCommunication_findUniqueInteractionOrThrow_user_user_accounts_skip, distinct: $customerCommunication_findUniqueInteractionOrThrow_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findUniqueInteractionOrThrow_user_user_sessions_where, orderBy: $customerCommunication_findUniqueInteractionOrThrow_user_user_sessions_orderBy, cursor: $customerCommunication_findUniqueInteractionOrThrow_user_user_sessions_cursor, take: $customerCommunication_findUniqueInteractionOrThrow_user_user_sessions_take, skip: $customerCommunication_findUniqueInteractionOrThrow_user_user_sessions_skip, distinct: $customerCommunication_findUniqueInteractionOrThrow_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}} Widget {id embeddedIn _count {interactions}}}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueSession",
"api_mount_path": "customerCommunication/FindUniqueSession",
"file_path": "customerCommunication/FindUniqueSession.graphql",
"content": "query CustomerCommunicationFindUniqueSession($where: customerCommunication_SessionWhereUniqueInput!, $customerCommunication_findUniqueSession_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findUniqueSession_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findUniqueSession_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findUniqueSession_user_user_interactions_take: Int, $customerCommunication_findUniqueSession_user_user_interactions_skip: Int, $customerCommunication_findUniqueSession_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findUniqueSession_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findUniqueSession_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findUniqueSession_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findUniqueSession_user_user_accounts_take: Int, $customerCommunication_findUniqueSession_user_user_accounts_skip: Int, $customerCommunication_findUniqueSession_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum]){customerCommunication_findUniqueSession(where: $where){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findUniqueSession_user_user_interactions_where, orderBy: $customerCommunication_findUniqueSession_user_user_interactions_orderBy, cursor: $customerCommunication_findUniqueSession_user_user_interactions_cursor, take: $customerCommunication_findUniqueSession_user_user_interactions_take, skip: $customerCommunication_findUniqueSession_user_user_interactions_skip, distinct: $customerCommunication_findUniqueSession_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_findUniqueSession_user_user_accounts_where, orderBy: $customerCommunication_findUniqueSession_user_user_accounts_orderBy, cursor: $customerCommunication_findUniqueSession_user_user_accounts_cursor, take: $customerCommunication_findUniqueSession_user_user_accounts_take, skip: $customerCommunication_findUniqueSession_user_user_accounts_skip, distinct: $customerCommunication_findUniqueSession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueSessionOrThrow",
"api_mount_path": "customerCommunication/FindUniqueSessionOrThrow",
"file_path": "customerCommunication/FindUniqueSessionOrThrow.graphql",
"content": "query CustomerCommunicationFindUniqueSessionOrThrow($where: customerCommunication_SessionWhereUniqueInput!, $customerCommunication_findUniqueSessionOrThrow_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findUniqueSessionOrThrow_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findUniqueSessionOrThrow_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findUniqueSessionOrThrow_user_user_interactions_take: Int, $customerCommunication_findUniqueSessionOrThrow_user_user_interactions_skip: Int, $customerCommunication_findUniqueSessionOrThrow_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findUniqueSessionOrThrow_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findUniqueSessionOrThrow_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findUniqueSessionOrThrow_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findUniqueSessionOrThrow_user_user_accounts_take: Int, $customerCommunication_findUniqueSessionOrThrow_user_user_accounts_skip: Int, $customerCommunication_findUniqueSessionOrThrow_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum]){customerCommunication_findUniqueSessionOrThrow(where: $where){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findUniqueSessionOrThrow_user_user_interactions_where, orderBy: $customerCommunication_findUniqueSessionOrThrow_user_user_interactions_orderBy, cursor: $customerCommunication_findUniqueSessionOrThrow_user_user_interactions_cursor, take: $customerCommunication_findUniqueSessionOrThrow_user_user_interactions_take, skip: $customerCommunication_findUniqueSessionOrThrow_user_user_interactions_skip, distinct: $customerCommunication_findUniqueSessionOrThrow_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_findUniqueSessionOrThrow_user_user_accounts_where, orderBy: $customerCommunication_findUniqueSessionOrThrow_user_user_accounts_orderBy, cursor: $customerCommunication_findUniqueSessionOrThrow_user_user_accounts_cursor, take: $customerCommunication_findUniqueSessionOrThrow_user_user_accounts_take, skip: $customerCommunication_findUniqueSessionOrThrow_user_user_accounts_skip, distinct: $customerCommunication_findUniqueSessionOrThrow_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueUser",
"api_mount_path": "customerCommunication/FindUniqueUser",
"file_path": "customerCommunication/FindUniqueUser.graphql",
"content": "query CustomerCommunicationFindUniqueUser($where: customerCommunication_UserWhereUniqueInput!, $customerCommunication_findUniqueUser_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findUniqueUser_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findUniqueUser_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findUniqueUser_interactions_take: Int, $customerCommunication_findUniqueUser_interactions_skip: Int, $customerCommunication_findUniqueUser_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findUniqueUser_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findUniqueUser_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findUniqueUser_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findUniqueUser_accounts_take: Int, $customerCommunication_findUniqueUser_accounts_skip: Int, $customerCommunication_findUniqueUser_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findUniqueUser_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findUniqueUser_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findUniqueUser_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findUniqueUser_sessions_take: Int, $customerCommunication_findUniqueUser_sessions_skip: Int, $customerCommunication_findUniqueUser_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findUniqueUser(where: $where){id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findUniqueUser_interactions_where, orderBy: $customerCommunication_findUniqueUser_interactions_orderBy, cursor: $customerCommunication_findUniqueUser_interactions_cursor, take: $customerCommunication_findUniqueUser_interactions_take, skip: $customerCommunication_findUniqueUser_interactions_skip, distinct: $customerCommunication_findUniqueUser_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_findUniqueUser_accounts_where, orderBy: $customerCommunication_findUniqueUser_accounts_orderBy, cursor: $customerCommunication_findUniqueUser_accounts_cursor, take: $customerCommunication_findUniqueUser_accounts_take, skip: $customerCommunication_findUniqueUser_accounts_skip, distinct: $customerCommunication_findUniqueUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findUniqueUser_sessions_where, orderBy: $customerCommunication_findUniqueUser_sessions_orderBy, cursor: $customerCommunication_findUniqueUser_sessions_cursor, take: $customerCommunication_findUniqueUser_sessions_take, skip: $customerCommunication_findUniqueUser_sessions_skip, distinct: $customerCommunication_findUniqueUser_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueUserOrThrow",
"api_mount_path": "customerCommunication/FindUniqueUserOrThrow",
"file_path": "customerCommunication/FindUniqueUserOrThrow.graphql",
"content": "query CustomerCommunicationFindUniqueUserOrThrow($where: customerCommunication_UserWhereUniqueInput!, $customerCommunication_findUniqueUserOrThrow_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findUniqueUserOrThrow_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findUniqueUserOrThrow_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findUniqueUserOrThrow_interactions_take: Int, $customerCommunication_findUniqueUserOrThrow_interactions_skip: Int, $customerCommunication_findUniqueUserOrThrow_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findUniqueUserOrThrow_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findUniqueUserOrThrow_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findUniqueUserOrThrow_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findUniqueUserOrThrow_accounts_take: Int, $customerCommunication_findUniqueUserOrThrow_accounts_skip: Int, $customerCommunication_findUniqueUserOrThrow_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findUniqueUserOrThrow_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findUniqueUserOrThrow_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findUniqueUserOrThrow_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findUniqueUserOrThrow_sessions_take: Int, $customerCommunication_findUniqueUserOrThrow_sessions_skip: Int, $customerCommunication_findUniqueUserOrThrow_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findUniqueUserOrThrow(where: $where){id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_findUniqueUserOrThrow_interactions_where, orderBy: $customerCommunication_findUniqueUserOrThrow_interactions_orderBy, cursor: $customerCommunication_findUniqueUserOrThrow_interactions_cursor, take: $customerCommunication_findUniqueUserOrThrow_interactions_take, skip: $customerCommunication_findUniqueUserOrThrow_interactions_skip, distinct: $customerCommunication_findUniqueUserOrThrow_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_findUniqueUserOrThrow_accounts_where, orderBy: $customerCommunication_findUniqueUserOrThrow_accounts_orderBy, cursor: $customerCommunication_findUniqueUserOrThrow_accounts_cursor, take: $customerCommunication_findUniqueUserOrThrow_accounts_take, skip: $customerCommunication_findUniqueUserOrThrow_accounts_skip, distinct: $customerCommunication_findUniqueUserOrThrow_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findUniqueUserOrThrow_sessions_where, orderBy: $customerCommunication_findUniqueUserOrThrow_sessions_orderBy, cursor: $customerCommunication_findUniqueUserOrThrow_sessions_cursor, take: $customerCommunication_findUniqueUserOrThrow_sessions_take, skip: $customerCommunication_findUniqueUserOrThrow_sessions_skip, distinct: $customerCommunication_findUniqueUserOrThrow_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueVerificationToken",
"api_mount_path": "customerCommunication/FindUniqueVerificationToken",
"file_path": "customerCommunication/FindUniqueVerificationToken.graphql",
"content": "query CustomerCommunicationFindUniqueVerificationToken($where: customerCommunication_VerificationTokenWhereUniqueInput!){customerCommunication_findUniqueVerificationToken(where: $where){identifier token expires}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueVerificationTokenOrThrow",
"api_mount_path": "customerCommunication/FindUniqueVerificationTokenOrThrow",
"file_path": "customerCommunication/FindUniqueVerificationTokenOrThrow.graphql",
"content": "query CustomerCommunicationFindUniqueVerificationTokenOrThrow($where: customerCommunication_VerificationTokenWhereUniqueInput!){customerCommunication_findUniqueVerificationTokenOrThrow(where: $where){identifier token expires}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueWidget",
"api_mount_path": "customerCommunication/FindUniqueWidget",
"file_path": "customerCommunication/FindUniqueWidget.graphql",
"content": "query CustomerCommunicationFindUniqueWidget($where: customerCommunication_WidgetWhereUniqueInput!, $customerCommunication_findUniqueWidget_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findUniqueWidget_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findUniqueWidget_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findUniqueWidget_interactions_take: Int, $customerCommunication_findUniqueWidget_interactions_skip: Int, $customerCommunication_findUniqueWidget_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findUniqueWidget_interactions_interactions_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findUniqueWidget_interactions_interactions_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findUniqueWidget_interactions_interactions_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findUniqueWidget_interactions_interactions_user_user_accounts_take: Int, $customerCommunication_findUniqueWidget_interactions_interactions_user_user_accounts_skip: Int, $customerCommunication_findUniqueWidget_interactions_interactions_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findUniqueWidget_interactions_interactions_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findUniqueWidget_interactions_interactions_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findUniqueWidget_interactions_interactions_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findUniqueWidget_interactions_interactions_user_user_sessions_take: Int, $customerCommunication_findUniqueWidget_interactions_interactions_user_user_sessions_skip: Int, $customerCommunication_findUniqueWidget_interactions_interactions_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findUniqueWidget(where: $where){id embeddedIn interactions(where: $customerCommunication_findUniqueWidget_interactions_where, orderBy: $customerCommunication_findUniqueWidget_interactions_orderBy, cursor: $customerCommunication_findUniqueWidget_interactions_cursor, take: $customerCommunication_findUniqueWidget_interactions_take, skip: $customerCommunication_findUniqueWidget_interactions_skip, distinct: $customerCommunication_findUniqueWidget_interactions_distinct){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_findUniqueWidget_interactions_interactions_user_user_accounts_where, orderBy: $customerCommunication_findUniqueWidget_interactions_interactions_user_user_accounts_orderBy, cursor: $customerCommunication_findUniqueWidget_interactions_interactions_user_user_accounts_cursor, take: $customerCommunication_findUniqueWidget_interactions_interactions_user_user_accounts_take, skip: $customerCommunication_findUniqueWidget_interactions_interactions_user_user_accounts_skip, distinct: $customerCommunication_findUniqueWidget_interactions_interactions_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findUniqueWidget_interactions_interactions_user_user_sessions_where, orderBy: $customerCommunication_findUniqueWidget_interactions_interactions_user_user_sessions_orderBy, cursor: $customerCommunication_findUniqueWidget_interactions_interactions_user_user_sessions_cursor, take: $customerCommunication_findUniqueWidget_interactions_interactions_user_user_sessions_take, skip: $customerCommunication_findUniqueWidget_interactions_interactions_user_user_sessions_skip, distinct: $customerCommunication_findUniqueWidget_interactions_interactions_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}} _count {interactions}}}"
},
{
"operation_name": "CustomerCommunicationFindUniqueWidgetOrThrow",
"api_mount_path": "customerCommunication/FindUniqueWidgetOrThrow",
"file_path": "customerCommunication/FindUniqueWidgetOrThrow.graphql",
"content": "query CustomerCommunicationFindUniqueWidgetOrThrow($where: customerCommunication_WidgetWhereUniqueInput!, $customerCommunication_findUniqueWidgetOrThrow_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_findUniqueWidgetOrThrow_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_findUniqueWidgetOrThrow_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_findUniqueWidgetOrThrow_interactions_take: Int, $customerCommunication_findUniqueWidgetOrThrow_interactions_skip: Int, $customerCommunication_findUniqueWidgetOrThrow_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_accounts_take: Int, $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_accounts_skip: Int, $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_sessions_take: Int, $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_sessions_skip: Int, $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_findUniqueWidgetOrThrow(where: $where){id embeddedIn interactions(where: $customerCommunication_findUniqueWidgetOrThrow_interactions_where, orderBy: $customerCommunication_findUniqueWidgetOrThrow_interactions_orderBy, cursor: $customerCommunication_findUniqueWidgetOrThrow_interactions_cursor, take: $customerCommunication_findUniqueWidgetOrThrow_interactions_take, skip: $customerCommunication_findUniqueWidgetOrThrow_interactions_skip, distinct: $customerCommunication_findUniqueWidgetOrThrow_interactions_distinct){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_accounts_where, orderBy: $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_accounts_orderBy, cursor: $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_accounts_cursor, take: $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_accounts_take, skip: $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_accounts_skip, distinct: $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_sessions_where, orderBy: $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_sessions_orderBy, cursor: $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_sessions_cursor, take: $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_sessions_take, skip: $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_sessions_skip, distinct: $customerCommunication_findUniqueWidgetOrThrow_interactions_interactions_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}} _count {interactions}}}"
},
{
"operation_name": "CustomerCommunicationGroupByAccount",
"api_mount_path": "customerCommunication/GroupByAccount",
"file_path": "customerCommunication/GroupByAccount.graphql",
"content": "query CustomerCommunicationGroupByAccount($where: customerCommunication_AccountWhereInput, $orderBy: [customerCommunication_AccountOrderByWithAggregationInput], $by: [customerCommunication_AccountScalarFieldEnum]!, $having: customerCommunication_AccountScalarWhereWithAggregatesInput, $take: Int, $skip: Int){customerCommunication_groupByAccount(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt _count {id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt _all} _avg {expires_at} _sum {expires_at} _min {id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _max {id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt}}}"
},
{
"operation_name": "CustomerCommunicationGroupByFilter",
"api_mount_path": "customerCommunication/GroupByFilter",
"file_path": "customerCommunication/GroupByFilter.graphql",
"content": "query CustomerCommunicationGroupByFilter($where: customerCommunication_FilterWhereInput, $orderBy: [customerCommunication_FilterOrderByWithAggregationInput], $by: [customerCommunication_FilterScalarFieldEnum]!, $having: customerCommunication_FilterScalarWhereWithAggregatesInput, $take: Int, $skip: Int){customerCommunication_groupByFilter(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id audience output _count {id audience output _all} _min {id audience output} _max {id audience output}}}"
},
{
"operation_name": "CustomerCommunicationGroupByInteraction",
"api_mount_path": "customerCommunication/GroupByInteraction",
"file_path": "customerCommunication/GroupByInteraction.graphql",
"content": "query CustomerCommunicationGroupByInteraction($where: customerCommunication_InteractionWhereInput, $orderBy: [customerCommunication_InteractionOrderByWithAggregationInput], $by: [customerCommunication_InteractionScalarFieldEnum]!, $having: customerCommunication_InteractionScalarWhereWithAggregatesInput, $take: Int, $skip: Int){customerCommunication_groupByInteraction(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id interactionType content timestamp userId widgetId _count {id interactionType content timestamp userId widgetId _all} _min {id interactionType content timestamp userId widgetId} _max {id interactionType content timestamp userId widgetId}}}"
},
{
"operation_name": "CustomerCommunicationGroupBySession",
"api_mount_path": "customerCommunication/GroupBySession",
"file_path": "customerCommunication/GroupBySession.graphql",
"content": "query CustomerCommunicationGroupBySession($where: customerCommunication_SessionWhereInput, $orderBy: [customerCommunication_SessionOrderByWithAggregationInput], $by: [customerCommunication_SessionScalarFieldEnum]!, $having: customerCommunication_SessionScalarWhereWithAggregatesInput, $take: Int, $skip: Int){customerCommunication_groupBySession(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id sessionToken userId expires _count {id sessionToken userId expires _all} _min {id sessionToken userId expires} _max {id sessionToken userId expires}}}"
},
{
"operation_name": "CustomerCommunicationGroupByUser",
"api_mount_path": "customerCommunication/GroupByUser",
"file_path": "customerCommunication/GroupByUser.graphql",
"content": "query CustomerCommunicationGroupByUser($where: customerCommunication_UserWhereInput, $orderBy: [customerCommunication_UserOrderByWithAggregationInput], $by: [customerCommunication_UserScalarFieldEnum]!, $having: customerCommunication_UserScalarWhereWithAggregatesInput, $take: Int, $skip: Int){customerCommunication_groupByUser(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd _count {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd _all} _min {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd} _max {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd}}}"
},
{
"operation_name": "CustomerCommunicationGroupByVerificationToken",
"api_mount_path": "customerCommunication/GroupByVerificationToken",
"file_path": "customerCommunication/GroupByVerificationToken.graphql",
"content": "query CustomerCommunicationGroupByVerificationToken($where: customerCommunication_VerificationTokenWhereInput, $orderBy: [customerCommunication_VerificationTokenOrderByWithAggregationInput], $by: [customerCommunication_VerificationTokenScalarFieldEnum]!, $having: customerCommunication_VerificationTokenScalarWhereWithAggregatesInput, $take: Int, $skip: Int){customerCommunication_groupByVerificationToken(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){identifier token expires _count {identifier token expires _all} _min {identifier token expires} _max {identifier token expires}}}"
},
{
"operation_name": "CustomerCommunicationGroupByWidget",
"api_mount_path": "customerCommunication/GroupByWidget",
"file_path": "customerCommunication/GroupByWidget.graphql",
"content": "query CustomerCommunicationGroupByWidget($where: customerCommunication_WidgetWhereInput, $orderBy: [customerCommunication_WidgetOrderByWithAggregationInput], $by: [customerCommunication_WidgetScalarFieldEnum]!, $having: customerCommunication_WidgetScalarWhereWithAggregatesInput, $take: Int, $skip: Int){customerCommunication_groupByWidget(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id embeddedIn _count {id embeddedIn _all} _min {id embeddedIn} _max {id embeddedIn}}}"
},
{
"operation_name": "CustomerCommunicationQueryRaw",
"api_mount_path": "customerCommunication/QueryRaw",
"file_path": "customerCommunication/QueryRaw.graphql",
"content": "query CustomerCommunicationQueryRaw($query: String!, $parameters: [String]){customerCommunication_queryRaw(query: $query, parameters: $parameters){ID Int Float String Boolean DateTime JSON Object {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} Array {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON OptionalObject {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalArray {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON}}}"
},
{
"operation_name": "CustomerCommunicationQueryRawJSON",
"api_mount_path": "customerCommunication/QueryRawJSON",
"file_path": "customerCommunication/QueryRawJSON.graphql",
"content": "query CustomerCommunicationQueryRawJSON($query: String!, $parameters: [String]){customerCommunication_queryRawJSON(query: $query, parameters: $parameters)}"
},
{
"operation_name": "CustomerCommunicationUpdateManyAccount",
"api_mount_path": "customerCommunication/UpdateManyAccount",
"file_path": "customerCommunication/UpdateManyAccount.graphql",
"content": "mutation CustomerCommunicationUpdateManyAccount($data: customerCommunication_AccountUpdateManyMutationInput!, $where: customerCommunication_AccountWhereInput){customerCommunication_updateManyAccount(data: $data, where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationUpdateManyFilter",
"api_mount_path": "customerCommunication/UpdateManyFilter",
"file_path": "customerCommunication/UpdateManyFilter.graphql",
"content": "mutation CustomerCommunicationUpdateManyFilter($data: customerCommunication_FilterUpdateManyMutationInput!, $where: customerCommunication_FilterWhereInput){customerCommunication_updateManyFilter(data: $data, where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationUpdateManyInteraction",
"api_mount_path": "customerCommunication/UpdateManyInteraction",
"file_path": "customerCommunication/UpdateManyInteraction.graphql",
"content": "mutation CustomerCommunicationUpdateManyInteraction($data: customerCommunication_InteractionUpdateManyMutationInput!, $where: customerCommunication_InteractionWhereInput){customerCommunication_updateManyInteraction(data: $data, where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationUpdateManySession",
"api_mount_path": "customerCommunication/UpdateManySession",
"file_path": "customerCommunication/UpdateManySession.graphql",
"content": "mutation CustomerCommunicationUpdateManySession($data: customerCommunication_SessionUpdateManyMutationInput!, $where: customerCommunication_SessionWhereInput){customerCommunication_updateManySession(data: $data, where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationUpdateManyUser",
"api_mount_path": "customerCommunication/UpdateManyUser",
"file_path": "customerCommunication/UpdateManyUser.graphql",
"content": "mutation CustomerCommunicationUpdateManyUser($data: customerCommunication_UserUpdateManyMutationInput!, $where: customerCommunication_UserWhereInput){customerCommunication_updateManyUser(data: $data, where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationUpdateManyVerificationToken",
"api_mount_path": "customerCommunication/UpdateManyVerificationToken",
"file_path": "customerCommunication/UpdateManyVerificationToken.graphql",
"content": "mutation CustomerCommunicationUpdateManyVerificationToken($data: customerCommunication_VerificationTokenUpdateManyMutationInput!, $where: customerCommunication_VerificationTokenWhereInput){customerCommunication_updateManyVerificationToken(data: $data, where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationUpdateManyWidget",
"api_mount_path": "customerCommunication/UpdateManyWidget",
"file_path": "customerCommunication/UpdateManyWidget.graphql",
"content": "mutation CustomerCommunicationUpdateManyWidget($data: customerCommunication_WidgetUpdateManyMutationInput!, $where: customerCommunication_WidgetWhereInput){customerCommunication_updateManyWidget(data: $data, where: $where){count}}"
},
{
"operation_name": "CustomerCommunicationUpdateOneAccount",
"api_mount_path": "customerCommunication/UpdateOneAccount",
"file_path": "customerCommunication/UpdateOneAccount.graphql",
"content": "mutation CustomerCommunicationUpdateOneAccount($data: customerCommunication_AccountUpdateInput!, $where: customerCommunication_AccountWhereUniqueInput!, $customerCommunication_updateOneAccount_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_updateOneAccount_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_updateOneAccount_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_updateOneAccount_user_user_interactions_take: Int, $customerCommunication_updateOneAccount_user_user_interactions_skip: Int, $customerCommunication_updateOneAccount_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_updateOneAccount_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_updateOneAccount_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_updateOneAccount_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_updateOneAccount_user_user_sessions_take: Int, $customerCommunication_updateOneAccount_user_user_sessions_skip: Int, $customerCommunication_updateOneAccount_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_updateOneAccount(data: $data, where: $where){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_updateOneAccount_user_user_interactions_where, orderBy: $customerCommunication_updateOneAccount_user_user_interactions_orderBy, cursor: $customerCommunication_updateOneAccount_user_user_interactions_cursor, take: $customerCommunication_updateOneAccount_user_user_interactions_take, skip: $customerCommunication_updateOneAccount_user_user_interactions_skip, distinct: $customerCommunication_updateOneAccount_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} sessions(where: $customerCommunication_updateOneAccount_user_user_sessions_where, orderBy: $customerCommunication_updateOneAccount_user_user_sessions_orderBy, cursor: $customerCommunication_updateOneAccount_user_user_sessions_cursor, take: $customerCommunication_updateOneAccount_user_user_sessions_take, skip: $customerCommunication_updateOneAccount_user_user_sessions_skip, distinct: $customerCommunication_updateOneAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationUpdateOneFilter",
"api_mount_path": "customerCommunication/UpdateOneFilter",
"file_path": "customerCommunication/UpdateOneFilter.graphql",
"content": "mutation CustomerCommunicationUpdateOneFilter($data: customerCommunication_FilterUpdateInput!, $where: customerCommunication_FilterWhereUniqueInput!){customerCommunication_updateOneFilter(data: $data, where: $where){id audience output}}"
},
{
"operation_name": "CustomerCommunicationUpdateOneInteraction",
"api_mount_path": "customerCommunication/UpdateOneInteraction",
"file_path": "customerCommunication/UpdateOneInteraction.graphql",
"content": "mutation CustomerCommunicationUpdateOneInteraction($data: customerCommunication_InteractionUpdateInput!, $where: customerCommunication_InteractionWhereUniqueInput!, $customerCommunication_updateOneInteraction_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_updateOneInteraction_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_updateOneInteraction_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_updateOneInteraction_user_user_accounts_take: Int, $customerCommunication_updateOneInteraction_user_user_accounts_skip: Int, $customerCommunication_updateOneInteraction_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_updateOneInteraction_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_updateOneInteraction_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_updateOneInteraction_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_updateOneInteraction_user_user_sessions_take: Int, $customerCommunication_updateOneInteraction_user_user_sessions_skip: Int, $customerCommunication_updateOneInteraction_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_updateOneInteraction(data: $data, where: $where){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_updateOneInteraction_user_user_accounts_where, orderBy: $customerCommunication_updateOneInteraction_user_user_accounts_orderBy, cursor: $customerCommunication_updateOneInteraction_user_user_accounts_cursor, take: $customerCommunication_updateOneInteraction_user_user_accounts_take, skip: $customerCommunication_updateOneInteraction_user_user_accounts_skip, distinct: $customerCommunication_updateOneInteraction_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_updateOneInteraction_user_user_sessions_where, orderBy: $customerCommunication_updateOneInteraction_user_user_sessions_orderBy, cursor: $customerCommunication_updateOneInteraction_user_user_sessions_cursor, take: $customerCommunication_updateOneInteraction_user_user_sessions_take, skip: $customerCommunication_updateOneInteraction_user_user_sessions_skip, distinct: $customerCommunication_updateOneInteraction_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}} Widget {id embeddedIn _count {interactions}}}}"
},
{
"operation_name": "CustomerCommunicationUpdateOneSession",
"api_mount_path": "customerCommunication/UpdateOneSession",
"file_path": "customerCommunication/UpdateOneSession.graphql",
"content": "mutation CustomerCommunicationUpdateOneSession($data: customerCommunication_SessionUpdateInput!, $where: customerCommunication_SessionWhereUniqueInput!, $customerCommunication_updateOneSession_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_updateOneSession_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_updateOneSession_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_updateOneSession_user_user_interactions_take: Int, $customerCommunication_updateOneSession_user_user_interactions_skip: Int, $customerCommunication_updateOneSession_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_updateOneSession_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_updateOneSession_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_updateOneSession_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_updateOneSession_user_user_accounts_take: Int, $customerCommunication_updateOneSession_user_user_accounts_skip: Int, $customerCommunication_updateOneSession_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum]){customerCommunication_updateOneSession(data: $data, where: $where){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_updateOneSession_user_user_interactions_where, orderBy: $customerCommunication_updateOneSession_user_user_interactions_orderBy, cursor: $customerCommunication_updateOneSession_user_user_interactions_cursor, take: $customerCommunication_updateOneSession_user_user_interactions_take, skip: $customerCommunication_updateOneSession_user_user_interactions_skip, distinct: $customerCommunication_updateOneSession_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_updateOneSession_user_user_accounts_where, orderBy: $customerCommunication_updateOneSession_user_user_accounts_orderBy, cursor: $customerCommunication_updateOneSession_user_user_accounts_cursor, take: $customerCommunication_updateOneSession_user_user_accounts_take, skip: $customerCommunication_updateOneSession_user_user_accounts_skip, distinct: $customerCommunication_updateOneSession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationUpdateOneUser",
"api_mount_path": "customerCommunication/UpdateOneUser",
"file_path": "customerCommunication/UpdateOneUser.graphql",
"content": "mutation CustomerCommunicationUpdateOneUser($data: customerCommunication_UserUpdateInput!, $where: customerCommunication_UserWhereUniqueInput!, $customerCommunication_updateOneUser_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_updateOneUser_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_updateOneUser_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_updateOneUser_interactions_take: Int, $customerCommunication_updateOneUser_interactions_skip: Int, $customerCommunication_updateOneUser_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_updateOneUser_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_updateOneUser_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_updateOneUser_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_updateOneUser_accounts_take: Int, $customerCommunication_updateOneUser_accounts_skip: Int, $customerCommunication_updateOneUser_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_updateOneUser_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_updateOneUser_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_updateOneUser_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_updateOneUser_sessions_take: Int, $customerCommunication_updateOneUser_sessions_skip: Int, $customerCommunication_updateOneUser_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_updateOneUser(data: $data, where: $where){id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_updateOneUser_interactions_where, orderBy: $customerCommunication_updateOneUser_interactions_orderBy, cursor: $customerCommunication_updateOneUser_interactions_cursor, take: $customerCommunication_updateOneUser_interactions_take, skip: $customerCommunication_updateOneUser_interactions_skip, distinct: $customerCommunication_updateOneUser_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_updateOneUser_accounts_where, orderBy: $customerCommunication_updateOneUser_accounts_orderBy, cursor: $customerCommunication_updateOneUser_accounts_cursor, take: $customerCommunication_updateOneUser_accounts_take, skip: $customerCommunication_updateOneUser_accounts_skip, distinct: $customerCommunication_updateOneUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_updateOneUser_sessions_where, orderBy: $customerCommunication_updateOneUser_sessions_orderBy, cursor: $customerCommunication_updateOneUser_sessions_cursor, take: $customerCommunication_updateOneUser_sessions_take, skip: $customerCommunication_updateOneUser_sessions_skip, distinct: $customerCommunication_updateOneUser_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}"
},
{
"operation_name": "CustomerCommunicationUpdateOneVerificationToken",
"api_mount_path": "customerCommunication/UpdateOneVerificationToken",
"file_path": "customerCommunication/UpdateOneVerificationToken.graphql",
"content": "mutation CustomerCommunicationUpdateOneVerificationToken($data: customerCommunication_VerificationTokenUpdateInput!, $where: customerCommunication_VerificationTokenWhereUniqueInput!){customerCommunication_updateOneVerificationToken(data: $data, where: $where){identifier token expires}}"
},
{
"operation_name": "CustomerCommunicationUpdateOneWidget",
"api_mount_path": "customerCommunication/UpdateOneWidget",
"file_path": "customerCommunication/UpdateOneWidget.graphql",
"content": "mutation CustomerCommunicationUpdateOneWidget($data: customerCommunication_WidgetUpdateInput!, $where: customerCommunication_WidgetWhereUniqueInput!, $customerCommunication_updateOneWidget_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_updateOneWidget_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_updateOneWidget_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_updateOneWidget_interactions_take: Int, $customerCommunication_updateOneWidget_interactions_skip: Int, $customerCommunication_updateOneWidget_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_updateOneWidget_interactions_interactions_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_updateOneWidget_interactions_interactions_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_updateOneWidget_interactions_interactions_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_updateOneWidget_interactions_interactions_user_user_accounts_take: Int, $customerCommunication_updateOneWidget_interactions_interactions_user_user_accounts_skip: Int, $customerCommunication_updateOneWidget_interactions_interactions_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_updateOneWidget_interactions_interactions_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_updateOneWidget_interactions_interactions_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_updateOneWidget_interactions_interactions_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_updateOneWidget_interactions_interactions_user_user_sessions_take: Int, $customerCommunication_updateOneWidget_interactions_interactions_user_user_sessions_skip: Int, $customerCommunication_updateOneWidget_interactions_interactions_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_updateOneWidget(data: $data, where: $where){id embeddedIn interactions(where: $customerCommunication_updateOneWidget_interactions_where, orderBy: $customerCommunication_updateOneWidget_interactions_orderBy, cursor: $customerCommunication_updateOneWidget_interactions_cursor, take: $customerCommunication_updateOneWidget_interactions_take, skip: $customerCommunication_updateOneWidget_interactions_skip, distinct: $customerCommunication_updateOneWidget_interactions_distinct){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_updateOneWidget_interactions_interactions_user_user_accounts_where, orderBy: $customerCommunication_updateOneWidget_interactions_interactions_user_user_accounts_orderBy, cursor: $customerCommunication_updateOneWidget_interactions_interactions_user_user_accounts_cursor, take: $customerCommunication_updateOneWidget_interactions_interactions_user_user_accounts_take, skip: $customerCommunication_updateOneWidget_interactions_interactions_user_user_accounts_skip, distinct: $customerCommunication_updateOneWidget_interactions_interactions_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_updateOneWidget_interactions_interactions_user_user_sessions_where, orderBy: $customerCommunication_updateOneWidget_interactions_interactions_user_user_sessions_orderBy, cursor: $customerCommunication_updateOneWidget_interactions_interactions_user_user_sessions_cursor, take: $customerCommunication_updateOneWidget_interactions_interactions_user_user_sessions_take, skip: $customerCommunication_updateOneWidget_interactions_interactions_user_user_sessions_skip, distinct: $customerCommunication_updateOneWidget_interactions_interactions_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}} _count {interactions}}}"
},
{
"operation_name": "CustomerCommunicationUpsertOneAccount",
"api_mount_path": "customerCommunication/UpsertOneAccount",
"file_path": "customerCommunication/UpsertOneAccount.graphql",
"content": "mutation CustomerCommunicationUpsertOneAccount($where: customerCommunication_AccountWhereUniqueInput!, $create: customerCommunication_AccountCreateInput!, $update: customerCommunication_AccountUpdateInput!, $customerCommunication_upsertOneAccount_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_upsertOneAccount_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_upsertOneAccount_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_upsertOneAccount_user_user_interactions_take: Int, $customerCommunication_upsertOneAccount_user_user_interactions_skip: Int, $customerCommunication_upsertOneAccount_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_upsertOneAccount_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_upsertOneAccount_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_upsertOneAccount_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_upsertOneAccount_user_user_sessions_take: Int, $customerCommunication_upsertOneAccount_user_user_sessions_skip: Int, $customerCommunication_upsertOneAccount_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_upsertOneAccount(where: $where, create: $create, update: $update){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_upsertOneAccount_user_user_interactions_where, orderBy: $customerCommunication_upsertOneAccount_user_user_interactions_orderBy, cursor: $customerCommunication_upsertOneAccount_user_user_interactions_cursor, take: $customerCommunication_upsertOneAccount_user_user_interactions_take, skip: $customerCommunication_upsertOneAccount_user_user_interactions_skip, distinct: $customerCommunication_upsertOneAccount_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} sessions(where: $customerCommunication_upsertOneAccount_user_user_sessions_where, orderBy: $customerCommunication_upsertOneAccount_user_user_sessions_orderBy, cursor: $customerCommunication_upsertOneAccount_user_user_sessions_cursor, take: $customerCommunication_upsertOneAccount_user_user_sessions_take, skip: $customerCommunication_upsertOneAccount_user_user_sessions_skip, distinct: $customerCommunication_upsertOneAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationUpsertOneFilter",
"api_mount_path": "customerCommunication/UpsertOneFilter",
"file_path": "customerCommunication/UpsertOneFilter.graphql",
"content": "mutation CustomerCommunicationUpsertOneFilter($where: customerCommunication_FilterWhereUniqueInput!, $create: customerCommunication_FilterCreateInput!, $update: customerCommunication_FilterUpdateInput!){customerCommunication_upsertOneFilter(where: $where, create: $create, update: $update){id audience output}}"
},
{
"operation_name": "CustomerCommunicationUpsertOneInteraction",
"api_mount_path": "customerCommunication/UpsertOneInteraction",
"file_path": "customerCommunication/UpsertOneInteraction.graphql",
"content": "mutation CustomerCommunicationUpsertOneInteraction($where: customerCommunication_InteractionWhereUniqueInput!, $create: customerCommunication_InteractionCreateInput!, $update: customerCommunication_InteractionUpdateInput!, $customerCommunication_upsertOneInteraction_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_upsertOneInteraction_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_upsertOneInteraction_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_upsertOneInteraction_user_user_accounts_take: Int, $customerCommunication_upsertOneInteraction_user_user_accounts_skip: Int, $customerCommunication_upsertOneInteraction_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_upsertOneInteraction_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_upsertOneInteraction_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_upsertOneInteraction_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_upsertOneInteraction_user_user_sessions_take: Int, $customerCommunication_upsertOneInteraction_user_user_sessions_skip: Int, $customerCommunication_upsertOneInteraction_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_upsertOneInteraction(where: $where, create: $create, update: $update){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_upsertOneInteraction_user_user_accounts_where, orderBy: $customerCommunication_upsertOneInteraction_user_user_accounts_orderBy, cursor: $customerCommunication_upsertOneInteraction_user_user_accounts_cursor, take: $customerCommunication_upsertOneInteraction_user_user_accounts_take, skip: $customerCommunication_upsertOneInteraction_user_user_accounts_skip, distinct: $customerCommunication_upsertOneInteraction_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_upsertOneInteraction_user_user_sessions_where, orderBy: $customerCommunication_upsertOneInteraction_user_user_sessions_orderBy, cursor: $customerCommunication_upsertOneInteraction_user_user_sessions_cursor, take: $customerCommunication_upsertOneInteraction_user_user_sessions_take, skip: $customerCommunication_upsertOneInteraction_user_user_sessions_skip, distinct: $customerCommunication_upsertOneInteraction_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}} Widget {id embeddedIn _count {interactions}}}}"
},
{
"operation_name": "CustomerCommunicationUpsertOneSession",
"api_mount_path": "customerCommunication/UpsertOneSession",
"file_path": "customerCommunication/UpsertOneSession.graphql",
"content": "mutation CustomerCommunicationUpsertOneSession($where: customerCommunication_SessionWhereUniqueInput!, $create: customerCommunication_SessionCreateInput!, $update: customerCommunication_SessionUpdateInput!, $customerCommunication_upsertOneSession_user_user_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_upsertOneSession_user_user_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_upsertOneSession_user_user_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_upsertOneSession_user_user_interactions_take: Int, $customerCommunication_upsertOneSession_user_user_interactions_skip: Int, $customerCommunication_upsertOneSession_user_user_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_upsertOneSession_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_upsertOneSession_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_upsertOneSession_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_upsertOneSession_user_user_accounts_take: Int, $customerCommunication_upsertOneSession_user_user_accounts_skip: Int, $customerCommunication_upsertOneSession_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum]){customerCommunication_upsertOneSession(where: $where, create: $create, update: $update){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_upsertOneSession_user_user_interactions_where, orderBy: $customerCommunication_upsertOneSession_user_user_interactions_orderBy, cursor: $customerCommunication_upsertOneSession_user_user_interactions_cursor, take: $customerCommunication_upsertOneSession_user_user_interactions_take, skip: $customerCommunication_upsertOneSession_user_user_interactions_skip, distinct: $customerCommunication_upsertOneSession_user_user_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_upsertOneSession_user_user_accounts_where, orderBy: $customerCommunication_upsertOneSession_user_user_accounts_orderBy, cursor: $customerCommunication_upsertOneSession_user_user_accounts_cursor, take: $customerCommunication_upsertOneSession_user_user_accounts_take, skip: $customerCommunication_upsertOneSession_user_user_accounts_skip, distinct: $customerCommunication_upsertOneSession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {interactions accounts sessions}}}}"
},
{
"operation_name": "CustomerCommunicationUpsertOneUser",
"api_mount_path": "customerCommunication/UpsertOneUser",
"file_path": "customerCommunication/UpsertOneUser.graphql",
"content": "mutation CustomerCommunicationUpsertOneUser($where: customerCommunication_UserWhereUniqueInput!, $create: customerCommunication_UserCreateInput!, $update: customerCommunication_UserUpdateInput!, $customerCommunication_upsertOneUser_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_upsertOneUser_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_upsertOneUser_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_upsertOneUser_interactions_take: Int, $customerCommunication_upsertOneUser_interactions_skip: Int, $customerCommunication_upsertOneUser_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_upsertOneUser_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_upsertOneUser_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_upsertOneUser_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_upsertOneUser_accounts_take: Int, $customerCommunication_upsertOneUser_accounts_skip: Int, $customerCommunication_upsertOneUser_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_upsertOneUser_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_upsertOneUser_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_upsertOneUser_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_upsertOneUser_sessions_take: Int, $customerCommunication_upsertOneUser_sessions_skip: Int, $customerCommunication_upsertOneUser_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_upsertOneUser(where: $where, create: $create, update: $update){id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd interactions(where: $customerCommunication_upsertOneUser_interactions_where, orderBy: $customerCommunication_upsertOneUser_interactions_orderBy, cursor: $customerCommunication_upsertOneUser_interactions_cursor, take: $customerCommunication_upsertOneUser_interactions_take, skip: $customerCommunication_upsertOneUser_interactions_skip, distinct: $customerCommunication_upsertOneUser_interactions_distinct){id interactionType content timestamp userId widgetId Widget {id embeddedIn _count {interactions}}} accounts(where: $customerCommunication_upsertOneUser_accounts_where, orderBy: $customerCommunication_upsertOneUser_accounts_orderBy, cursor: $customerCommunication_upsertOneUser_accounts_cursor, take: $customerCommunication_upsertOneUser_accounts_take, skip: $customerCommunication_upsertOneUser_accounts_skip, distinct: $customerCommunication_upsertOneUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_upsertOneUser_sessions_where, orderBy: $customerCommunication_upsertOneUser_sessions_orderBy, cursor: $customerCommunication_upsertOneUser_sessions_cursor, take: $customerCommunication_upsertOneUser_sessions_take, skip: $customerCommunication_upsertOneUser_sessions_skip, distinct: $customerCommunication_upsertOneUser_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}}"
},
{
"operation_name": "CustomerCommunicationUpsertOneVerificationToken",
"api_mount_path": "customerCommunication/UpsertOneVerificationToken",
"file_path": "customerCommunication/UpsertOneVerificationToken.graphql",
"content": "mutation CustomerCommunicationUpsertOneVerificationToken($where: customerCommunication_VerificationTokenWhereUniqueInput!, $create: customerCommunication_VerificationTokenCreateInput!, $update: customerCommunication_VerificationTokenUpdateInput!){customerCommunication_upsertOneVerificationToken(where: $where, create: $create, update: $update){identifier token expires}}"
},
{
"operation_name": "CustomerCommunicationUpsertOneWidget",
"api_mount_path": "customerCommunication/UpsertOneWidget",
"file_path": "customerCommunication/UpsertOneWidget.graphql",
"content": "mutation CustomerCommunicationUpsertOneWidget($where: customerCommunication_WidgetWhereUniqueInput!, $create: customerCommunication_WidgetCreateInput!, $update: customerCommunication_WidgetUpdateInput!, $customerCommunication_upsertOneWidget_interactions_where: customerCommunication_InteractionWhereInput, $customerCommunication_upsertOneWidget_interactions_orderBy: [customerCommunication_InteractionOrderByWithRelationInput], $customerCommunication_upsertOneWidget_interactions_cursor: customerCommunication_InteractionWhereUniqueInput, $customerCommunication_upsertOneWidget_interactions_take: Int, $customerCommunication_upsertOneWidget_interactions_skip: Int, $customerCommunication_upsertOneWidget_interactions_distinct: [customerCommunication_InteractionScalarFieldEnum], $customerCommunication_upsertOneWidget_interactions_interactions_user_user_accounts_where: customerCommunication_AccountWhereInput, $customerCommunication_upsertOneWidget_interactions_interactions_user_user_accounts_orderBy: [customerCommunication_AccountOrderByWithRelationInput], $customerCommunication_upsertOneWidget_interactions_interactions_user_user_accounts_cursor: customerCommunication_AccountWhereUniqueInput, $customerCommunication_upsertOneWidget_interactions_interactions_user_user_accounts_take: Int, $customerCommunication_upsertOneWidget_interactions_interactions_user_user_accounts_skip: Int, $customerCommunication_upsertOneWidget_interactions_interactions_user_user_accounts_distinct: [customerCommunication_AccountScalarFieldEnum], $customerCommunication_upsertOneWidget_interactions_interactions_user_user_sessions_where: customerCommunication_SessionWhereInput, $customerCommunication_upsertOneWidget_interactions_interactions_user_user_sessions_orderBy: [customerCommunication_SessionOrderByWithRelationInput], $customerCommunication_upsertOneWidget_interactions_interactions_user_user_sessions_cursor: customerCommunication_SessionWhereUniqueInput, $customerCommunication_upsertOneWidget_interactions_interactions_user_user_sessions_take: Int, $customerCommunication_upsertOneWidget_interactions_interactions_user_user_sessions_skip: Int, $customerCommunication_upsertOneWidget_interactions_interactions_user_user_sessions_distinct: [customerCommunication_SessionScalarFieldEnum]){customerCommunication_upsertOneWidget(where: $where, create: $create, update: $update){id embeddedIn interactions(where: $customerCommunication_upsertOneWidget_interactions_where, orderBy: $customerCommunication_upsertOneWidget_interactions_orderBy, cursor: $customerCommunication_upsertOneWidget_interactions_cursor, take: $customerCommunication_upsertOneWidget_interactions_take, skip: $customerCommunication_upsertOneWidget_interactions_skip, distinct: $customerCommunication_upsertOneWidget_interactions_distinct){id interactionType content timestamp userId widgetId user {id name email emailVerified image createdAt updatedAt userType stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $customerCommunication_upsertOneWidget_interactions_interactions_user_user_accounts_where, orderBy: $customerCommunication_upsertOneWidget_interactions_interactions_user_user_accounts_orderBy, cursor: $customerCommunication_upsertOneWidget_interactions_interactions_user_user_accounts_cursor, take: $customerCommunication_upsertOneWidget_interactions_interactions_user_user_accounts_take, skip: $customerCommunication_upsertOneWidget_interactions_interactions_user_user_accounts_skip, distinct: $customerCommunication_upsertOneWidget_interactions_interactions_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $customerCommunication_upsertOneWidget_interactions_interactions_user_user_sessions_where, orderBy: $customerCommunication_upsertOneWidget_interactions_interactions_user_user_sessions_orderBy, cursor: $customerCommunication_upsertOneWidget_interactions_interactions_user_user_sessions_cursor, take: $customerCommunication_upsertOneWidget_interactions_interactions_user_user_sessions_take, skip: $customerCommunication_upsertOneWidget_interactions_interactions_user_user_sessions_skip, distinct: $customerCommunication_upsertOneWidget_interactions_interactions_user_user_sessions_distinct){id sessionToken userId expires} _count {interactions accounts sessions}}} _count {interactions}}}"
},
{
"operation_name": "GpacAggregateAdminAction",
"api_mount_path": "gpac/AggregateAdminAction",
"file_path": "gpac/AggregateAdminAction.graphql",
"content": "query GpacAggregateAdminAction($where: gpac_AdminActionWhereInput, $orderBy: [gpac_AdminActionOrderByWithRelationInput], $cursor: gpac_AdminActionWhereUniqueInput, $take: Int, $skip: Int){gpac_aggregateAdminAction(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id actionType timestamp details userId _all} _min {id actionType timestamp userId} _max {id actionType timestamp userId}}}"
},
{
"operation_name": "GpacAggregatePolicy",
"api_mount_path": "gpac/AggregatePolicy",
"file_path": "gpac/AggregatePolicy.graphql",
"content": "query GpacAggregatePolicy($where: gpac_PolicyWhereInput, $orderBy: [gpac_PolicyOrderByWithRelationInput], $cursor: gpac_PolicyWhereUniqueInput, $take: Int, $skip: Int){gpac_aggregatePolicy(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id policyType status details userId _all} _min {id policyType status userId} _max {id policyType status userId}}}"
},
{
"operation_name": "GpacAggregateUser",
"api_mount_path": "gpac/AggregateUser",
"file_path": "gpac/AggregateUser.graphql",
"content": "query GpacAggregateUser($where: gpac_UserWhereInput, $orderBy: [gpac_UserOrderByWithRelationInput], $cursor: gpac_UserWhereUniqueInput, $take: Int, $skip: Int){gpac_aggregateUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id username password role _all} _min {id username password role} _max {id username password role}}}"
},
{
"operation_name": "GpacCreateManyAdminAction",
"api_mount_path": "gpac/CreateManyAdminAction",
"file_path": "gpac/CreateManyAdminAction.graphql",
"content": "mutation GpacCreateManyAdminAction($data: [gpac_AdminActionCreateManyInput]!, $skipDuplicates: Boolean){gpac_createManyAdminAction(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "GpacCreateManyPolicy",
"api_mount_path": "gpac/CreateManyPolicy",
"file_path": "gpac/CreateManyPolicy.graphql",
"content": "mutation GpacCreateManyPolicy($data: [gpac_PolicyCreateManyInput]!, $skipDuplicates: Boolean){gpac_createManyPolicy(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "GpacCreateManyUser",
"api_mount_path": "gpac/CreateManyUser",
"file_path": "gpac/CreateManyUser.graphql",
"content": "mutation GpacCreateManyUser($data: [gpac_UserCreateManyInput]!, $skipDuplicates: Boolean){gpac_createManyUser(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "GpacCreateOneAdminAction",
"api_mount_path": "gpac/CreateOneAdminAction",
"file_path": "gpac/CreateOneAdminAction.graphql",
"content": "mutation GpacCreateOneAdminAction($data: gpac_AdminActionCreateInput!){gpac_createOneAdminAction(data: $data){id actionType timestamp details userId}}"
},
{
"operation_name": "GpacCreateOnePolicy",
"api_mount_path": "gpac/CreateOnePolicy",
"file_path": "gpac/CreateOnePolicy.graphql",
"content": "mutation GpacCreateOnePolicy($data: gpac_PolicyCreateInput!){gpac_createOnePolicy(data: $data){id policyType status details userId}}"
},
{
"operation_name": "GpacCreateOneUser",
"api_mount_path": "gpac/CreateOneUser",
"file_path": "gpac/CreateOneUser.graphql",
"content": "mutation GpacCreateOneUser($data: gpac_UserCreateInput!){gpac_createOneUser(data: $data){id username password role}}"
},
{
"operation_name": "GpacDeleteManyAdminAction",
"api_mount_path": "gpac/DeleteManyAdminAction",
"file_path": "gpac/DeleteManyAdminAction.graphql",
"content": "mutation GpacDeleteManyAdminAction($where: gpac_AdminActionWhereInput){gpac_deleteManyAdminAction(where: $where){count}}"
},
{
"operation_name": "GpacDeleteManyPolicy",
"api_mount_path": "gpac/DeleteManyPolicy",
"file_path": "gpac/DeleteManyPolicy.graphql",
"content": "mutation GpacDeleteManyPolicy($where: gpac_PolicyWhereInput){gpac_deleteManyPolicy(where: $where){count}}"
},
{
"operation_name": "GpacDeleteManyUser",
"api_mount_path": "gpac/DeleteManyUser",
"file_path": "gpac/DeleteManyUser.graphql",
"content": "mutation GpacDeleteManyUser($where: gpac_UserWhereInput){gpac_deleteManyUser(where: $where){count}}"
},
{
"operation_name": "GpacDeleteOneAdminAction",
"api_mount_path": "gpac/DeleteOneAdminAction",
"file_path": "gpac/DeleteOneAdminAction.graphql",
"content": "mutation GpacDeleteOneAdminAction($where: gpac_AdminActionWhereUniqueInput!){gpac_deleteOneAdminAction(where: $where){id actionType timestamp details userId}}"
},
{
"operation_name": "GpacDeleteOnePolicy",
"api_mount_path": "gpac/DeleteOnePolicy",
"file_path": "gpac/DeleteOnePolicy.graphql",
"content": "mutation GpacDeleteOnePolicy($where: gpac_PolicyWhereUniqueInput!){gpac_deleteOnePolicy(where: $where){id policyType status details userId}}"
},
{
"operation_name": "GpacDeleteOneUser",
"api_mount_path": "gpac/DeleteOneUser",
"file_path": "gpac/DeleteOneUser.graphql",
"content": "mutation GpacDeleteOneUser($where: gpac_UserWhereUniqueInput!){gpac_deleteOneUser(where: $where){id username password role}}"
},
{
"operation_name": "GpacExecuteRaw",
"api_mount_path": "gpac/ExecuteRaw",
"file_path": "gpac/ExecuteRaw.graphql",
"content": "mutation GpacExecuteRaw($query: String!, $parameters: [String]){gpac_executeRaw(query: $query, parameters: $parameters)}"
},
{
"operation_name": "GpacFindFirstAdminAction",
"api_mount_path": "gpac/FindFirstAdminAction",
"file_path": "gpac/FindFirstAdminAction.graphql",
"content": "query GpacFindFirstAdminAction($where: gpac_AdminActionWhereInput, $orderBy: [gpac_AdminActionOrderByWithRelationInput], $cursor: gpac_AdminActionWhereUniqueInput, $take: Int, $skip: Int, $distinct: [gpac_AdminActionScalarFieldEnum]){gpac_findFirstAdminAction(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id actionType timestamp details userId}}"
},
{
"operation_name": "GpacFindFirstAdminActionOrThrow",
"api_mount_path": "gpac/FindFirstAdminActionOrThrow",
"file_path": "gpac/FindFirstAdminActionOrThrow.graphql",
"content": "query GpacFindFirstAdminActionOrThrow($where: gpac_AdminActionWhereInput, $orderBy: [gpac_AdminActionOrderByWithRelationInput], $cursor: gpac_AdminActionWhereUniqueInput, $take: Int, $skip: Int, $distinct: [gpac_AdminActionScalarFieldEnum]){gpac_findFirstAdminActionOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id actionType timestamp details userId}}"
},
{
"operation_name": "GpacFindFirstPolicy",
"api_mount_path": "gpac/FindFirstPolicy",
"file_path": "gpac/FindFirstPolicy.graphql",
"content": "query GpacFindFirstPolicy($where: gpac_PolicyWhereInput, $orderBy: [gpac_PolicyOrderByWithRelationInput], $cursor: gpac_PolicyWhereUniqueInput, $take: Int, $skip: Int, $distinct: [gpac_PolicyScalarFieldEnum]){gpac_findFirstPolicy(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id policyType status details userId}}"
},
{
"operation_name": "GpacFindFirstPolicyOrThrow",
"api_mount_path": "gpac/FindFirstPolicyOrThrow",
"file_path": "gpac/FindFirstPolicyOrThrow.graphql",
"content": "query GpacFindFirstPolicyOrThrow($where: gpac_PolicyWhereInput, $orderBy: [gpac_PolicyOrderByWithRelationInput], $cursor: gpac_PolicyWhereUniqueInput, $take: Int, $skip: Int, $distinct: [gpac_PolicyScalarFieldEnum]){gpac_findFirstPolicyOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id policyType status details userId}}"
},
{
"operation_name": "GpacFindFirstUser",
"api_mount_path": "gpac/FindFirstUser",
"file_path": "gpac/FindFirstUser.graphql",
"content": "query GpacFindFirstUser($where: gpac_UserWhereInput, $orderBy: [gpac_UserOrderByWithRelationInput], $cursor: gpac_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [gpac_UserScalarFieldEnum]){gpac_findFirstUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password role}}"
},
{
"operation_name": "GpacFindFirstUserOrThrow",
"api_mount_path": "gpac/FindFirstUserOrThrow",
"file_path": "gpac/FindFirstUserOrThrow.graphql",
"content": "query GpacFindFirstUserOrThrow($where: gpac_UserWhereInput, $orderBy: [gpac_UserOrderByWithRelationInput], $cursor: gpac_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [gpac_UserScalarFieldEnum]){gpac_findFirstUserOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password role}}"
},
{
"operation_name": "GpacFindManyAdminAction",
"api_mount_path": "gpac/FindManyAdminAction",
"file_path": "gpac/FindManyAdminAction.graphql",
"content": "query GpacFindManyAdminAction($where: gpac_AdminActionWhereInput, $orderBy: [gpac_AdminActionOrderByWithRelationInput], $cursor: gpac_AdminActionWhereUniqueInput, $take: Int, $skip: Int, $distinct: [gpac_AdminActionScalarFieldEnum]){gpac_findManyAdminAction(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id actionType timestamp details userId}}"
},
{
"operation_name": "GpacFindManyPolicy",
"api_mount_path": "gpac/FindManyPolicy",
"file_path": "gpac/FindManyPolicy.graphql",
"content": "query GpacFindManyPolicy($where: gpac_PolicyWhereInput, $orderBy: [gpac_PolicyOrderByWithRelationInput], $cursor: gpac_PolicyWhereUniqueInput, $take: Int, $skip: Int, $distinct: [gpac_PolicyScalarFieldEnum]){gpac_findManyPolicy(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id policyType status details userId}}"
},
{
"operation_name": "GpacFindManyUser",
"api_mount_path": "gpac/FindManyUser",
"file_path": "gpac/FindManyUser.graphql",
"content": "query GpacFindManyUser($where: gpac_UserWhereInput, $orderBy: [gpac_UserOrderByWithRelationInput], $cursor: gpac_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [gpac_UserScalarFieldEnum]){gpac_findManyUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password role}}"
},
{
"operation_name": "GpacFindUniqueAdminAction",
"api_mount_path": "gpac/FindUniqueAdminAction",
"file_path": "gpac/FindUniqueAdminAction.graphql",
"content": "query GpacFindUniqueAdminAction($where: gpac_AdminActionWhereUniqueInput!){gpac_findUniqueAdminAction(where: $where){id actionType timestamp details userId}}"
},
{
"operation_name": "GpacFindUniqueAdminActionOrThrow",
"api_mount_path": "gpac/FindUniqueAdminActionOrThrow",
"file_path": "gpac/FindUniqueAdminActionOrThrow.graphql",
"content": "query GpacFindUniqueAdminActionOrThrow($where: gpac_AdminActionWhereUniqueInput!){gpac_findUniqueAdminActionOrThrow(where: $where){id actionType timestamp details userId}}"
},
{
"operation_name": "GpacFindUniquePolicy",
"api_mount_path": "gpac/FindUniquePolicy",
"file_path": "gpac/FindUniquePolicy.graphql",
"content": "query GpacFindUniquePolicy($where: gpac_PolicyWhereUniqueInput!){gpac_findUniquePolicy(where: $where){id policyType status details userId}}"
},
{
"operation_name": "GpacFindUniquePolicyOrThrow",
"api_mount_path": "gpac/FindUniquePolicyOrThrow",
"file_path": "gpac/FindUniquePolicyOrThrow.graphql",
"content": "query GpacFindUniquePolicyOrThrow($where: gpac_PolicyWhereUniqueInput!){gpac_findUniquePolicyOrThrow(where: $where){id policyType status details userId}}"
},
{
"operation_name": "GpacFindUniqueUser",
"api_mount_path": "gpac/FindUniqueUser",
"file_path": "gpac/FindUniqueUser.graphql",
"content": "query GpacFindUniqueUser($where: gpac_UserWhereUniqueInput!){gpac_findUniqueUser(where: $where){id username password role}}"
},
{
"operation_name": "GpacFindUniqueUserOrThrow",
"api_mount_path": "gpac/FindUniqueUserOrThrow",
"file_path": "gpac/FindUniqueUserOrThrow.graphql",
"content": "query GpacFindUniqueUserOrThrow($where: gpac_UserWhereUniqueInput!){gpac_findUniqueUserOrThrow(where: $where){id username password role}}"
},
{
"operation_name": "GpacGroupByAdminAction",
"api_mount_path": "gpac/GroupByAdminAction",
"file_path": "gpac/GroupByAdminAction.graphql",
"content": "query GpacGroupByAdminAction($where: gpac_AdminActionWhereInput, $orderBy: [gpac_AdminActionOrderByWithAggregationInput], $by: [gpac_AdminActionScalarFieldEnum]!, $having: gpac_AdminActionScalarWhereWithAggregatesInput, $take: Int, $skip: Int){gpac_groupByAdminAction(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id actionType timestamp details userId _count {id actionType timestamp details userId _all} _min {id actionType timestamp userId} _max {id actionType timestamp userId}}}"
},
{
"operation_name": "GpacGroupByPolicy",
"api_mount_path": "gpac/GroupByPolicy",
"file_path": "gpac/GroupByPolicy.graphql",
"content": "query GpacGroupByPolicy($where: gpac_PolicyWhereInput, $orderBy: [gpac_PolicyOrderByWithAggregationInput], $by: [gpac_PolicyScalarFieldEnum]!, $having: gpac_PolicyScalarWhereWithAggregatesInput, $take: Int, $skip: Int){gpac_groupByPolicy(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id policyType status details userId _count {id policyType status details userId _all} _min {id policyType status userId} _max {id policyType status userId}}}"
},
{
"operation_name": "GpacGroupByUser",
"api_mount_path": "gpac/GroupByUser",
"file_path": "gpac/GroupByUser.graphql",
"content": "query GpacGroupByUser($where: gpac_UserWhereInput, $orderBy: [gpac_UserOrderByWithAggregationInput], $by: [gpac_UserScalarFieldEnum]!, $having: gpac_UserScalarWhereWithAggregatesInput, $take: Int, $skip: Int){gpac_groupByUser(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id username password role _count {id username password role _all} _min {id username password role} _max {id username password role}}}"
},
{
"operation_name": "GpacQueryRaw",
"api_mount_path": "gpac/QueryRaw",
"file_path": "gpac/QueryRaw.graphql",
"content": "query GpacQueryRaw($query: String!, $parameters: [String]){gpac_queryRaw(query: $query, parameters: $parameters){ID Int Float String Boolean DateTime JSON Object {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} Array {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON OptionalObject {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalArray {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON}}}"
},
{
"operation_name": "GpacQueryRawJSON",
"api_mount_path": "gpac/QueryRawJSON",
"file_path": "gpac/QueryRawJSON.graphql",
"content": "query GpacQueryRawJSON($query: String!, $parameters: [String]){gpac_queryRawJSON(query: $query, parameters: $parameters)}"
},
{
"operation_name": "GpacUpdateManyAdminAction",
"api_mount_path": "gpac/UpdateManyAdminAction",
"file_path": "gpac/UpdateManyAdminAction.graphql",
"content": "mutation GpacUpdateManyAdminAction($data: gpac_AdminActionUpdateManyMutationInput!, $where: gpac_AdminActionWhereInput){gpac_updateManyAdminAction(data: $data, where: $where){count}}"
},
{
"operation_name": "GpacUpdateManyPolicy",
"api_mount_path": "gpac/UpdateManyPolicy",
"file_path": "gpac/UpdateManyPolicy.graphql",
"content": "mutation GpacUpdateManyPolicy($data: gpac_PolicyUpdateManyMutationInput!, $where: gpac_PolicyWhereInput){gpac_updateManyPolicy(data: $data, where: $where){count}}"
},
{
"operation_name": "GpacUpdateManyUser",
"api_mount_path": "gpac/UpdateManyUser",
"file_path": "gpac/UpdateManyUser.graphql",
"content": "mutation GpacUpdateManyUser($data: gpac_UserUpdateManyMutationInput!, $where: gpac_UserWhereInput){gpac_updateManyUser(data: $data, where: $where){count}}"
},
{
"operation_name": "GpacUpdateOneAdminAction",
"api_mount_path": "gpac/UpdateOneAdminAction",
"file_path": "gpac/UpdateOneAdminAction.graphql",
"content": "mutation GpacUpdateOneAdminAction($data: gpac_AdminActionUpdateInput!, $where: gpac_AdminActionWhereUniqueInput!){gpac_updateOneAdminAction(data: $data, where: $where){id actionType timestamp details userId}}"
},
{
"operation_name": "GpacUpdateOnePolicy",
"api_mount_path": "gpac/UpdateOnePolicy",
"file_path": "gpac/UpdateOnePolicy.graphql",
"content": "mutation GpacUpdateOnePolicy($data: gpac_PolicyUpdateInput!, $where: gpac_PolicyWhereUniqueInput!){gpac_updateOnePolicy(data: $data, where: $where){id policyType status details userId}}"
},
{
"operation_name": "GpacUpdateOneUser",
"api_mount_path": "gpac/UpdateOneUser",
"file_path": "gpac/UpdateOneUser.graphql",
"content": "mutation GpacUpdateOneUser($data: gpac_UserUpdateInput!, $where: gpac_UserWhereUniqueInput!){gpac_updateOneUser(data: $data, where: $where){id username password role}}"
},
{
"operation_name": "GpacUpsertOneAdminAction",
"api_mount_path": "gpac/UpsertOneAdminAction",
"file_path": "gpac/UpsertOneAdminAction.graphql",
"content": "mutation GpacUpsertOneAdminAction($where: gpac_AdminActionWhereUniqueInput!, $create: gpac_AdminActionCreateInput!, $update: gpac_AdminActionUpdateInput!){gpac_upsertOneAdminAction(where: $where, create: $create, update: $update){id actionType timestamp details userId}}"
},
{
"operation_name": "GpacUpsertOnePolicy",
"api_mount_path": "gpac/UpsertOnePolicy",
"file_path": "gpac/UpsertOnePolicy.graphql",
"content": "mutation GpacUpsertOnePolicy($where: gpac_PolicyWhereUniqueInput!, $create: gpac_PolicyCreateInput!, $update: gpac_PolicyUpdateInput!){gpac_upsertOnePolicy(where: $where, create: $create, update: $update){id policyType status details userId}}"
},
{
"operation_name": "GpacUpsertOneUser",
"api_mount_path": "gpac/UpsertOneUser",
"file_path": "gpac/UpsertOneUser.graphql",
"content": "mutation GpacUpsertOneUser($where: gpac_UserWhereUniqueInput!, $create: gpac_UserCreateInput!, $update: gpac_UserUpdateInput!){gpac_upsertOneUser(where: $where, create: $create, update: $update){id username password role}}"
},
{
"operation_name": "GuardianOnlineAggregateFeature",
"api_mount_path": "guardianOnline/AggregateFeature",
"file_path": "guardianOnline/AggregateFeature.graphql",
"content": "query GuardianOnlineAggregateFeature($where: guardianOnline_FeatureWhereInput, $orderBy: [guardianOnline_FeatureOrderByWithRelationInput], $cursor: guardianOnline_FeatureWhereUniqueInput, $take: Int, $skip: Int){guardianOnline_aggregateFeature(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id featureType content userId _all} _min {id featureType userId} _max {id featureType userId}}}"
},
{
"operation_name": "GuardianOnlineAggregateUser",
"api_mount_path": "guardianOnline/AggregateUser",
"file_path": "guardianOnline/AggregateUser.graphql",
"content": "query GuardianOnlineAggregateUser($where: guardianOnline_UserWhereInput, $orderBy: [guardianOnline_UserOrderByWithRelationInput], $cursor: guardianOnline_UserWhereUniqueInput, $take: Int, $skip: Int){guardianOnline_aggregateUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id username password role _all} _min {id username password role} _max {id username password role}}}"
},
{
"operation_name": "GuardianOnlineAggregateUserLog",
"api_mount_path": "guardianOnline/AggregateUserLog",
"file_path": "guardianOnline/AggregateUserLog.graphql",
"content": "query GuardianOnlineAggregateUserLog($where: guardianOnline_UserLogWhereInput, $orderBy: [guardianOnline_UserLogOrderByWithRelationInput], $cursor: guardianOnline_UserLogWhereUniqueInput, $take: Int, $skip: Int){guardianOnline_aggregateUserLog(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id logType contentType timestamp details userId _all} _min {id logType contentType timestamp userId} _max {id logType contentType timestamp userId}}}"
},
{
"operation_name": "GuardianOnlineCreateManyFeature",
"api_mount_path": "guardianOnline/CreateManyFeature",
"file_path": "guardianOnline/CreateManyFeature.graphql",
"content": "mutation GuardianOnlineCreateManyFeature($data: [guardianOnline_FeatureCreateManyInput]!, $skipDuplicates: Boolean){guardianOnline_createManyFeature(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "GuardianOnlineCreateManyUser",
"api_mount_path": "guardianOnline/CreateManyUser",
"file_path": "guardianOnline/CreateManyUser.graphql",
"content": "mutation GuardianOnlineCreateManyUser($data: [guardianOnline_UserCreateManyInput]!, $skipDuplicates: Boolean){guardianOnline_createManyUser(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "GuardianOnlineCreateManyUserLog",
"api_mount_path": "guardianOnline/CreateManyUserLog",
"file_path": "guardianOnline/CreateManyUserLog.graphql",
"content": "mutation GuardianOnlineCreateManyUserLog($data: [guardianOnline_UserLogCreateManyInput]!, $skipDuplicates: Boolean){guardianOnline_createManyUserLog(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "GuardianOnlineCreateOneFeature",
"api_mount_path": "guardianOnline/CreateOneFeature",
"file_path": "guardianOnline/CreateOneFeature.graphql",
"content": "mutation GuardianOnlineCreateOneFeature($data: guardianOnline_FeatureCreateInput!){guardianOnline_createOneFeature(data: $data){id featureType content userId}}"
},
{
"operation_name": "GuardianOnlineCreateOneUser",
"api_mount_path": "guardianOnline/CreateOneUser",
"file_path": "guardianOnline/CreateOneUser.graphql",
"content": "mutation GuardianOnlineCreateOneUser($data: guardianOnline_UserCreateInput!){guardianOnline_createOneUser(data: $data){id username password role}}"
},
{
"operation_name": "GuardianOnlineCreateOneUserLog",
"api_mount_path": "guardianOnline/CreateOneUserLog",
"file_path": "guardianOnline/CreateOneUserLog.graphql",
"content": "mutation GuardianOnlineCreateOneUserLog($data: guardianOnline_UserLogCreateInput!){guardianOnline_createOneUserLog(data: $data){id logType contentType timestamp details userId}}"
},
{
"operation_name": "GuardianOnlineDeleteManyFeature",
"api_mount_path": "guardianOnline/DeleteManyFeature",
"file_path": "guardianOnline/DeleteManyFeature.graphql",
"content": "mutation GuardianOnlineDeleteManyFeature($where: guardianOnline_FeatureWhereInput){guardianOnline_deleteManyFeature(where: $where){count}}"
},
{
"operation_name": "GuardianOnlineDeleteManyUser",
"api_mount_path": "guardianOnline/DeleteManyUser",
"file_path": "guardianOnline/DeleteManyUser.graphql",
"content": "mutation GuardianOnlineDeleteManyUser($where: guardianOnline_UserWhereInput){guardianOnline_deleteManyUser(where: $where){count}}"
},
{
"operation_name": "GuardianOnlineDeleteManyUserLog",
"api_mount_path": "guardianOnline/DeleteManyUserLog",
"file_path": "guardianOnline/DeleteManyUserLog.graphql",
"content": "mutation GuardianOnlineDeleteManyUserLog($where: guardianOnline_UserLogWhereInput){guardianOnline_deleteManyUserLog(where: $where){count}}"
},
{
"operation_name": "GuardianOnlineDeleteOneFeature",
"api_mount_path": "guardianOnline/DeleteOneFeature",
"file_path": "guardianOnline/DeleteOneFeature.graphql",
"content": "mutation GuardianOnlineDeleteOneFeature($where: guardianOnline_FeatureWhereUniqueInput!){guardianOnline_deleteOneFeature(where: $where){id featureType content userId}}"
},
{
"operation_name": "GuardianOnlineDeleteOneUser",
"api_mount_path": "guardianOnline/DeleteOneUser",
"file_path": "guardianOnline/DeleteOneUser.graphql",
"content": "mutation GuardianOnlineDeleteOneUser($where: guardianOnline_UserWhereUniqueInput!){guardianOnline_deleteOneUser(where: $where){id username password role}}"
},
{
"operation_name": "GuardianOnlineDeleteOneUserLog",
"api_mount_path": "guardianOnline/DeleteOneUserLog",
"file_path": "guardianOnline/DeleteOneUserLog.graphql",
"content": "mutation GuardianOnlineDeleteOneUserLog($where: guardianOnline_UserLogWhereUniqueInput!){guardianOnline_deleteOneUserLog(where: $where){id logType contentType timestamp details userId}}"
},
{
"operation_name": "GuardianOnlineExecuteRaw",
"api_mount_path": "guardianOnline/ExecuteRaw",
"file_path": "guardianOnline/ExecuteRaw.graphql",
"content": "mutation GuardianOnlineExecuteRaw($query: String!, $parameters: [String]){guardianOnline_executeRaw(query: $query, parameters: $parameters)}"
},
{
"operation_name": "GuardianOnlineFindFirstFeature",
"api_mount_path": "guardianOnline/FindFirstFeature",
"file_path": "guardianOnline/FindFirstFeature.graphql",
"content": "query GuardianOnlineFindFirstFeature($where: guardianOnline_FeatureWhereInput, $orderBy: [guardianOnline_FeatureOrderByWithRelationInput], $cursor: guardianOnline_FeatureWhereUniqueInput, $take: Int, $skip: Int, $distinct: [guardianOnline_FeatureScalarFieldEnum]){guardianOnline_findFirstFeature(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id featureType content userId}}"
},
{
"operation_name": "GuardianOnlineFindFirstFeatureOrThrow",
"api_mount_path": "guardianOnline/FindFirstFeatureOrThrow",
"file_path": "guardianOnline/FindFirstFeatureOrThrow.graphql",
"content": "query GuardianOnlineFindFirstFeatureOrThrow($where: guardianOnline_FeatureWhereInput, $orderBy: [guardianOnline_FeatureOrderByWithRelationInput], $cursor: guardianOnline_FeatureWhereUniqueInput, $take: Int, $skip: Int, $distinct: [guardianOnline_FeatureScalarFieldEnum]){guardianOnline_findFirstFeatureOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id featureType content userId}}"
},
{
"operation_name": "GuardianOnlineFindFirstUser",
"api_mount_path": "guardianOnline/FindFirstUser",
"file_path": "guardianOnline/FindFirstUser.graphql",
"content": "query GuardianOnlineFindFirstUser($where: guardianOnline_UserWhereInput, $orderBy: [guardianOnline_UserOrderByWithRelationInput], $cursor: guardianOnline_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [guardianOnline_UserScalarFieldEnum]){guardianOnline_findFirstUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password role}}"
},
{
"operation_name": "GuardianOnlineFindFirstUserLog",
"api_mount_path": "guardianOnline/FindFirstUserLog",
"file_path": "guardianOnline/FindFirstUserLog.graphql",
"content": "query GuardianOnlineFindFirstUserLog($where: guardianOnline_UserLogWhereInput, $orderBy: [guardianOnline_UserLogOrderByWithRelationInput], $cursor: guardianOnline_UserLogWhereUniqueInput, $take: Int, $skip: Int, $distinct: [guardianOnline_UserLogScalarFieldEnum]){guardianOnline_findFirstUserLog(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id logType contentType timestamp details userId}}"
},
{
"operation_name": "GuardianOnlineFindFirstUserLogOrThrow",
"api_mount_path": "guardianOnline/FindFirstUserLogOrThrow",
"file_path": "guardianOnline/FindFirstUserLogOrThrow.graphql",
"content": "query GuardianOnlineFindFirstUserLogOrThrow($where: guardianOnline_UserLogWhereInput, $orderBy: [guardianOnline_UserLogOrderByWithRelationInput], $cursor: guardianOnline_UserLogWhereUniqueInput, $take: Int, $skip: Int, $distinct: [guardianOnline_UserLogScalarFieldEnum]){guardianOnline_findFirstUserLogOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id logType contentType timestamp details userId}}"
},
{
"operation_name": "GuardianOnlineFindFirstUserOrThrow",
"api_mount_path": "guardianOnline/FindFirstUserOrThrow",
"file_path": "guardianOnline/FindFirstUserOrThrow.graphql",
"content": "query GuardianOnlineFindFirstUserOrThrow($where: guardianOnline_UserWhereInput, $orderBy: [guardianOnline_UserOrderByWithRelationInput], $cursor: guardianOnline_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [guardianOnline_UserScalarFieldEnum]){guardianOnline_findFirstUserOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password role}}"
},
{
"operation_name": "GuardianOnlineFindManyFeature",
"api_mount_path": "guardianOnline/FindManyFeature",
"file_path": "guardianOnline/FindManyFeature.graphql",
"content": "query GuardianOnlineFindManyFeature($where: guardianOnline_FeatureWhereInput, $orderBy: [guardianOnline_FeatureOrderByWithRelationInput], $cursor: guardianOnline_FeatureWhereUniqueInput, $take: Int, $skip: Int, $distinct: [guardianOnline_FeatureScalarFieldEnum]){guardianOnline_findManyFeature(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id featureType content userId}}"
},
{
"operation_name": "GuardianOnlineFindManyUser",
"api_mount_path": "guardianOnline/FindManyUser",
"file_path": "guardianOnline/FindManyUser.graphql",
"content": "query GuardianOnlineFindManyUser($where: guardianOnline_UserWhereInput, $orderBy: [guardianOnline_UserOrderByWithRelationInput], $cursor: guardianOnline_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [guardianOnline_UserScalarFieldEnum]){guardianOnline_findManyUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password role}}"
},
{
"operation_name": "GuardianOnlineFindManyUserLog",
"api_mount_path": "guardianOnline/FindManyUserLog",
"file_path": "guardianOnline/FindManyUserLog.graphql",
"content": "query GuardianOnlineFindManyUserLog($where: guardianOnline_UserLogWhereInput, $orderBy: [guardianOnline_UserLogOrderByWithRelationInput], $cursor: guardianOnline_UserLogWhereUniqueInput, $take: Int, $skip: Int, $distinct: [guardianOnline_UserLogScalarFieldEnum]){guardianOnline_findManyUserLog(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id logType contentType timestamp details userId}}"
},
{
"operation_name": "GuardianOnlineFindUniqueFeature",
"api_mount_path": "guardianOnline/FindUniqueFeature",
"file_path": "guardianOnline/FindUniqueFeature.graphql",
"content": "query GuardianOnlineFindUniqueFeature($where: guardianOnline_FeatureWhereUniqueInput!){guardianOnline_findUniqueFeature(where: $where){id featureType content userId}}"
},
{
"operation_name": "GuardianOnlineFindUniqueFeatureOrThrow",
"api_mount_path": "guardianOnline/FindUniqueFeatureOrThrow",
"file_path": "guardianOnline/FindUniqueFeatureOrThrow.graphql",
"content": "query GuardianOnlineFindUniqueFeatureOrThrow($where: guardianOnline_FeatureWhereUniqueInput!){guardianOnline_findUniqueFeatureOrThrow(where: $where){id featureType content userId}}"
},
{
"operation_name": "GuardianOnlineFindUniqueUser",
"api_mount_path": "guardianOnline/FindUniqueUser",
"file_path": "guardianOnline/FindUniqueUser.graphql",
"content": "query GuardianOnlineFindUniqueUser($where: guardianOnline_UserWhereUniqueInput!){guardianOnline_findUniqueUser(where: $where){id username password role}}"
},
{
"operation_name": "GuardianOnlineFindUniqueUserLog",
"api_mount_path": "guardianOnline/FindUniqueUserLog",
"file_path": "guardianOnline/FindUniqueUserLog.graphql",
"content": "query GuardianOnlineFindUniqueUserLog($where: guardianOnline_UserLogWhereUniqueInput!){guardianOnline_findUniqueUserLog(where: $where){id logType contentType timestamp details userId}}"
},
{
"operation_name": "GuardianOnlineFindUniqueUserLogOrThrow",
"api_mount_path": "guardianOnline/FindUniqueUserLogOrThrow",
"file_path": "guardianOnline/FindUniqueUserLogOrThrow.graphql",
"content": "query GuardianOnlineFindUniqueUserLogOrThrow($where: guardianOnline_UserLogWhereUniqueInput!){guardianOnline_findUniqueUserLogOrThrow(where: $where){id logType contentType timestamp details userId}}"
},
{
"operation_name": "GuardianOnlineFindUniqueUserOrThrow",
"api_mount_path": "guardianOnline/FindUniqueUserOrThrow",
"file_path": "guardianOnline/FindUniqueUserOrThrow.graphql",
"content": "query GuardianOnlineFindUniqueUserOrThrow($where: guardianOnline_UserWhereUniqueInput!){guardianOnline_findUniqueUserOrThrow(where: $where){id username password role}}"
},
{
"operation_name": "GuardianOnlineGroupByFeature",
"api_mount_path": "guardianOnline/GroupByFeature",
"file_path": "guardianOnline/GroupByFeature.graphql",
"content": "query GuardianOnlineGroupByFeature($where: guardianOnline_FeatureWhereInput, $orderBy: [guardianOnline_FeatureOrderByWithAggregationInput], $by: [guardianOnline_FeatureScalarFieldEnum]!, $having: guardianOnline_FeatureScalarWhereWithAggregatesInput, $take: Int, $skip: Int){guardianOnline_groupByFeature(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id featureType content userId _count {id featureType content userId _all} _min {id featureType userId} _max {id featureType userId}}}"
},
{
"operation_name": "GuardianOnlineGroupByUser",
"api_mount_path": "guardianOnline/GroupByUser",
"file_path": "guardianOnline/GroupByUser.graphql",
"content": "query GuardianOnlineGroupByUser($where: guardianOnline_UserWhereInput, $orderBy: [guardianOnline_UserOrderByWithAggregationInput], $by: [guardianOnline_UserScalarFieldEnum]!, $having: guardianOnline_UserScalarWhereWithAggregatesInput, $take: Int, $skip: Int){guardianOnline_groupByUser(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id username password role _count {id username password role _all} _min {id username password role} _max {id username password role}}}"
},
{
"operation_name": "GuardianOnlineGroupByUserLog",
"api_mount_path": "guardianOnline/GroupByUserLog",
"file_path": "guardianOnline/GroupByUserLog.graphql",
"content": "query GuardianOnlineGroupByUserLog($where: guardianOnline_UserLogWhereInput, $orderBy: [guardianOnline_UserLogOrderByWithAggregationInput], $by: [guardianOnline_UserLogScalarFieldEnum]!, $having: guardianOnline_UserLogScalarWhereWithAggregatesInput, $take: Int, $skip: Int){guardianOnline_groupByUserLog(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id logType contentType timestamp details userId _count {id logType contentType timestamp details userId _all} _min {id logType contentType timestamp userId} _max {id logType contentType timestamp userId}}}"
},
{
"operation_name": "GuardianOnlineQueryRaw",
"api_mount_path": "guardianOnline/QueryRaw",
"file_path": "guardianOnline/QueryRaw.graphql",
"content": "query GuardianOnlineQueryRaw($query: String!, $parameters: [String]){guardianOnline_queryRaw(query: $query, parameters: $parameters){ID Int Float String Boolean DateTime JSON Object {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} Array {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON OptionalObject {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalArray {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON}}}"
},
{
"operation_name": "GuardianOnlineQueryRawJSON",
"api_mount_path": "guardianOnline/QueryRawJSON",
"file_path": "guardianOnline/QueryRawJSON.graphql",
"content": "query GuardianOnlineQueryRawJSON($query: String!, $parameters: [String]){guardianOnline_queryRawJSON(query: $query, parameters: $parameters)}"
},
{
"operation_name": "GuardianOnlineUpdateManyFeature",
"api_mount_path": "guardianOnline/UpdateManyFeature",
"file_path": "guardianOnline/UpdateManyFeature.graphql",
"content": "mutation GuardianOnlineUpdateManyFeature($data: guardianOnline_FeatureUpdateManyMutationInput!, $where: guardianOnline_FeatureWhereInput){guardianOnline_updateManyFeature(data: $data, where: $where){count}}"
},
{
"operation_name": "GuardianOnlineUpdateManyUser",
"api_mount_path": "guardianOnline/UpdateManyUser",
"file_path": "guardianOnline/UpdateManyUser.graphql",
"content": "mutation GuardianOnlineUpdateManyUser($data: guardianOnline_UserUpdateManyMutationInput!, $where: guardianOnline_UserWhereInput){guardianOnline_updateManyUser(data: $data, where: $where){count}}"
},
{
"operation_name": "GuardianOnlineUpdateManyUserLog",
"api_mount_path": "guardianOnline/UpdateManyUserLog",
"file_path": "guardianOnline/UpdateManyUserLog.graphql",
"content": "mutation GuardianOnlineUpdateManyUserLog($data: guardianOnline_UserLogUpdateManyMutationInput!, $where: guardianOnline_UserLogWhereInput){guardianOnline_updateManyUserLog(data: $data, where: $where){count}}"
},
{
"operation_name": "GuardianOnlineUpdateOneFeature",
"api_mount_path": "guardianOnline/UpdateOneFeature",
"file_path": "guardianOnline/UpdateOneFeature.graphql",
"content": "mutation GuardianOnlineUpdateOneFeature($data: guardianOnline_FeatureUpdateInput!, $where: guardianOnline_FeatureWhereUniqueInput!){guardianOnline_updateOneFeature(data: $data, where: $where){id featureType content userId}}"
},
{
"operation_name": "GuardianOnlineUpdateOneUser",
"api_mount_path": "guardianOnline/UpdateOneUser",
"file_path": "guardianOnline/UpdateOneUser.graphql",
"content": "mutation GuardianOnlineUpdateOneUser($data: guardianOnline_UserUpdateInput!, $where: guardianOnline_UserWhereUniqueInput!){guardianOnline_updateOneUser(data: $data, where: $where){id username password role}}"
},
{
"operation_name": "GuardianOnlineUpdateOneUserLog",
"api_mount_path": "guardianOnline/UpdateOneUserLog",
"file_path": "guardianOnline/UpdateOneUserLog.graphql",
"content": "mutation GuardianOnlineUpdateOneUserLog($data: guardianOnline_UserLogUpdateInput!, $where: guardianOnline_UserLogWhereUniqueInput!){guardianOnline_updateOneUserLog(data: $data, where: $where){id logType contentType timestamp details userId}}"
},
{
"operation_name": "GuardianOnlineUpsertOneFeature",
"api_mount_path": "guardianOnline/UpsertOneFeature",
"file_path": "guardianOnline/UpsertOneFeature.graphql",
"content": "mutation GuardianOnlineUpsertOneFeature($where: guardianOnline_FeatureWhereUniqueInput!, $create: guardianOnline_FeatureCreateInput!, $update: guardianOnline_FeatureUpdateInput!){guardianOnline_upsertOneFeature(where: $where, create: $create, update: $update){id featureType content userId}}"
},
{
"operation_name": "GuardianOnlineUpsertOneUser",
"api_mount_path": "guardianOnline/UpsertOneUser",
"file_path": "guardianOnline/UpsertOneUser.graphql",
"content": "mutation GuardianOnlineUpsertOneUser($where: guardianOnline_UserWhereUniqueInput!, $create: guardianOnline_UserCreateInput!, $update: guardianOnline_UserUpdateInput!){guardianOnline_upsertOneUser(where: $where, create: $create, update: $update){id username password role}}"
},
{
"operation_name": "GuardianOnlineUpsertOneUserLog",
"api_mount_path": "guardianOnline/UpsertOneUserLog",
"file_path": "guardianOnline/UpsertOneUserLog.graphql",
"content": "mutation GuardianOnlineUpsertOneUserLog($where: guardianOnline_UserLogWhereUniqueInput!, $create: guardianOnline_UserLogCreateInput!, $update: guardianOnline_UserLogUpdateInput!){guardianOnline_upsertOneUserLog(where: $where, create: $create, update: $update){id logType contentType timestamp details userId}}"
},
{
"operation_name": "LivingBalanceSheetAggregateAsset",
"api_mount_path": "livingBalanceSheet/AggregateAsset",
"file_path": "livingBalanceSheet/AggregateAsset.graphql",
"content": "query LivingBalanceSheetAggregateAsset($where: livingBalanceSheet_AssetWhereInput, $orderBy: [livingBalanceSheet_AssetOrderByWithRelationInput], $cursor: livingBalanceSheet_AssetWhereUniqueInput, $take: Int, $skip: Int){livingBalanceSheet_aggregateAsset(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id assetType value userId _all} _avg {value} _sum {value} _min {id assetType value userId} _max {id assetType value userId}}}"
},
{
"operation_name": "LivingBalanceSheetAggregateFinancialGoal",
"api_mount_path": "livingBalanceSheet/AggregateFinancialGoal",
"file_path": "livingBalanceSheet/AggregateFinancialGoal.graphql",
"content": "query LivingBalanceSheetAggregateFinancialGoal($where: livingBalanceSheet_FinancialGoalWhereInput, $orderBy: [livingBalanceSheet_FinancialGoalOrderByWithRelationInput], $cursor: livingBalanceSheet_FinancialGoalWhereUniqueInput, $take: Int, $skip: Int){livingBalanceSheet_aggregateFinancialGoal(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id goalType target deadline userId _all} _avg {target} _sum {target} _min {id goalType target deadline userId} _max {id goalType target deadline userId}}}"
},
{
"operation_name": "LivingBalanceSheetAggregateLiability",
"api_mount_path": "livingBalanceSheet/AggregateLiability",
"file_path": "livingBalanceSheet/AggregateLiability.graphql",
"content": "query LivingBalanceSheetAggregateLiability($where: livingBalanceSheet_LiabilityWhereInput, $orderBy: [livingBalanceSheet_LiabilityOrderByWithRelationInput], $cursor: livingBalanceSheet_LiabilityWhereUniqueInput, $take: Int, $skip: Int){livingBalanceSheet_aggregateLiability(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id liabilityType amount userId _all} _avg {amount} _sum {amount} _min {id liabilityType amount userId} _max {id liabilityType amount userId}}}"
},
{
"operation_name": "LivingBalanceSheetAggregateUser",
"api_mount_path": "livingBalanceSheet/AggregateUser",
"file_path": "livingBalanceSheet/AggregateUser.graphql",
"content": "query LivingBalanceSheetAggregateUser($where: livingBalanceSheet_UserWhereInput, $orderBy: [livingBalanceSheet_UserOrderByWithRelationInput], $cursor: livingBalanceSheet_UserWhereUniqueInput, $take: Int, $skip: Int){livingBalanceSheet_aggregateUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id username password role _all} _min {id username password role} _max {id username password role}}}"
},
{
"operation_name": "LivingBalanceSheetCreateManyAsset",
"api_mount_path": "livingBalanceSheet/CreateManyAsset",
"file_path": "livingBalanceSheet/CreateManyAsset.graphql",
"content": "mutation LivingBalanceSheetCreateManyAsset($data: [livingBalanceSheet_AssetCreateManyInput]!, $skipDuplicates: Boolean){livingBalanceSheet_createManyAsset(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "LivingBalanceSheetCreateManyFinancialGoal",
"api_mount_path": "livingBalanceSheet/CreateManyFinancialGoal",
"file_path": "livingBalanceSheet/CreateManyFinancialGoal.graphql",
"content": "mutation LivingBalanceSheetCreateManyFinancialGoal($data: [livingBalanceSheet_FinancialGoalCreateManyInput]!, $skipDuplicates: Boolean){livingBalanceSheet_createManyFinancialGoal(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "LivingBalanceSheetCreateManyLiability",
"api_mount_path": "livingBalanceSheet/CreateManyLiability",
"file_path": "livingBalanceSheet/CreateManyLiability.graphql",
"content": "mutation LivingBalanceSheetCreateManyLiability($data: [livingBalanceSheet_LiabilityCreateManyInput]!, $skipDuplicates: Boolean){livingBalanceSheet_createManyLiability(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "LivingBalanceSheetCreateManyUser",
"api_mount_path": "livingBalanceSheet/CreateManyUser",
"file_path": "livingBalanceSheet/CreateManyUser.graphql",
"content": "mutation LivingBalanceSheetCreateManyUser($data: [livingBalanceSheet_UserCreateManyInput]!, $skipDuplicates: Boolean){livingBalanceSheet_createManyUser(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "LivingBalanceSheetCreateOneAsset",
"api_mount_path": "livingBalanceSheet/CreateOneAsset",
"file_path": "livingBalanceSheet/CreateOneAsset.graphql",
"content": "mutation LivingBalanceSheetCreateOneAsset($data: livingBalanceSheet_AssetCreateInput!){livingBalanceSheet_createOneAsset(data: $data){id assetType value userId}}"
},
{
"operation_name": "LivingBalanceSheetCreateOneFinancialGoal",
"api_mount_path": "livingBalanceSheet/CreateOneFinancialGoal",
"file_path": "livingBalanceSheet/CreateOneFinancialGoal.graphql",
"content": "mutation LivingBalanceSheetCreateOneFinancialGoal($data: livingBalanceSheet_FinancialGoalCreateInput!){livingBalanceSheet_createOneFinancialGoal(data: $data){id goalType target deadline userId}}"
},
{
"operation_name": "LivingBalanceSheetCreateOneLiability",
"api_mount_path": "livingBalanceSheet/CreateOneLiability",
"file_path": "livingBalanceSheet/CreateOneLiability.graphql",
"content": "mutation LivingBalanceSheetCreateOneLiability($data: livingBalanceSheet_LiabilityCreateInput!){livingBalanceSheet_createOneLiability(data: $data){id liabilityType amount userId}}"
},
{
"operation_name": "LivingBalanceSheetCreateOneUser",
"api_mount_path": "livingBalanceSheet/CreateOneUser",
"file_path": "livingBalanceSheet/CreateOneUser.graphql",
"content": "mutation LivingBalanceSheetCreateOneUser($data: livingBalanceSheet_UserCreateInput!){livingBalanceSheet_createOneUser(data: $data){id username password role}}"
},
{
"operation_name": "LivingBalanceSheetDeleteManyAsset",
"api_mount_path": "livingBalanceSheet/DeleteManyAsset",
"file_path": "livingBalanceSheet/DeleteManyAsset.graphql",
"content": "mutation LivingBalanceSheetDeleteManyAsset($where: livingBalanceSheet_AssetWhereInput){livingBalanceSheet_deleteManyAsset(where: $where){count}}"
},
{
"operation_name": "LivingBalanceSheetDeleteManyFinancialGoal",
"api_mount_path": "livingBalanceSheet/DeleteManyFinancialGoal",
"file_path": "livingBalanceSheet/DeleteManyFinancialGoal.graphql",
"content": "mutation LivingBalanceSheetDeleteManyFinancialGoal($where: livingBalanceSheet_FinancialGoalWhereInput){livingBalanceSheet_deleteManyFinancialGoal(where: $where){count}}"
},
{
"operation_name": "LivingBalanceSheetDeleteManyLiability",
"api_mount_path": "livingBalanceSheet/DeleteManyLiability",
"file_path": "livingBalanceSheet/DeleteManyLiability.graphql",
"content": "mutation LivingBalanceSheetDeleteManyLiability($where: livingBalanceSheet_LiabilityWhereInput){livingBalanceSheet_deleteManyLiability(where: $where){count}}"
},
{
"operation_name": "LivingBalanceSheetDeleteManyUser",
"api_mount_path": "livingBalanceSheet/DeleteManyUser",
"file_path": "livingBalanceSheet/DeleteManyUser.graphql",
"content": "mutation LivingBalanceSheetDeleteManyUser($where: livingBalanceSheet_UserWhereInput){livingBalanceSheet_deleteManyUser(where: $where){count}}"
},
{
"operation_name": "LivingBalanceSheetDeleteOneAsset",
"api_mount_path": "livingBalanceSheet/DeleteOneAsset",
"file_path": "livingBalanceSheet/DeleteOneAsset.graphql",
"content": "mutation LivingBalanceSheetDeleteOneAsset($where: livingBalanceSheet_AssetWhereUniqueInput!){livingBalanceSheet_deleteOneAsset(where: $where){id assetType value userId}}"
},
{
"operation_name": "LivingBalanceSheetDeleteOneFinancialGoal",
"api_mount_path": "livingBalanceSheet/DeleteOneFinancialGoal",
"file_path": "livingBalanceSheet/DeleteOneFinancialGoal.graphql",
"content": "mutation LivingBalanceSheetDeleteOneFinancialGoal($where: livingBalanceSheet_FinancialGoalWhereUniqueInput!){livingBalanceSheet_deleteOneFinancialGoal(where: $where){id goalType target deadline userId}}"
},
{
"operation_name": "LivingBalanceSheetDeleteOneLiability",
"api_mount_path": "livingBalanceSheet/DeleteOneLiability",
"file_path": "livingBalanceSheet/DeleteOneLiability.graphql",
"content": "mutation LivingBalanceSheetDeleteOneLiability($where: livingBalanceSheet_LiabilityWhereUniqueInput!){livingBalanceSheet_deleteOneLiability(where: $where){id liabilityType amount userId}}"
},
{
"operation_name": "LivingBalanceSheetDeleteOneUser",
"api_mount_path": "livingBalanceSheet/DeleteOneUser",
"file_path": "livingBalanceSheet/DeleteOneUser.graphql",
"content": "mutation LivingBalanceSheetDeleteOneUser($where: livingBalanceSheet_UserWhereUniqueInput!){livingBalanceSheet_deleteOneUser(where: $where){id username password role}}"
},
{
"operation_name": "LivingBalanceSheetExecuteRaw",
"api_mount_path": "livingBalanceSheet/ExecuteRaw",
"file_path": "livingBalanceSheet/ExecuteRaw.graphql",
"content": "mutation LivingBalanceSheetExecuteRaw($query: String!, $parameters: [String]){livingBalanceSheet_executeRaw(query: $query, parameters: $parameters)}"
},
{
"operation_name": "LivingBalanceSheetFindFirstAsset",
"api_mount_path": "livingBalanceSheet/FindFirstAsset",
"file_path": "livingBalanceSheet/FindFirstAsset.graphql",
"content": "query LivingBalanceSheetFindFirstAsset($where: livingBalanceSheet_AssetWhereInput, $orderBy: [livingBalanceSheet_AssetOrderByWithRelationInput], $cursor: livingBalanceSheet_AssetWhereUniqueInput, $take: Int, $skip: Int, $distinct: [livingBalanceSheet_AssetScalarFieldEnum]){livingBalanceSheet_findFirstAsset(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id assetType value userId}}"
},
{
"operation_name": "LivingBalanceSheetFindFirstAssetOrThrow",
"api_mount_path": "livingBalanceSheet/FindFirstAssetOrThrow",
"file_path": "livingBalanceSheet/FindFirstAssetOrThrow.graphql",
"content": "query LivingBalanceSheetFindFirstAssetOrThrow($where: livingBalanceSheet_AssetWhereInput, $orderBy: [livingBalanceSheet_AssetOrderByWithRelationInput], $cursor: livingBalanceSheet_AssetWhereUniqueInput, $take: Int, $skip: Int, $distinct: [livingBalanceSheet_AssetScalarFieldEnum]){livingBalanceSheet_findFirstAssetOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id assetType value userId}}"
},
{
"operation_name": "LivingBalanceSheetFindFirstFinancialGoal",
"api_mount_path": "livingBalanceSheet/FindFirstFinancialGoal",
"file_path": "livingBalanceSheet/FindFirstFinancialGoal.graphql",
"content": "query LivingBalanceSheetFindFirstFinancialGoal($where: livingBalanceSheet_FinancialGoalWhereInput, $orderBy: [livingBalanceSheet_FinancialGoalOrderByWithRelationInput], $cursor: livingBalanceSheet_FinancialGoalWhereUniqueInput, $take: Int, $skip: Int, $distinct: [livingBalanceSheet_FinancialGoalScalarFieldEnum]){livingBalanceSheet_findFirstFinancialGoal(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id goalType target deadline userId}}"
},
{
"operation_name": "LivingBalanceSheetFindFirstFinancialGoalOrThrow",
"api_mount_path": "livingBalanceSheet/FindFirstFinancialGoalOrThrow",
"file_path": "livingBalanceSheet/FindFirstFinancialGoalOrThrow.graphql",
"content": "query LivingBalanceSheetFindFirstFinancialGoalOrThrow($where: livingBalanceSheet_FinancialGoalWhereInput, $orderBy: [livingBalanceSheet_FinancialGoalOrderByWithRelationInput], $cursor: livingBalanceSheet_FinancialGoalWhereUniqueInput, $take: Int, $skip: Int, $distinct: [livingBalanceSheet_FinancialGoalScalarFieldEnum]){livingBalanceSheet_findFirstFinancialGoalOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id goalType target deadline userId}}"
},
{
"operation_name": "LivingBalanceSheetFindFirstLiability",
"api_mount_path": "livingBalanceSheet/FindFirstLiability",
"file_path": "livingBalanceSheet/FindFirstLiability.graphql",
"content": "query LivingBalanceSheetFindFirstLiability($where: livingBalanceSheet_LiabilityWhereInput, $orderBy: [livingBalanceSheet_LiabilityOrderByWithRelationInput], $cursor: livingBalanceSheet_LiabilityWhereUniqueInput, $take: Int, $skip: Int, $distinct: [livingBalanceSheet_LiabilityScalarFieldEnum]){livingBalanceSheet_findFirstLiability(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id liabilityType amount userId}}"
},
{
"operation_name": "LivingBalanceSheetFindFirstLiabilityOrThrow",
"api_mount_path": "livingBalanceSheet/FindFirstLiabilityOrThrow",
"file_path": "livingBalanceSheet/FindFirstLiabilityOrThrow.graphql",
"content": "query LivingBalanceSheetFindFirstLiabilityOrThrow($where: livingBalanceSheet_LiabilityWhereInput, $orderBy: [livingBalanceSheet_LiabilityOrderByWithRelationInput], $cursor: livingBalanceSheet_LiabilityWhereUniqueInput, $take: Int, $skip: Int, $distinct: [livingBalanceSheet_LiabilityScalarFieldEnum]){livingBalanceSheet_findFirstLiabilityOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id liabilityType amount userId}}"
},
{
"operation_name": "LivingBalanceSheetFindFirstUser",
"api_mount_path": "livingBalanceSheet/FindFirstUser",
"file_path": "livingBalanceSheet/FindFirstUser.graphql",
"content": "query LivingBalanceSheetFindFirstUser($where: livingBalanceSheet_UserWhereInput, $orderBy: [livingBalanceSheet_UserOrderByWithRelationInput], $cursor: livingBalanceSheet_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [livingBalanceSheet_UserScalarFieldEnum]){livingBalanceSheet_findFirstUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password role}}"
},
{
"operation_name": "LivingBalanceSheetFindFirstUserOrThrow",
"api_mount_path": "livingBalanceSheet/FindFirstUserOrThrow",
"file_path": "livingBalanceSheet/FindFirstUserOrThrow.graphql",
"content": "query LivingBalanceSheetFindFirstUserOrThrow($where: livingBalanceSheet_UserWhereInput, $orderBy: [livingBalanceSheet_UserOrderByWithRelationInput], $cursor: livingBalanceSheet_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [livingBalanceSheet_UserScalarFieldEnum]){livingBalanceSheet_findFirstUserOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password role}}"
},
{
"operation_name": "LivingBalanceSheetFindManyAsset",
"api_mount_path": "livingBalanceSheet/FindManyAsset",
"file_path": "livingBalanceSheet/FindManyAsset.graphql",
"content": "query LivingBalanceSheetFindManyAsset($where: livingBalanceSheet_AssetWhereInput, $orderBy: [livingBalanceSheet_AssetOrderByWithRelationInput], $cursor: livingBalanceSheet_AssetWhereUniqueInput, $take: Int, $skip: Int, $distinct: [livingBalanceSheet_AssetScalarFieldEnum]){livingBalanceSheet_findManyAsset(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id assetType value userId}}"
},
{
"operation_name": "LivingBalanceSheetFindManyFinancialGoal",
"api_mount_path": "livingBalanceSheet/FindManyFinancialGoal",
"file_path": "livingBalanceSheet/FindManyFinancialGoal.graphql",
"content": "query LivingBalanceSheetFindManyFinancialGoal($where: livingBalanceSheet_FinancialGoalWhereInput, $orderBy: [livingBalanceSheet_FinancialGoalOrderByWithRelationInput], $cursor: livingBalanceSheet_FinancialGoalWhereUniqueInput, $take: Int, $skip: Int, $distinct: [livingBalanceSheet_FinancialGoalScalarFieldEnum]){livingBalanceSheet_findManyFinancialGoal(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id goalType target deadline userId}}"
},
{
"operation_name": "LivingBalanceSheetFindManyLiability",
"api_mount_path": "livingBalanceSheet/FindManyLiability",
"file_path": "livingBalanceSheet/FindManyLiability.graphql",
"content": "query LivingBalanceSheetFindManyLiability($where: livingBalanceSheet_LiabilityWhereInput, $orderBy: [livingBalanceSheet_LiabilityOrderByWithRelationInput], $cursor: livingBalanceSheet_LiabilityWhereUniqueInput, $take: Int, $skip: Int, $distinct: [livingBalanceSheet_LiabilityScalarFieldEnum]){livingBalanceSheet_findManyLiability(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id liabilityType amount userId}}"
},
{
"operation_name": "LivingBalanceSheetFindManyUser",
"api_mount_path": "livingBalanceSheet/FindManyUser",
"file_path": "livingBalanceSheet/FindManyUser.graphql",
"content": "query LivingBalanceSheetFindManyUser($where: livingBalanceSheet_UserWhereInput, $orderBy: [livingBalanceSheet_UserOrderByWithRelationInput], $cursor: livingBalanceSheet_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [livingBalanceSheet_UserScalarFieldEnum]){livingBalanceSheet_findManyUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password role}}"
},
{
"operation_name": "LivingBalanceSheetFindUniqueAsset",
"api_mount_path": "livingBalanceSheet/FindUniqueAsset",
"file_path": "livingBalanceSheet/FindUniqueAsset.graphql",
"content": "query LivingBalanceSheetFindUniqueAsset($where: livingBalanceSheet_AssetWhereUniqueInput!){livingBalanceSheet_findUniqueAsset(where: $where){id assetType value userId}}"
},
{
"operation_name": "LivingBalanceSheetFindUniqueAssetOrThrow",
"api_mount_path": "livingBalanceSheet/FindUniqueAssetOrThrow",
"file_path": "livingBalanceSheet/FindUniqueAssetOrThrow.graphql",
"content": "query LivingBalanceSheetFindUniqueAssetOrThrow($where: livingBalanceSheet_AssetWhereUniqueInput!){livingBalanceSheet_findUniqueAssetOrThrow(where: $where){id assetType value userId}}"
},
{
"operation_name": "LivingBalanceSheetFindUniqueFinancialGoal",
"api_mount_path": "livingBalanceSheet/FindUniqueFinancialGoal",
"file_path": "livingBalanceSheet/FindUniqueFinancialGoal.graphql",
"content": "query LivingBalanceSheetFindUniqueFinancialGoal($where: livingBalanceSheet_FinancialGoalWhereUniqueInput!){livingBalanceSheet_findUniqueFinancialGoal(where: $where){id goalType target deadline userId}}"
},
{
"operation_name": "LivingBalanceSheetFindUniqueFinancialGoalOrThrow",
"api_mount_path": "livingBalanceSheet/FindUniqueFinancialGoalOrThrow",
"file_path": "livingBalanceSheet/FindUniqueFinancialGoalOrThrow.graphql",
"content": "query LivingBalanceSheetFindUniqueFinancialGoalOrThrow($where: livingBalanceSheet_FinancialGoalWhereUniqueInput!){livingBalanceSheet_findUniqueFinancialGoalOrThrow(where: $where){id goalType target deadline userId}}"
},
{
"operation_name": "LivingBalanceSheetFindUniqueLiability",
"api_mount_path": "livingBalanceSheet/FindUniqueLiability",
"file_path": "livingBalanceSheet/FindUniqueLiability.graphql",
"content": "query LivingBalanceSheetFindUniqueLiability($where: livingBalanceSheet_LiabilityWhereUniqueInput!){livingBalanceSheet_findUniqueLiability(where: $where){id liabilityType amount userId}}"
},
{
"operation_name": "LivingBalanceSheetFindUniqueLiabilityOrThrow",
"api_mount_path": "livingBalanceSheet/FindUniqueLiabilityOrThrow",
"file_path": "livingBalanceSheet/FindUniqueLiabilityOrThrow.graphql",
"content": "query LivingBalanceSheetFindUniqueLiabilityOrThrow($where: livingBalanceSheet_LiabilityWhereUniqueInput!){livingBalanceSheet_findUniqueLiabilityOrThrow(where: $where){id liabilityType amount userId}}"
},
{
"operation_name": "LivingBalanceSheetFindUniqueUser",
"api_mount_path": "livingBalanceSheet/FindUniqueUser",
"file_path": "livingBalanceSheet/FindUniqueUser.graphql",
"content": "query LivingBalanceSheetFindUniqueUser($where: livingBalanceSheet_UserWhereUniqueInput!){livingBalanceSheet_findUniqueUser(where: $where){id username password role}}"
},
{
"operation_name": "LivingBalanceSheetFindUniqueUserOrThrow",
"api_mount_path": "livingBalanceSheet/FindUniqueUserOrThrow",
"file_path": "livingBalanceSheet/FindUniqueUserOrThrow.graphql",
"content": "query LivingBalanceSheetFindUniqueUserOrThrow($where: livingBalanceSheet_UserWhereUniqueInput!){livingBalanceSheet_findUniqueUserOrThrow(where: $where){id username password role}}"
},
{
"operation_name": "LivingBalanceSheetGroupByAsset",
"api_mount_path": "livingBalanceSheet/GroupByAsset",
"file_path": "livingBalanceSheet/GroupByAsset.graphql",
"content": "query LivingBalanceSheetGroupByAsset($where: livingBalanceSheet_AssetWhereInput, $orderBy: [livingBalanceSheet_AssetOrderByWithAggregationInput], $by: [livingBalanceSheet_AssetScalarFieldEnum]!, $having: livingBalanceSheet_AssetScalarWhereWithAggregatesInput, $take: Int, $skip: Int){livingBalanceSheet_groupByAsset(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id assetType value userId _count {id assetType value userId _all} _avg {value} _sum {value} _min {id assetType value userId} _max {id assetType value userId}}}"
},
{
"operation_name": "LivingBalanceSheetGroupByFinancialGoal",
"api_mount_path": "livingBalanceSheet/GroupByFinancialGoal",
"file_path": "livingBalanceSheet/GroupByFinancialGoal.graphql",
"content": "query LivingBalanceSheetGroupByFinancialGoal($where: livingBalanceSheet_FinancialGoalWhereInput, $orderBy: [livingBalanceSheet_FinancialGoalOrderByWithAggregationInput], $by: [livingBalanceSheet_FinancialGoalScalarFieldEnum]!, $having: livingBalanceSheet_FinancialGoalScalarWhereWithAggregatesInput, $take: Int, $skip: Int){livingBalanceSheet_groupByFinancialGoal(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id goalType target deadline userId _count {id goalType target deadline userId _all} _avg {target} _sum {target} _min {id goalType target deadline userId} _max {id goalType target deadline userId}}}"
},
{
"operation_name": "LivingBalanceSheetGroupByLiability",
"api_mount_path": "livingBalanceSheet/GroupByLiability",
"file_path": "livingBalanceSheet/GroupByLiability.graphql",
"content": "query LivingBalanceSheetGroupByLiability($where: livingBalanceSheet_LiabilityWhereInput, $orderBy: [livingBalanceSheet_LiabilityOrderByWithAggregationInput], $by: [livingBalanceSheet_LiabilityScalarFieldEnum]!, $having: livingBalanceSheet_LiabilityScalarWhereWithAggregatesInput, $take: Int, $skip: Int){livingBalanceSheet_groupByLiability(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id liabilityType amount userId _count {id liabilityType amount userId _all} _avg {amount} _sum {amount} _min {id liabilityType amount userId} _max {id liabilityType amount userId}}}"
},
{
"operation_name": "LivingBalanceSheetGroupByUser",
"api_mount_path": "livingBalanceSheet/GroupByUser",
"file_path": "livingBalanceSheet/GroupByUser.graphql",
"content": "query LivingBalanceSheetGroupByUser($where: livingBalanceSheet_UserWhereInput, $orderBy: [livingBalanceSheet_UserOrderByWithAggregationInput], $by: [livingBalanceSheet_UserScalarFieldEnum]!, $having: livingBalanceSheet_UserScalarWhereWithAggregatesInput, $take: Int, $skip: Int){livingBalanceSheet_groupByUser(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id username password role _count {id username password role _all} _min {id username password role} _max {id username password role}}}"
},
{
"operation_name": "LivingBalanceSheetQueryRaw",
"api_mount_path": "livingBalanceSheet/QueryRaw",
"file_path": "livingBalanceSheet/QueryRaw.graphql",
"content": "query LivingBalanceSheetQueryRaw($query: String!, $parameters: [String]){livingBalanceSheet_queryRaw(query: $query, parameters: $parameters){ID Int Float String Boolean DateTime JSON Object {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} Array {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON OptionalObject {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalArray {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON}}}"
},
{
"operation_name": "LivingBalanceSheetQueryRawJSON",
"api_mount_path": "livingBalanceSheet/QueryRawJSON",
"file_path": "livingBalanceSheet/QueryRawJSON.graphql",
"content": "query LivingBalanceSheetQueryRawJSON($query: String!, $parameters: [String]){livingBalanceSheet_queryRawJSON(query: $query, parameters: $parameters)}"
},
{
"operation_name": "LivingBalanceSheetUpdateManyAsset",
"api_mount_path": "livingBalanceSheet/UpdateManyAsset",
"file_path": "livingBalanceSheet/UpdateManyAsset.graphql",
"content": "mutation LivingBalanceSheetUpdateManyAsset($data: livingBalanceSheet_AssetUpdateManyMutationInput!, $where: livingBalanceSheet_AssetWhereInput){livingBalanceSheet_updateManyAsset(data: $data, where: $where){count}}"
},
{
"operation_name": "LivingBalanceSheetUpdateManyFinancialGoal",
"api_mount_path": "livingBalanceSheet/UpdateManyFinancialGoal",
"file_path": "livingBalanceSheet/UpdateManyFinancialGoal.graphql",
"content": "mutation LivingBalanceSheetUpdateManyFinancialGoal($data: livingBalanceSheet_FinancialGoalUpdateManyMutationInput!, $where: livingBalanceSheet_FinancialGoalWhereInput){livingBalanceSheet_updateManyFinancialGoal(data: $data, where: $where){count}}"
},
{
"operation_name": "LivingBalanceSheetUpdateManyLiability",
"api_mount_path": "livingBalanceSheet/UpdateManyLiability",
"file_path": "livingBalanceSheet/UpdateManyLiability.graphql",
"content": "mutation LivingBalanceSheetUpdateManyLiability($data: livingBalanceSheet_LiabilityUpdateManyMutationInput!, $where: livingBalanceSheet_LiabilityWhereInput){livingBalanceSheet_updateManyLiability(data: $data, where: $where){count}}"
},
{
"operation_name": "LivingBalanceSheetUpdateManyUser",
"api_mount_path": "livingBalanceSheet/UpdateManyUser",
"file_path": "livingBalanceSheet/UpdateManyUser.graphql",
"content": "mutation LivingBalanceSheetUpdateManyUser($data: livingBalanceSheet_UserUpdateManyMutationInput!, $where: livingBalanceSheet_UserWhereInput){livingBalanceSheet_updateManyUser(data: $data, where: $where){count}}"
},
{
"operation_name": "LivingBalanceSheetUpdateOneAsset",
"api_mount_path": "livingBalanceSheet/UpdateOneAsset",
"file_path": "livingBalanceSheet/UpdateOneAsset.graphql",
"content": "mutation LivingBalanceSheetUpdateOneAsset($data: livingBalanceSheet_AssetUpdateInput!, $where: livingBalanceSheet_AssetWhereUniqueInput!){livingBalanceSheet_updateOneAsset(data: $data, where: $where){id assetType value userId}}"
},
{
"operation_name": "LivingBalanceSheetUpdateOneFinancialGoal",
"api_mount_path": "livingBalanceSheet/UpdateOneFinancialGoal",
"file_path": "livingBalanceSheet/UpdateOneFinancialGoal.graphql",
"content": "mutation LivingBalanceSheetUpdateOneFinancialGoal($data: livingBalanceSheet_FinancialGoalUpdateInput!, $where: livingBalanceSheet_FinancialGoalWhereUniqueInput!){livingBalanceSheet_updateOneFinancialGoal(data: $data, where: $where){id goalType target deadline userId}}"
},
{
"operation_name": "LivingBalanceSheetUpdateOneLiability",
"api_mount_path": "livingBalanceSheet/UpdateOneLiability",
"file_path": "livingBalanceSheet/UpdateOneLiability.graphql",
"content": "mutation LivingBalanceSheetUpdateOneLiability($data: livingBalanceSheet_LiabilityUpdateInput!, $where: livingBalanceSheet_LiabilityWhereUniqueInput!){livingBalanceSheet_updateOneLiability(data: $data, where: $where){id liabilityType amount userId}}"
},
{
"operation_name": "LivingBalanceSheetUpdateOneUser",
"api_mount_path": "livingBalanceSheet/UpdateOneUser",
"file_path": "livingBalanceSheet/UpdateOneUser.graphql",
"content": "mutation LivingBalanceSheetUpdateOneUser($data: livingBalanceSheet_UserUpdateInput!, $where: livingBalanceSheet_UserWhereUniqueInput!){livingBalanceSheet_updateOneUser(data: $data, where: $where){id username password role}}"
},
{
"operation_name": "LivingBalanceSheetUpsertOneAsset",
"api_mount_path": "livingBalanceSheet/UpsertOneAsset",
"file_path": "livingBalanceSheet/UpsertOneAsset.graphql",
"content": "mutation LivingBalanceSheetUpsertOneAsset($where: livingBalanceSheet_AssetWhereUniqueInput!, $create: livingBalanceSheet_AssetCreateInput!, $update: livingBalanceSheet_AssetUpdateInput!){livingBalanceSheet_upsertOneAsset(where: $where, create: $create, update: $update){id assetType value userId}}"
},
{
"operation_name": "LivingBalanceSheetUpsertOneFinancialGoal",
"api_mount_path": "livingBalanceSheet/UpsertOneFinancialGoal",
"file_path": "livingBalanceSheet/UpsertOneFinancialGoal.graphql",
"content": "mutation LivingBalanceSheetUpsertOneFinancialGoal($where: livingBalanceSheet_FinancialGoalWhereUniqueInput!, $create: livingBalanceSheet_FinancialGoalCreateInput!, $update: livingBalanceSheet_FinancialGoalUpdateInput!){livingBalanceSheet_upsertOneFinancialGoal(where: $where, create: $create, update: $update){id goalType target deadline userId}}"
},
{
"operation_name": "LivingBalanceSheetUpsertOneLiability",
"api_mount_path": "livingBalanceSheet/UpsertOneLiability",
"file_path": "livingBalanceSheet/UpsertOneLiability.graphql",
"content": "mutation LivingBalanceSheetUpsertOneLiability($where: livingBalanceSheet_LiabilityWhereUniqueInput!, $create: livingBalanceSheet_LiabilityCreateInput!, $update: livingBalanceSheet_LiabilityUpdateInput!){livingBalanceSheet_upsertOneLiability(where: $where, create: $create, update: $update){id liabilityType amount userId}}"
},
{
"operation_name": "LivingBalanceSheetUpsertOneUser",
"api_mount_path": "livingBalanceSheet/UpsertOneUser",
"file_path": "livingBalanceSheet/UpsertOneUser.graphql",
"content": "mutation LivingBalanceSheetUpsertOneUser($where: livingBalanceSheet_UserWhereUniqueInput!, $create: livingBalanceSheet_UserCreateInput!, $update: livingBalanceSheet_UserUpdateInput!){livingBalanceSheet_upsertOneUser(where: $where, create: $create, update: $update){id username password role}}"
},
{
"operation_name": "SmartOfficeAggregateClient",
"api_mount_path": "smartOffice/AggregateClient",
"file_path": "smartOffice/AggregateClient.graphql",
"content": "query SmartOfficeAggregateClient($where: smartOffice_ClientWhereInput, $orderBy: [smartOffice_ClientOrderByWithRelationInput], $cursor: smartOffice_ClientWhereUniqueInput, $take: Int, $skip: Int){smartOffice_aggregateClient(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id name email phone userId _all} _min {id name email phone userId} _max {id name email phone userId}}}"
},
{
"operation_name": "SmartOfficeAggregateSale",
"api_mount_path": "smartOffice/AggregateSale",
"file_path": "smartOffice/AggregateSale.graphql",
"content": "query SmartOfficeAggregateSale($where: smartOffice_SaleWhereInput, $orderBy: [smartOffice_SaleOrderByWithRelationInput], $cursor: smartOffice_SaleWhereUniqueInput, $take: Int, $skip: Int){smartOffice_aggregateSale(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id saleType amount timestamp userId _all} _avg {amount} _sum {amount} _min {id saleType amount timestamp userId} _max {id saleType amount timestamp userId}}}"
},
{
"operation_name": "SmartOfficeAggregateTask",
"api_mount_path": "smartOffice/AggregateTask",
"file_path": "smartOffice/AggregateTask.graphql",
"content": "query SmartOfficeAggregateTask($where: smartOffice_TaskWhereInput, $orderBy: [smartOffice_TaskOrderByWithRelationInput], $cursor: smartOffice_TaskWhereUniqueInput, $take: Int, $skip: Int){smartOffice_aggregateTask(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id taskType status details userId _all} _min {id taskType status userId} _max {id taskType status userId}}}"
},
{
"operation_name": "SmartOfficeAggregateUser",
"api_mount_path": "smartOffice/AggregateUser",
"file_path": "smartOffice/AggregateUser.graphql",
"content": "query SmartOfficeAggregateUser($where: smartOffice_UserWhereInput, $orderBy: [smartOffice_UserOrderByWithRelationInput], $cursor: smartOffice_UserWhereUniqueInput, $take: Int, $skip: Int){smartOffice_aggregateUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id username password role _all} _min {id username password role} _max {id username password role}}}"
},
{
"operation_name": "SmartOfficeCreateManyClient",
"api_mount_path": "smartOffice/CreateManyClient",
"file_path": "smartOffice/CreateManyClient.graphql",
"content": "mutation SmartOfficeCreateManyClient($data: [smartOffice_ClientCreateManyInput]!, $skipDuplicates: Boolean){smartOffice_createManyClient(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "SmartOfficeCreateManySale",
"api_mount_path": "smartOffice/CreateManySale",
"file_path": "smartOffice/CreateManySale.graphql",
"content": "mutation SmartOfficeCreateManySale($data: [smartOffice_SaleCreateManyInput]!, $skipDuplicates: Boolean){smartOffice_createManySale(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "SmartOfficeCreateManyTask",
"api_mount_path": "smartOffice/CreateManyTask",
"file_path": "smartOffice/CreateManyTask.graphql",
"content": "mutation SmartOfficeCreateManyTask($data: [smartOffice_TaskCreateManyInput]!, $skipDuplicates: Boolean){smartOffice_createManyTask(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "SmartOfficeCreateManyUser",
"api_mount_path": "smartOffice/CreateManyUser",
"file_path": "smartOffice/CreateManyUser.graphql",
"content": "mutation SmartOfficeCreateManyUser($data: [smartOffice_UserCreateManyInput]!, $skipDuplicates: Boolean){smartOffice_createManyUser(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "SmartOfficeCreateOneClient",
"api_mount_path": "smartOffice/CreateOneClient",
"file_path": "smartOffice/CreateOneClient.graphql",
"content": "mutation SmartOfficeCreateOneClient($data: smartOffice_ClientCreateInput!){smartOffice_createOneClient(data: $data){id name email phone userId}}"
},
{
"operation_name": "SmartOfficeCreateOneSale",
"api_mount_path": "smartOffice/CreateOneSale",
"file_path": "smartOffice/CreateOneSale.graphql",
"content": "mutation SmartOfficeCreateOneSale($data: smartOffice_SaleCreateInput!){smartOffice_createOneSale(data: $data){id saleType amount timestamp userId}}"
},
{
"operation_name": "SmartOfficeCreateOneTask",
"api_mount_path": "smartOffice/CreateOneTask",
"file_path": "smartOffice/CreateOneTask.graphql",
"content": "mutation SmartOfficeCreateOneTask($data: smartOffice_TaskCreateInput!){smartOffice_createOneTask(data: $data){id taskType status details userId}}"
},
{
"operation_name": "SmartOfficeCreateOneUser",
"api_mount_path": "smartOffice/CreateOneUser",
"file_path": "smartOffice/CreateOneUser.graphql",
"content": "mutation SmartOfficeCreateOneUser($data: smartOffice_UserCreateInput!){smartOffice_createOneUser(data: $data){id username password role}}"
},
{
"operation_name": "SmartOfficeDeleteManyClient",
"api_mount_path": "smartOffice/DeleteManyClient",
"file_path": "smartOffice/DeleteManyClient.graphql",
"content": "mutation SmartOfficeDeleteManyClient($where: smartOffice_ClientWhereInput){smartOffice_deleteManyClient(where: $where){count}}"
},
{
"operation_name": "SmartOfficeDeleteManySale",
"api_mount_path": "smartOffice/DeleteManySale",
"file_path": "smartOffice/DeleteManySale.graphql",
"content": "mutation SmartOfficeDeleteManySale($where: smartOffice_SaleWhereInput){smartOffice_deleteManySale(where: $where){count}}"
},
{
"operation_name": "SmartOfficeDeleteManyTask",
"api_mount_path": "smartOffice/DeleteManyTask",
"file_path": "smartOffice/DeleteManyTask.graphql",
"content": "mutation SmartOfficeDeleteManyTask($where: smartOffice_TaskWhereInput){smartOffice_deleteManyTask(where: $where){count}}"
},
{
"operation_name": "SmartOfficeDeleteManyUser",
"api_mount_path": "smartOffice/DeleteManyUser",
"file_path": "smartOffice/DeleteManyUser.graphql",
"content": "mutation SmartOfficeDeleteManyUser($where: smartOffice_UserWhereInput){smartOffice_deleteManyUser(where: $where){count}}"
},
{
"operation_name": "SmartOfficeDeleteOneClient",
"api_mount_path": "smartOffice/DeleteOneClient",
"file_path": "smartOffice/DeleteOneClient.graphql",
"content": "mutation SmartOfficeDeleteOneClient($where: smartOffice_ClientWhereUniqueInput!){smartOffice_deleteOneClient(where: $where){id name email phone userId}}"
},
{
"operation_name": "SmartOfficeDeleteOneSale",
"api_mount_path": "smartOffice/DeleteOneSale",
"file_path": "smartOffice/DeleteOneSale.graphql",
"content": "mutation SmartOfficeDeleteOneSale($where: smartOffice_SaleWhereUniqueInput!){smartOffice_deleteOneSale(where: $where){id saleType amount timestamp userId}}"
},
{
"operation_name": "SmartOfficeDeleteOneTask",
"api_mount_path": "smartOffice/DeleteOneTask",
"file_path": "smartOffice/DeleteOneTask.graphql",
"content": "mutation SmartOfficeDeleteOneTask($where: smartOffice_TaskWhereUniqueInput!){smartOffice_deleteOneTask(where: $where){id taskType status details userId}}"
},
{
"operation_name": "SmartOfficeDeleteOneUser",
"api_mount_path": "smartOffice/DeleteOneUser",
"file_path": "smartOffice/DeleteOneUser.graphql",
"content": "mutation SmartOfficeDeleteOneUser($where: smartOffice_UserWhereUniqueInput!){smartOffice_deleteOneUser(where: $where){id username password role}}"
},
{
"operation_name": "SmartOfficeExecuteRaw",
"api_mount_path": "smartOffice/ExecuteRaw",
"file_path": "smartOffice/ExecuteRaw.graphql",
"content": "mutation SmartOfficeExecuteRaw($query: String!, $parameters: [String]){smartOffice_executeRaw(query: $query, parameters: $parameters)}"
},
{
"operation_name": "SmartOfficeFindFirstClient",
"api_mount_path": "smartOffice/FindFirstClient",
"file_path": "smartOffice/FindFirstClient.graphql",
"content": "query SmartOfficeFindFirstClient($where: smartOffice_ClientWhereInput, $orderBy: [smartOffice_ClientOrderByWithRelationInput], $cursor: smartOffice_ClientWhereUniqueInput, $take: Int, $skip: Int, $distinct: [smartOffice_ClientScalarFieldEnum]){smartOffice_findFirstClient(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id name email phone userId}}"
},
{
"operation_name": "SmartOfficeFindFirstClientOrThrow",
"api_mount_path": "smartOffice/FindFirstClientOrThrow",
"file_path": "smartOffice/FindFirstClientOrThrow.graphql",
"content": "query SmartOfficeFindFirstClientOrThrow($where: smartOffice_ClientWhereInput, $orderBy: [smartOffice_ClientOrderByWithRelationInput], $cursor: smartOffice_ClientWhereUniqueInput, $take: Int, $skip: Int, $distinct: [smartOffice_ClientScalarFieldEnum]){smartOffice_findFirstClientOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id name email phone userId}}"
},
{
"operation_name": "SmartOfficeFindFirstSale",
"api_mount_path": "smartOffice/FindFirstSale",
"file_path": "smartOffice/FindFirstSale.graphql",
"content": "query SmartOfficeFindFirstSale($where: smartOffice_SaleWhereInput, $orderBy: [smartOffice_SaleOrderByWithRelationInput], $cursor: smartOffice_SaleWhereUniqueInput, $take: Int, $skip: Int, $distinct: [smartOffice_SaleScalarFieldEnum]){smartOffice_findFirstSale(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id saleType amount timestamp userId}}"
},
{
"operation_name": "SmartOfficeFindFirstSaleOrThrow",
"api_mount_path": "smartOffice/FindFirstSaleOrThrow",
"file_path": "smartOffice/FindFirstSaleOrThrow.graphql",
"content": "query SmartOfficeFindFirstSaleOrThrow($where: smartOffice_SaleWhereInput, $orderBy: [smartOffice_SaleOrderByWithRelationInput], $cursor: smartOffice_SaleWhereUniqueInput, $take: Int, $skip: Int, $distinct: [smartOffice_SaleScalarFieldEnum]){smartOffice_findFirstSaleOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id saleType amount timestamp userId}}"
},
{
"operation_name": "SmartOfficeFindFirstTask",
"api_mount_path": "smartOffice/FindFirstTask",
"file_path": "smartOffice/FindFirstTask.graphql",
"content": "query SmartOfficeFindFirstTask($where: smartOffice_TaskWhereInput, $orderBy: [smartOffice_TaskOrderByWithRelationInput], $cursor: smartOffice_TaskWhereUniqueInput, $take: Int, $skip: Int, $distinct: [smartOffice_TaskScalarFieldEnum]){smartOffice_findFirstTask(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id taskType status details userId}}"
},
{
"operation_name": "SmartOfficeFindFirstTaskOrThrow",
"api_mount_path": "smartOffice/FindFirstTaskOrThrow",
"file_path": "smartOffice/FindFirstTaskOrThrow.graphql",
"content": "query SmartOfficeFindFirstTaskOrThrow($where: smartOffice_TaskWhereInput, $orderBy: [smartOffice_TaskOrderByWithRelationInput], $cursor: smartOffice_TaskWhereUniqueInput, $take: Int, $skip: Int, $distinct: [smartOffice_TaskScalarFieldEnum]){smartOffice_findFirstTaskOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id taskType status details userId}}"
},
{
"operation_name": "SmartOfficeFindFirstUser",
"api_mount_path": "smartOffice/FindFirstUser",
"file_path": "smartOffice/FindFirstUser.graphql",
"content": "query SmartOfficeFindFirstUser($where: smartOffice_UserWhereInput, $orderBy: [smartOffice_UserOrderByWithRelationInput], $cursor: smartOffice_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [smartOffice_UserScalarFieldEnum]){smartOffice_findFirstUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password role}}"
},
{
"operation_name": "SmartOfficeFindFirstUserOrThrow",
"api_mount_path": "smartOffice/FindFirstUserOrThrow",
"file_path": "smartOffice/FindFirstUserOrThrow.graphql",
"content": "query SmartOfficeFindFirstUserOrThrow($where: smartOffice_UserWhereInput, $orderBy: [smartOffice_UserOrderByWithRelationInput], $cursor: smartOffice_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [smartOffice_UserScalarFieldEnum]){smartOffice_findFirstUserOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password role}}"
},
{
"operation_name": "SmartOfficeFindManyClient",
"api_mount_path": "smartOffice/FindManyClient",
"file_path": "smartOffice/FindManyClient.graphql",
"content": "query SmartOfficeFindManyClient($where: smartOffice_ClientWhereInput, $orderBy: [smartOffice_ClientOrderByWithRelationInput], $cursor: smartOffice_ClientWhereUniqueInput, $take: Int, $skip: Int, $distinct: [smartOffice_ClientScalarFieldEnum]){smartOffice_findManyClient(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id name email phone userId}}"
},
{
"operation_name": "SmartOfficeFindManySale",
"api_mount_path": "smartOffice/FindManySale",
"file_path": "smartOffice/FindManySale.graphql",
"content": "query SmartOfficeFindManySale($where: smartOffice_SaleWhereInput, $orderBy: [smartOffice_SaleOrderByWithRelationInput], $cursor: smartOffice_SaleWhereUniqueInput, $take: Int, $skip: Int, $distinct: [smartOffice_SaleScalarFieldEnum]){smartOffice_findManySale(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id saleType amount timestamp userId}}"
},
{
"operation_name": "SmartOfficeFindManyTask",
"api_mount_path": "smartOffice/FindManyTask",
"file_path": "smartOffice/FindManyTask.graphql",
"content": "query SmartOfficeFindManyTask($where: smartOffice_TaskWhereInput, $orderBy: [smartOffice_TaskOrderByWithRelationInput], $cursor: smartOffice_TaskWhereUniqueInput, $take: Int, $skip: Int, $distinct: [smartOffice_TaskScalarFieldEnum]){smartOffice_findManyTask(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id taskType status details userId}}"
},
{
"operation_name": "SmartOfficeFindManyUser",
"api_mount_path": "smartOffice/FindManyUser",
"file_path": "smartOffice/FindManyUser.graphql",
"content": "query SmartOfficeFindManyUser($where: smartOffice_UserWhereInput, $orderBy: [smartOffice_UserOrderByWithRelationInput], $cursor: smartOffice_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [smartOffice_UserScalarFieldEnum]){smartOffice_findManyUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id username password role}}"
},
{
"operation_name": "SmartOfficeFindUniqueClient",
"api_mount_path": "smartOffice/FindUniqueClient",
"file_path": "smartOffice/FindUniqueClient.graphql",
"content": "query SmartOfficeFindUniqueClient($where: smartOffice_ClientWhereUniqueInput!){smartOffice_findUniqueClient(where: $where){id name email phone userId}}"
},
{
"operation_name": "SmartOfficeFindUniqueClientOrThrow",
"api_mount_path": "smartOffice/FindUniqueClientOrThrow",
"file_path": "smartOffice/FindUniqueClientOrThrow.graphql",
"content": "query SmartOfficeFindUniqueClientOrThrow($where: smartOffice_ClientWhereUniqueInput!){smartOffice_findUniqueClientOrThrow(where: $where){id name email phone userId}}"
},
{
"operation_name": "SmartOfficeFindUniqueSale",
"api_mount_path": "smartOffice/FindUniqueSale",
"file_path": "smartOffice/FindUniqueSale.graphql",
"content": "query SmartOfficeFindUniqueSale($where: smartOffice_SaleWhereUniqueInput!){smartOffice_findUniqueSale(where: $where){id saleType amount timestamp userId}}"
},
{
"operation_name": "SmartOfficeFindUniqueSaleOrThrow",
"api_mount_path": "smartOffice/FindUniqueSaleOrThrow",
"file_path": "smartOffice/FindUniqueSaleOrThrow.graphql",
"content": "query SmartOfficeFindUniqueSaleOrThrow($where: smartOffice_SaleWhereUniqueInput!){smartOffice_findUniqueSaleOrThrow(where: $where){id saleType amount timestamp userId}}"
},
{
"operation_name": "SmartOfficeFindUniqueTask",
"api_mount_path": "smartOffice/FindUniqueTask",
"file_path": "smartOffice/FindUniqueTask.graphql",
"content": "query SmartOfficeFindUniqueTask($where: smartOffice_TaskWhereUniqueInput!){smartOffice_findUniqueTask(where: $where){id taskType status details userId}}"
},
{
"operation_name": "SmartOfficeFindUniqueTaskOrThrow",
"api_mount_path": "smartOffice/FindUniqueTaskOrThrow",
"file_path": "smartOffice/FindUniqueTaskOrThrow.graphql",
"content": "query SmartOfficeFindUniqueTaskOrThrow($where: smartOffice_TaskWhereUniqueInput!){smartOffice_findUniqueTaskOrThrow(where: $where){id taskType status details userId}}"
},
{
"operation_name": "SmartOfficeFindUniqueUser",
"api_mount_path": "smartOffice/FindUniqueUser",
"file_path": "smartOffice/FindUniqueUser.graphql",
"content": "query SmartOfficeFindUniqueUser($where: smartOffice_UserWhereUniqueInput!){smartOffice_findUniqueUser(where: $where){id username password role}}"
},
{
"operation_name": "SmartOfficeFindUniqueUserOrThrow",
"api_mount_path": "smartOffice/FindUniqueUserOrThrow",
"file_path": "smartOffice/FindUniqueUserOrThrow.graphql",
"content": "query SmartOfficeFindUniqueUserOrThrow($where: smartOffice_UserWhereUniqueInput!){smartOffice_findUniqueUserOrThrow(where: $where){id username password role}}"
},
{
"operation_name": "SmartOfficeGroupByClient",
"api_mount_path": "smartOffice/GroupByClient",
"file_path": "smartOffice/GroupByClient.graphql",
"content": "query SmartOfficeGroupByClient($where: smartOffice_ClientWhereInput, $orderBy: [smartOffice_ClientOrderByWithAggregationInput], $by: [smartOffice_ClientScalarFieldEnum]!, $having: smartOffice_ClientScalarWhereWithAggregatesInput, $take: Int, $skip: Int){smartOffice_groupByClient(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id name email phone userId _count {id name email phone userId _all} _min {id name email phone userId} _max {id name email phone userId}}}"
},
{
"operation_name": "SmartOfficeGroupBySale",
"api_mount_path": "smartOffice/GroupBySale",
"file_path": "smartOffice/GroupBySale.graphql",
"content": "query SmartOfficeGroupBySale($where: smartOffice_SaleWhereInput, $orderBy: [smartOffice_SaleOrderByWithAggregationInput], $by: [smartOffice_SaleScalarFieldEnum]!, $having: smartOffice_SaleScalarWhereWithAggregatesInput, $take: Int, $skip: Int){smartOffice_groupBySale(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id saleType amount timestamp userId _count {id saleType amount timestamp userId _all} _avg {amount} _sum {amount} _min {id saleType amount timestamp userId} _max {id saleType amount timestamp userId}}}"
},
{
"operation_name": "SmartOfficeGroupByTask",
"api_mount_path": "smartOffice/GroupByTask",
"file_path": "smartOffice/GroupByTask.graphql",
"content": "query SmartOfficeGroupByTask($where: smartOffice_TaskWhereInput, $orderBy: [smartOffice_TaskOrderByWithAggregationInput], $by: [smartOffice_TaskScalarFieldEnum]!, $having: smartOffice_TaskScalarWhereWithAggregatesInput, $take: Int, $skip: Int){smartOffice_groupByTask(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id taskType status details userId _count {id taskType status details userId _all} _min {id taskType status userId} _max {id taskType status userId}}}"
},
{
"operation_name": "SmartOfficeGroupByUser",
"api_mount_path": "smartOffice/GroupByUser",
"file_path": "smartOffice/GroupByUser.graphql",
"content": "query SmartOfficeGroupByUser($where: smartOffice_UserWhereInput, $orderBy: [smartOffice_UserOrderByWithAggregationInput], $by: [smartOffice_UserScalarFieldEnum]!, $having: smartOffice_UserScalarWhereWithAggregatesInput, $take: Int, $skip: Int){smartOffice_groupByUser(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id username password role _count {id username password role _all} _min {id username password role} _max {id username password role}}}"
},
{
"operation_name": "SmartOfficeQueryRaw",
"api_mount_path": "smartOffice/QueryRaw",
"file_path": "smartOffice/QueryRaw.graphql",
"content": "query SmartOfficeQueryRaw($query: String!, $parameters: [String]){smartOffice_queryRaw(query: $query, parameters: $parameters){ID Int Float String Boolean DateTime JSON Object {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} Array {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON OptionalObject {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalArray {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON}}}"
},
{
"operation_name": "SmartOfficeQueryRawJSON",
"api_mount_path": "smartOffice/QueryRawJSON",
"file_path": "smartOffice/QueryRawJSON.graphql",
"content": "query SmartOfficeQueryRawJSON($query: String!, $parameters: [String]){smartOffice_queryRawJSON(query: $query, parameters: $parameters)}"
},
{
"operation_name": "SmartOfficeUpdateManyClient",
"api_mount_path": "smartOffice/UpdateManyClient",
"file_path": "smartOffice/UpdateManyClient.graphql",
"content": "mutation SmartOfficeUpdateManyClient($data: smartOffice_ClientUpdateManyMutationInput!, $where: smartOffice_ClientWhereInput){smartOffice_updateManyClient(data: $data, where: $where){count}}"
},
{
"operation_name": "SmartOfficeUpdateManySale",
"api_mount_path": "smartOffice/UpdateManySale",
"file_path": "smartOffice/UpdateManySale.graphql",
"content": "mutation SmartOfficeUpdateManySale($data: smartOffice_SaleUpdateManyMutationInput!, $where: smartOffice_SaleWhereInput){smartOffice_updateManySale(data: $data, where: $where){count}}"
},
{
"operation_name": "SmartOfficeUpdateManyTask",
"api_mount_path": "smartOffice/UpdateManyTask",
"file_path": "smartOffice/UpdateManyTask.graphql",
"content": "mutation SmartOfficeUpdateManyTask($data: smartOffice_TaskUpdateManyMutationInput!, $where: smartOffice_TaskWhereInput){smartOffice_updateManyTask(data: $data, where: $where){count}}"
},
{
"operation_name": "SmartOfficeUpdateManyUser",
"api_mount_path": "smartOffice/UpdateManyUser",
"file_path": "smartOffice/UpdateManyUser.graphql",
"content": "mutation SmartOfficeUpdateManyUser($data: smartOffice_UserUpdateManyMutationInput!, $where: smartOffice_UserWhereInput){smartOffice_updateManyUser(data: $data, where: $where){count}}"
},
{
"operation_name": "SmartOfficeUpdateOneClient",
"api_mount_path": "smartOffice/UpdateOneClient",
"file_path": "smartOffice/UpdateOneClient.graphql",
"content": "mutation SmartOfficeUpdateOneClient($data: smartOffice_ClientUpdateInput!, $where: smartOffice_ClientWhereUniqueInput!){smartOffice_updateOneClient(data: $data, where: $where){id name email phone userId}}"
},
{
"operation_name": "SmartOfficeUpdateOneSale",
"api_mount_path": "smartOffice/UpdateOneSale",
"file_path": "smartOffice/UpdateOneSale.graphql",
"content": "mutation SmartOfficeUpdateOneSale($data: smartOffice_SaleUpdateInput!, $where: smartOffice_SaleWhereUniqueInput!){smartOffice_updateOneSale(data: $data, where: $where){id saleType amount timestamp userId}}"
},
{
"operation_name": "SmartOfficeUpdateOneTask",
"api_mount_path": "smartOffice/UpdateOneTask",
"file_path": "smartOffice/UpdateOneTask.graphql",
"content": "mutation SmartOfficeUpdateOneTask($data: smartOffice_TaskUpdateInput!, $where: smartOffice_TaskWhereUniqueInput!){smartOffice_updateOneTask(data: $data, where: $where){id taskType status details userId}}"
},
{
"operation_name": "SmartOfficeUpdateOneUser",
"api_mount_path": "smartOffice/UpdateOneUser",
"file_path": "smartOffice/UpdateOneUser.graphql",
"content": "mutation SmartOfficeUpdateOneUser($data: smartOffice_UserUpdateInput!, $where: smartOffice_UserWhereUniqueInput!){smartOffice_updateOneUser(data: $data, where: $where){id username password role}}"
},
{
"operation_name": "SmartOfficeUpsertOneClient",
"api_mount_path": "smartOffice/UpsertOneClient",
"file_path": "smartOffice/UpsertOneClient.graphql",
"content": "mutation SmartOfficeUpsertOneClient($where: smartOffice_ClientWhereUniqueInput!, $create: smartOffice_ClientCreateInput!, $update: smartOffice_ClientUpdateInput!){smartOffice_upsertOneClient(where: $where, create: $create, update: $update){id name email phone userId}}"
},
{
"operation_name": "SmartOfficeUpsertOneSale",
"api_mount_path": "smartOffice/UpsertOneSale",
"file_path": "smartOffice/UpsertOneSale.graphql",
"content": "mutation SmartOfficeUpsertOneSale($where: smartOffice_SaleWhereUniqueInput!, $create: smartOffice_SaleCreateInput!, $update: smartOffice_SaleUpdateInput!){smartOffice_upsertOneSale(where: $where, create: $create, update: $update){id saleType amount timestamp userId}}"
},
{
"operation_name": "SmartOfficeUpsertOneTask",
"api_mount_path": "smartOffice/UpsertOneTask",
"file_path": "smartOffice/UpsertOneTask.graphql",
"content": "mutation SmartOfficeUpsertOneTask($where: smartOffice_TaskWhereUniqueInput!, $create: smartOffice_TaskCreateInput!, $update: smartOffice_TaskUpdateInput!){smartOffice_upsertOneTask(where: $where, create: $create, update: $update){id taskType status details userId}}"
},
{
"operation_name": "SmartOfficeUpsertOneUser",
"api_mount_path": "smartOffice/UpsertOneUser",
"file_path": "smartOffice/UpsertOneUser.graphql",
"content": "mutation SmartOfficeUpsertOneUser($where: smartOffice_UserWhereUniqueInput!, $create: smartOffice_UserCreateInput!, $update: smartOffice_UserUpdateInput!){smartOffice_upsertOneUser(where: $where, create: $create, update: $update){id username password role}}"
},
{
"operation_name": "UsersCountUsers",
"api_mount_path": "users/CountUsers",
"file_path": "users/CountUsers.graphql",
"content": "query UsersCountUsers {customerCommunication_aggregateUser {_count {_all} _min {id} _max {id}}}"
},
{
"operation_name": "UsersGetAllUsers",
"api_mount_path": "users/GetAllUsers",
"file_path": "users/GetAllUsers.graphql",
"content": "query UsersGetAllUsers {customerCommunication_findManyUser {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd}}"
},
{
"operation_name": "WeatherGetCityById",
"api_mount_path": "weather/GetCityById",
"file_path": "weather/GetCityById.graphql",
"content": "query WeatherGetCityById($config: weather_ConfigInput, $id: [String!]){weather_getCityById(config: $config, id: $id){coord {lat lon} country id name weather {clouds {all humidity visibility} summary {description icon title} temperature {actual feelsLike max min} timestamp wind {deg speed}}}}"
},
{
"operation_name": "WeatherGetCityByName",
"api_mount_path": "weather/GetCityByName",
"file_path": "weather/GetCityByName.graphql",
"content": "query WeatherGetCityByName($config: weather_ConfigInput, $country: String, $name: String!){weather_getCityByName(config: $config, country: $country, name: $name){coord {lat lon} country id name weather {clouds {all humidity visibility} summary {description icon title} temperature {actual feelsLike max min} timestamp wind {deg speed}}}}"
}
],
"typescript_operation_files": [
{
"operation_name": "OpenaiExtract_website_metadata",
"api_mount_path": "openai/extract-website-metadata",
"file_path": "openai/extract-website-metadata.ts",
"module_path": "generated/bundle/operations/openai/extract-website-metadata"
},
{
"operation_name": "OpenaiLoad_url",
"api_mount_path": "openai/load-url",
"file_path": "openai/load-url.ts",
"module_path": "generated/bundle/operations/openai/load-url"
},
{
"operation_name": "OpenaiSummarize_url_content",
"api_mount_path": "openai/summarize-url-content",
"file_path": "openai/summarize-url-content.ts",
"module_path": "generated/bundle/operations/openai/summarize-url-content"
},
{
"operation_name": "OpenaiSummary",
"api_mount_path": "openai/summary",
"file_path": "openai/summary.ts",
"module_path": "generated/bundle/operations/openai/summary"
},
{
"operation_name": "OpenaiWeather",
"api_mount_path": "openai/weather",
"file_path": "openai/weather.ts",
"module_path": "generated/bundle/operations/openai/weather"
},
{
"operation_name": "UsersGet",
"api_mount_path": "users/get",
"file_path": "users/get.ts",
"module_path": "generated/bundle/operations/users/get"
},
{
"operation_name": "UsersSubscribe",
"api_mount_path": "users/subscribe",
"file_path": "users/subscribe.ts",
"module_path": "generated/bundle/operations/users/subscribe"
},
{
"operation_name": "UsersUpdate",
"api_mount_path": "users/update",
"file_path": "users/update.ts",
"module_path": "generated/bundle/operations/users/update"
}
]
}