{
"graphql_operation_files": [
{
"operation_name": "CountriesContinent",
"api_mount_path": "countries/Continent",
"file_path": "countries/Continent.graphql",
"content": "query CountriesContinent($code: ID!, $countries_continent_countries_countries_name_lang: String){countries_continent(code: $code){code countries {awsRegion capital code currencies currency emoji emojiU languages {code name native rtl} name(lang: $countries_continent_countries_countries_name_lang) native phone phones states {code name} subdivisions {code emoji name}} name}}"
},
{
"operation_name": "CountriesContinents",
"api_mount_path": "countries/Continents",
"file_path": "countries/Continents.graphql",
"content": "query CountriesContinents($filter: countries_ContinentFilterInput, $countries_continents_countries_countries_name_lang: String){countries_continents(filter: $filter){code countries {awsRegion capital code currencies currency emoji emojiU languages {code name native rtl} name(lang: $countries_continents_countries_countries_name_lang) native phone phones states {code name} subdivisions {code emoji name}} name}}"
},
{
"operation_name": "CountriesCountries",
"api_mount_path": "countries/Countries",
"file_path": "countries/Countries.graphql",
"content": "query CountriesCountries($filter: countries_CountryFilterInput, $countries_countries_name_lang: String){countries_countries(filter: $filter){awsRegion capital code continent {code name} currencies currency emoji emojiU languages {code name native rtl} name(lang: $countries_countries_name_lang) native phone phones states {code name} subdivisions {code emoji name}}}"
},
{
"operation_name": "CountriesCountry",
"api_mount_path": "countries/Country",
"file_path": "countries/Country.graphql",
"content": "query CountriesCountry($code: ID!, $countries_country_name_lang: String){countries_country(code: $code){awsRegion capital code continent {code name} currencies currency emoji emojiU languages {code name native rtl} name(lang: $countries_country_name_lang) native phone phones states {code name} subdivisions {code emoji name}}}"
},
{
"operation_name": "CountriesCountryByCode",
"api_mount_path": "countries/CountryByCode",
"file_path": "countries/CountryByCode.graphql",
"content": "query CountriesCountryByCode($code: ID!){countries_country(code: $code){code name currencies capital}}"
},
{
"operation_name": "CountriesLanguage",
"api_mount_path": "countries/Language",
"file_path": "countries/Language.graphql",
"content": "query CountriesLanguage($code: ID!){countries_language(code: $code){code name native rtl}}"
},
{
"operation_name": "CountriesLanguages",
"api_mount_path": "countries/Languages",
"file_path": "countries/Languages.graphql",
"content": "query CountriesLanguages($filter: countries_LanguageFilterInput){countries_languages(filter: $filter){code name native rtl}}"
},
{
"operation_name": "DbAggregateAccount",
"api_mount_path": "db/AggregateAccount",
"file_path": "db/AggregateAccount.graphql",
"content": "query DbAggregateAccount($where: db_AccountWhereInput, $orderBy: [db_AccountOrderByWithRelationInput], $cursor: db_AccountWhereUniqueInput, $take: Int, $skip: Int){db_aggregateAccount(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt _all} _avg {expires_at} _sum {expires_at} _min {id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _max {id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt}}}"
},
{
"operation_name": "DbAggregateSession",
"api_mount_path": "db/AggregateSession",
"file_path": "db/AggregateSession.graphql",
"content": "query DbAggregateSession($where: db_SessionWhereInput, $orderBy: [db_SessionOrderByWithRelationInput], $cursor: db_SessionWhereUniqueInput, $take: Int, $skip: Int){db_aggregateSession(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id sessionToken userId expires _all} _min {id sessionToken userId expires} _max {id sessionToken userId expires}}}"
},
{
"operation_name": "DbAggregateUser",
"api_mount_path": "db/AggregateUser",
"file_path": "db/AggregateUser.graphql",
"content": "query DbAggregateUser($where: db_UserWhereInput, $orderBy: [db_UserOrderByWithRelationInput], $cursor: db_UserWhereUniqueInput, $take: Int, $skip: Int){db_aggregateUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd _all} _min {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd} _max {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd}}}"
},
{
"operation_name": "DbAggregateVerificationToken",
"api_mount_path": "db/AggregateVerificationToken",
"file_path": "db/AggregateVerificationToken.graphql",
"content": "query DbAggregateVerificationToken($where: db_VerificationTokenWhereInput, $orderBy: [db_VerificationTokenOrderByWithRelationInput], $cursor: db_VerificationTokenWhereUniqueInput, $take: Int, $skip: Int){db_aggregateVerificationToken(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip){_count {identifier token expires _all} _min {identifier token expires} _max {identifier token expires}}}"
},
{
"operation_name": "DbCreateManyAccount",
"api_mount_path": "db/CreateManyAccount",
"file_path": "db/CreateManyAccount.graphql",
"content": "mutation DbCreateManyAccount($data: [db_AccountCreateManyInput]!, $skipDuplicates: Boolean){db_createManyAccount(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "DbCreateManySession",
"api_mount_path": "db/CreateManySession",
"file_path": "db/CreateManySession.graphql",
"content": "mutation DbCreateManySession($data: [db_SessionCreateManyInput]!, $skipDuplicates: Boolean){db_createManySession(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "DbCreateManyUser",
"api_mount_path": "db/CreateManyUser",
"file_path": "db/CreateManyUser.graphql",
"content": "mutation DbCreateManyUser($data: [db_UserCreateManyInput]!, $skipDuplicates: Boolean){db_createManyUser(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "DbCreateManyVerificationToken",
"api_mount_path": "db/CreateManyVerificationToken",
"file_path": "db/CreateManyVerificationToken.graphql",
"content": "mutation DbCreateManyVerificationToken($data: [db_VerificationTokenCreateManyInput]!, $skipDuplicates: Boolean){db_createManyVerificationToken(data: $data, skipDuplicates: $skipDuplicates){count}}"
},
{
"operation_name": "DbCreateOneAccount",
"api_mount_path": "db/CreateOneAccount",
"file_path": "db/CreateOneAccount.graphql",
"content": "mutation DbCreateOneAccount($data: db_AccountCreateInput!, $db_createOneAccount_user_user_sessions_where: db_SessionWhereInput, $db_createOneAccount_user_user_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_createOneAccount_user_user_sessions_cursor: db_SessionWhereUniqueInput, $db_createOneAccount_user_user_sessions_take: Int, $db_createOneAccount_user_user_sessions_skip: Int, $db_createOneAccount_user_user_sessions_distinct: [db_SessionScalarFieldEnum]){db_createOneAccount(data: $data){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd sessions(where: $db_createOneAccount_user_user_sessions_where, orderBy: $db_createOneAccount_user_user_sessions_orderBy, cursor: $db_createOneAccount_user_user_sessions_cursor, take: $db_createOneAccount_user_user_sessions_take, skip: $db_createOneAccount_user_user_sessions_skip, distinct: $db_createOneAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}}"
},
{
"operation_name": "DbCreateOneSession",
"api_mount_path": "db/CreateOneSession",
"file_path": "db/CreateOneSession.graphql",
"content": "mutation DbCreateOneSession($data: db_SessionCreateInput!, $db_createOneSession_user_user_accounts_where: db_AccountWhereInput, $db_createOneSession_user_user_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_createOneSession_user_user_accounts_cursor: db_AccountWhereUniqueInput, $db_createOneSession_user_user_accounts_take: Int, $db_createOneSession_user_user_accounts_skip: Int, $db_createOneSession_user_user_accounts_distinct: [db_AccountScalarFieldEnum]){db_createOneSession(data: $data){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_createOneSession_user_user_accounts_where, orderBy: $db_createOneSession_user_user_accounts_orderBy, cursor: $db_createOneSession_user_user_accounts_cursor, take: $db_createOneSession_user_user_accounts_take, skip: $db_createOneSession_user_user_accounts_skip, distinct: $db_createOneSession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {accounts sessions}}}}"
},
{
"operation_name": "DbCreateOneUser",
"api_mount_path": "db/CreateOneUser",
"file_path": "db/CreateOneUser.graphql",
"content": "mutation DbCreateOneUser($data: db_UserCreateInput!, $db_createOneUser_accounts_where: db_AccountWhereInput, $db_createOneUser_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_createOneUser_accounts_cursor: db_AccountWhereUniqueInput, $db_createOneUser_accounts_take: Int, $db_createOneUser_accounts_skip: Int, $db_createOneUser_accounts_distinct: [db_AccountScalarFieldEnum], $db_createOneUser_sessions_where: db_SessionWhereInput, $db_createOneUser_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_createOneUser_sessions_cursor: db_SessionWhereUniqueInput, $db_createOneUser_sessions_take: Int, $db_createOneUser_sessions_skip: Int, $db_createOneUser_sessions_distinct: [db_SessionScalarFieldEnum]){db_createOneUser(data: $data){id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_createOneUser_accounts_where, orderBy: $db_createOneUser_accounts_orderBy, cursor: $db_createOneUser_accounts_cursor, take: $db_createOneUser_accounts_take, skip: $db_createOneUser_accounts_skip, distinct: $db_createOneUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $db_createOneUser_sessions_where, orderBy: $db_createOneUser_sessions_orderBy, cursor: $db_createOneUser_sessions_cursor, take: $db_createOneUser_sessions_take, skip: $db_createOneUser_sessions_skip, distinct: $db_createOneUser_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}"
},
{
"operation_name": "DbCreateOneVerificationToken",
"api_mount_path": "db/CreateOneVerificationToken",
"file_path": "db/CreateOneVerificationToken.graphql",
"content": "mutation DbCreateOneVerificationToken($data: db_VerificationTokenCreateInput!){db_createOneVerificationToken(data: $data){identifier token expires}}"
},
{
"operation_name": "DbDeleteManyAccount",
"api_mount_path": "db/DeleteManyAccount",
"file_path": "db/DeleteManyAccount.graphql",
"content": "mutation DbDeleteManyAccount($where: db_AccountWhereInput){db_deleteManyAccount(where: $where){count}}"
},
{
"operation_name": "DbDeleteManySession",
"api_mount_path": "db/DeleteManySession",
"file_path": "db/DeleteManySession.graphql",
"content": "mutation DbDeleteManySession($where: db_SessionWhereInput){db_deleteManySession(where: $where){count}}"
},
{
"operation_name": "DbDeleteManyUser",
"api_mount_path": "db/DeleteManyUser",
"file_path": "db/DeleteManyUser.graphql",
"content": "mutation DbDeleteManyUser($where: db_UserWhereInput){db_deleteManyUser(where: $where){count}}"
},
{
"operation_name": "DbDeleteManyVerificationToken",
"api_mount_path": "db/DeleteManyVerificationToken",
"file_path": "db/DeleteManyVerificationToken.graphql",
"content": "mutation DbDeleteManyVerificationToken($where: db_VerificationTokenWhereInput){db_deleteManyVerificationToken(where: $where){count}}"
},
{
"operation_name": "DbDeleteOneAccount",
"api_mount_path": "db/DeleteOneAccount",
"file_path": "db/DeleteOneAccount.graphql",
"content": "mutation DbDeleteOneAccount($where: db_AccountWhereUniqueInput!, $db_deleteOneAccount_user_user_sessions_where: db_SessionWhereInput, $db_deleteOneAccount_user_user_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_deleteOneAccount_user_user_sessions_cursor: db_SessionWhereUniqueInput, $db_deleteOneAccount_user_user_sessions_take: Int, $db_deleteOneAccount_user_user_sessions_skip: Int, $db_deleteOneAccount_user_user_sessions_distinct: [db_SessionScalarFieldEnum]){db_deleteOneAccount(where: $where){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd sessions(where: $db_deleteOneAccount_user_user_sessions_where, orderBy: $db_deleteOneAccount_user_user_sessions_orderBy, cursor: $db_deleteOneAccount_user_user_sessions_cursor, take: $db_deleteOneAccount_user_user_sessions_take, skip: $db_deleteOneAccount_user_user_sessions_skip, distinct: $db_deleteOneAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}}"
},
{
"operation_name": "DbDeleteOneSession",
"api_mount_path": "db/DeleteOneSession",
"file_path": "db/DeleteOneSession.graphql",
"content": "mutation DbDeleteOneSession($where: db_SessionWhereUniqueInput!, $db_deleteOneSession_user_user_accounts_where: db_AccountWhereInput, $db_deleteOneSession_user_user_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_deleteOneSession_user_user_accounts_cursor: db_AccountWhereUniqueInput, $db_deleteOneSession_user_user_accounts_take: Int, $db_deleteOneSession_user_user_accounts_skip: Int, $db_deleteOneSession_user_user_accounts_distinct: [db_AccountScalarFieldEnum]){db_deleteOneSession(where: $where){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_deleteOneSession_user_user_accounts_where, orderBy: $db_deleteOneSession_user_user_accounts_orderBy, cursor: $db_deleteOneSession_user_user_accounts_cursor, take: $db_deleteOneSession_user_user_accounts_take, skip: $db_deleteOneSession_user_user_accounts_skip, distinct: $db_deleteOneSession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {accounts sessions}}}}"
},
{
"operation_name": "DbDeleteOneUser",
"api_mount_path": "db/DeleteOneUser",
"file_path": "db/DeleteOneUser.graphql",
"content": "mutation DbDeleteOneUser($where: db_UserWhereUniqueInput!, $db_deleteOneUser_accounts_where: db_AccountWhereInput, $db_deleteOneUser_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_deleteOneUser_accounts_cursor: db_AccountWhereUniqueInput, $db_deleteOneUser_accounts_take: Int, $db_deleteOneUser_accounts_skip: Int, $db_deleteOneUser_accounts_distinct: [db_AccountScalarFieldEnum], $db_deleteOneUser_sessions_where: db_SessionWhereInput, $db_deleteOneUser_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_deleteOneUser_sessions_cursor: db_SessionWhereUniqueInput, $db_deleteOneUser_sessions_take: Int, $db_deleteOneUser_sessions_skip: Int, $db_deleteOneUser_sessions_distinct: [db_SessionScalarFieldEnum]){db_deleteOneUser(where: $where){id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_deleteOneUser_accounts_where, orderBy: $db_deleteOneUser_accounts_orderBy, cursor: $db_deleteOneUser_accounts_cursor, take: $db_deleteOneUser_accounts_take, skip: $db_deleteOneUser_accounts_skip, distinct: $db_deleteOneUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $db_deleteOneUser_sessions_where, orderBy: $db_deleteOneUser_sessions_orderBy, cursor: $db_deleteOneUser_sessions_cursor, take: $db_deleteOneUser_sessions_take, skip: $db_deleteOneUser_sessions_skip, distinct: $db_deleteOneUser_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}"
},
{
"operation_name": "DbDeleteOneVerificationToken",
"api_mount_path": "db/DeleteOneVerificationToken",
"file_path": "db/DeleteOneVerificationToken.graphql",
"content": "mutation DbDeleteOneVerificationToken($where: db_VerificationTokenWhereUniqueInput!){db_deleteOneVerificationToken(where: $where){identifier token expires}}"
},
{
"operation_name": "DbExecuteRaw",
"api_mount_path": "db/ExecuteRaw",
"file_path": "db/ExecuteRaw.graphql",
"content": "mutation DbExecuteRaw($query: String!, $parameters: [String]){db_executeRaw(query: $query, parameters: $parameters)}"
},
{
"operation_name": "DbFindFirstAccount",
"api_mount_path": "db/FindFirstAccount",
"file_path": "db/FindFirstAccount.graphql",
"content": "query DbFindFirstAccount($where: db_AccountWhereInput, $orderBy: [db_AccountOrderByWithRelationInput], $cursor: db_AccountWhereUniqueInput, $take: Int, $skip: Int, $distinct: [db_AccountScalarFieldEnum], $db_findFirstAccount_user_user_sessions_where: db_SessionWhereInput, $db_findFirstAccount_user_user_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_findFirstAccount_user_user_sessions_cursor: db_SessionWhereUniqueInput, $db_findFirstAccount_user_user_sessions_take: Int, $db_findFirstAccount_user_user_sessions_skip: Int, $db_findFirstAccount_user_user_sessions_distinct: [db_SessionScalarFieldEnum]){db_findFirstAccount(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd sessions(where: $db_findFirstAccount_user_user_sessions_where, orderBy: $db_findFirstAccount_user_user_sessions_orderBy, cursor: $db_findFirstAccount_user_user_sessions_cursor, take: $db_findFirstAccount_user_user_sessions_take, skip: $db_findFirstAccount_user_user_sessions_skip, distinct: $db_findFirstAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}}"
},
{
"operation_name": "DbFindFirstAccountOrThrow",
"api_mount_path": "db/FindFirstAccountOrThrow",
"file_path": "db/FindFirstAccountOrThrow.graphql",
"content": "query DbFindFirstAccountOrThrow($where: db_AccountWhereInput, $orderBy: [db_AccountOrderByWithRelationInput], $cursor: db_AccountWhereUniqueInput, $take: Int, $skip: Int, $distinct: [db_AccountScalarFieldEnum], $db_findFirstAccountOrThrow_user_user_sessions_where: db_SessionWhereInput, $db_findFirstAccountOrThrow_user_user_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_findFirstAccountOrThrow_user_user_sessions_cursor: db_SessionWhereUniqueInput, $db_findFirstAccountOrThrow_user_user_sessions_take: Int, $db_findFirstAccountOrThrow_user_user_sessions_skip: Int, $db_findFirstAccountOrThrow_user_user_sessions_distinct: [db_SessionScalarFieldEnum]){db_findFirstAccountOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd sessions(where: $db_findFirstAccountOrThrow_user_user_sessions_where, orderBy: $db_findFirstAccountOrThrow_user_user_sessions_orderBy, cursor: $db_findFirstAccountOrThrow_user_user_sessions_cursor, take: $db_findFirstAccountOrThrow_user_user_sessions_take, skip: $db_findFirstAccountOrThrow_user_user_sessions_skip, distinct: $db_findFirstAccountOrThrow_user_user_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}}"
},
{
"operation_name": "DbFindFirstSession",
"api_mount_path": "db/FindFirstSession",
"file_path": "db/FindFirstSession.graphql",
"content": "query DbFindFirstSession($where: db_SessionWhereInput, $orderBy: [db_SessionOrderByWithRelationInput], $cursor: db_SessionWhereUniqueInput, $take: Int, $skip: Int, $distinct: [db_SessionScalarFieldEnum], $db_findFirstSession_user_user_accounts_where: db_AccountWhereInput, $db_findFirstSession_user_user_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_findFirstSession_user_user_accounts_cursor: db_AccountWhereUniqueInput, $db_findFirstSession_user_user_accounts_take: Int, $db_findFirstSession_user_user_accounts_skip: Int, $db_findFirstSession_user_user_accounts_distinct: [db_AccountScalarFieldEnum]){db_findFirstSession(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_findFirstSession_user_user_accounts_where, orderBy: $db_findFirstSession_user_user_accounts_orderBy, cursor: $db_findFirstSession_user_user_accounts_cursor, take: $db_findFirstSession_user_user_accounts_take, skip: $db_findFirstSession_user_user_accounts_skip, distinct: $db_findFirstSession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {accounts sessions}}}}"
},
{
"operation_name": "DbFindFirstSessionOrThrow",
"api_mount_path": "db/FindFirstSessionOrThrow",
"file_path": "db/FindFirstSessionOrThrow.graphql",
"content": "query DbFindFirstSessionOrThrow($where: db_SessionWhereInput, $orderBy: [db_SessionOrderByWithRelationInput], $cursor: db_SessionWhereUniqueInput, $take: Int, $skip: Int, $distinct: [db_SessionScalarFieldEnum], $db_findFirstSessionOrThrow_user_user_accounts_where: db_AccountWhereInput, $db_findFirstSessionOrThrow_user_user_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_findFirstSessionOrThrow_user_user_accounts_cursor: db_AccountWhereUniqueInput, $db_findFirstSessionOrThrow_user_user_accounts_take: Int, $db_findFirstSessionOrThrow_user_user_accounts_skip: Int, $db_findFirstSessionOrThrow_user_user_accounts_distinct: [db_AccountScalarFieldEnum]){db_findFirstSessionOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_findFirstSessionOrThrow_user_user_accounts_where, orderBy: $db_findFirstSessionOrThrow_user_user_accounts_orderBy, cursor: $db_findFirstSessionOrThrow_user_user_accounts_cursor, take: $db_findFirstSessionOrThrow_user_user_accounts_take, skip: $db_findFirstSessionOrThrow_user_user_accounts_skip, distinct: $db_findFirstSessionOrThrow_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {accounts sessions}}}}"
},
{
"operation_name": "DbFindFirstUser",
"api_mount_path": "db/FindFirstUser",
"file_path": "db/FindFirstUser.graphql",
"content": "query DbFindFirstUser($where: db_UserWhereInput, $orderBy: [db_UserOrderByWithRelationInput], $cursor: db_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [db_UserScalarFieldEnum], $db_findFirstUser_accounts_where: db_AccountWhereInput, $db_findFirstUser_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_findFirstUser_accounts_cursor: db_AccountWhereUniqueInput, $db_findFirstUser_accounts_take: Int, $db_findFirstUser_accounts_skip: Int, $db_findFirstUser_accounts_distinct: [db_AccountScalarFieldEnum], $db_findFirstUser_sessions_where: db_SessionWhereInput, $db_findFirstUser_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_findFirstUser_sessions_cursor: db_SessionWhereUniqueInput, $db_findFirstUser_sessions_take: Int, $db_findFirstUser_sessions_skip: Int, $db_findFirstUser_sessions_distinct: [db_SessionScalarFieldEnum]){db_findFirstUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_findFirstUser_accounts_where, orderBy: $db_findFirstUser_accounts_orderBy, cursor: $db_findFirstUser_accounts_cursor, take: $db_findFirstUser_accounts_take, skip: $db_findFirstUser_accounts_skip, distinct: $db_findFirstUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $db_findFirstUser_sessions_where, orderBy: $db_findFirstUser_sessions_orderBy, cursor: $db_findFirstUser_sessions_cursor, take: $db_findFirstUser_sessions_take, skip: $db_findFirstUser_sessions_skip, distinct: $db_findFirstUser_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}"
},
{
"operation_name": "DbFindFirstUserOrThrow",
"api_mount_path": "db/FindFirstUserOrThrow",
"file_path": "db/FindFirstUserOrThrow.graphql",
"content": "query DbFindFirstUserOrThrow($where: db_UserWhereInput, $orderBy: [db_UserOrderByWithRelationInput], $cursor: db_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [db_UserScalarFieldEnum], $db_findFirstUserOrThrow_accounts_where: db_AccountWhereInput, $db_findFirstUserOrThrow_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_findFirstUserOrThrow_accounts_cursor: db_AccountWhereUniqueInput, $db_findFirstUserOrThrow_accounts_take: Int, $db_findFirstUserOrThrow_accounts_skip: Int, $db_findFirstUserOrThrow_accounts_distinct: [db_AccountScalarFieldEnum], $db_findFirstUserOrThrow_sessions_where: db_SessionWhereInput, $db_findFirstUserOrThrow_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_findFirstUserOrThrow_sessions_cursor: db_SessionWhereUniqueInput, $db_findFirstUserOrThrow_sessions_take: Int, $db_findFirstUserOrThrow_sessions_skip: Int, $db_findFirstUserOrThrow_sessions_distinct: [db_SessionScalarFieldEnum]){db_findFirstUserOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_findFirstUserOrThrow_accounts_where, orderBy: $db_findFirstUserOrThrow_accounts_orderBy, cursor: $db_findFirstUserOrThrow_accounts_cursor, take: $db_findFirstUserOrThrow_accounts_take, skip: $db_findFirstUserOrThrow_accounts_skip, distinct: $db_findFirstUserOrThrow_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $db_findFirstUserOrThrow_sessions_where, orderBy: $db_findFirstUserOrThrow_sessions_orderBy, cursor: $db_findFirstUserOrThrow_sessions_cursor, take: $db_findFirstUserOrThrow_sessions_take, skip: $db_findFirstUserOrThrow_sessions_skip, distinct: $db_findFirstUserOrThrow_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}"
},
{
"operation_name": "DbFindFirstVerificationToken",
"api_mount_path": "db/FindFirstVerificationToken",
"file_path": "db/FindFirstVerificationToken.graphql",
"content": "query DbFindFirstVerificationToken($where: db_VerificationTokenWhereInput, $orderBy: [db_VerificationTokenOrderByWithRelationInput], $cursor: db_VerificationTokenWhereUniqueInput, $take: Int, $skip: Int, $distinct: [db_VerificationTokenScalarFieldEnum]){db_findFirstVerificationToken(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){identifier token expires}}"
},
{
"operation_name": "DbFindFirstVerificationTokenOrThrow",
"api_mount_path": "db/FindFirstVerificationTokenOrThrow",
"file_path": "db/FindFirstVerificationTokenOrThrow.graphql",
"content": "query DbFindFirstVerificationTokenOrThrow($where: db_VerificationTokenWhereInput, $orderBy: [db_VerificationTokenOrderByWithRelationInput], $cursor: db_VerificationTokenWhereUniqueInput, $take: Int, $skip: Int, $distinct: [db_VerificationTokenScalarFieldEnum]){db_findFirstVerificationTokenOrThrow(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){identifier token expires}}"
},
{
"operation_name": "DbFindManyAccount",
"api_mount_path": "db/FindManyAccount",
"file_path": "db/FindManyAccount.graphql",
"content": "query DbFindManyAccount($where: db_AccountWhereInput, $orderBy: [db_AccountOrderByWithRelationInput], $cursor: db_AccountWhereUniqueInput, $take: Int, $skip: Int, $distinct: [db_AccountScalarFieldEnum], $db_findManyAccount_user_user_sessions_where: db_SessionWhereInput, $db_findManyAccount_user_user_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_findManyAccount_user_user_sessions_cursor: db_SessionWhereUniqueInput, $db_findManyAccount_user_user_sessions_take: Int, $db_findManyAccount_user_user_sessions_skip: Int, $db_findManyAccount_user_user_sessions_distinct: [db_SessionScalarFieldEnum]){db_findManyAccount(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd sessions(where: $db_findManyAccount_user_user_sessions_where, orderBy: $db_findManyAccount_user_user_sessions_orderBy, cursor: $db_findManyAccount_user_user_sessions_cursor, take: $db_findManyAccount_user_user_sessions_take, skip: $db_findManyAccount_user_user_sessions_skip, distinct: $db_findManyAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}}"
},
{
"operation_name": "DbFindManySession",
"api_mount_path": "db/FindManySession",
"file_path": "db/FindManySession.graphql",
"content": "query DbFindManySession($where: db_SessionWhereInput, $orderBy: [db_SessionOrderByWithRelationInput], $cursor: db_SessionWhereUniqueInput, $take: Int, $skip: Int, $distinct: [db_SessionScalarFieldEnum], $db_findManySession_user_user_accounts_where: db_AccountWhereInput, $db_findManySession_user_user_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_findManySession_user_user_accounts_cursor: db_AccountWhereUniqueInput, $db_findManySession_user_user_accounts_take: Int, $db_findManySession_user_user_accounts_skip: Int, $db_findManySession_user_user_accounts_distinct: [db_AccountScalarFieldEnum]){db_findManySession(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_findManySession_user_user_accounts_where, orderBy: $db_findManySession_user_user_accounts_orderBy, cursor: $db_findManySession_user_user_accounts_cursor, take: $db_findManySession_user_user_accounts_take, skip: $db_findManySession_user_user_accounts_skip, distinct: $db_findManySession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {accounts sessions}}}}"
},
{
"operation_name": "DbFindManyUser",
"api_mount_path": "db/FindManyUser",
"file_path": "db/FindManyUser.graphql",
"content": "query DbFindManyUser($where: db_UserWhereInput, $orderBy: [db_UserOrderByWithRelationInput], $cursor: db_UserWhereUniqueInput, $take: Int, $skip: Int, $distinct: [db_UserScalarFieldEnum], $db_findManyUser_accounts_where: db_AccountWhereInput, $db_findManyUser_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_findManyUser_accounts_cursor: db_AccountWhereUniqueInput, $db_findManyUser_accounts_take: Int, $db_findManyUser_accounts_skip: Int, $db_findManyUser_accounts_distinct: [db_AccountScalarFieldEnum], $db_findManyUser_sessions_where: db_SessionWhereInput, $db_findManyUser_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_findManyUser_sessions_cursor: db_SessionWhereUniqueInput, $db_findManyUser_sessions_take: Int, $db_findManyUser_sessions_skip: Int, $db_findManyUser_sessions_distinct: [db_SessionScalarFieldEnum]){db_findManyUser(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_findManyUser_accounts_where, orderBy: $db_findManyUser_accounts_orderBy, cursor: $db_findManyUser_accounts_cursor, take: $db_findManyUser_accounts_take, skip: $db_findManyUser_accounts_skip, distinct: $db_findManyUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $db_findManyUser_sessions_where, orderBy: $db_findManyUser_sessions_orderBy, cursor: $db_findManyUser_sessions_cursor, take: $db_findManyUser_sessions_take, skip: $db_findManyUser_sessions_skip, distinct: $db_findManyUser_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}"
},
{
"operation_name": "DbFindManyVerificationToken",
"api_mount_path": "db/FindManyVerificationToken",
"file_path": "db/FindManyVerificationToken.graphql",
"content": "query DbFindManyVerificationToken($where: db_VerificationTokenWhereInput, $orderBy: [db_VerificationTokenOrderByWithRelationInput], $cursor: db_VerificationTokenWhereUniqueInput, $take: Int, $skip: Int, $distinct: [db_VerificationTokenScalarFieldEnum]){db_findManyVerificationToken(where: $where, orderBy: $orderBy, cursor: $cursor, take: $take, skip: $skip, distinct: $distinct){identifier token expires}}"
},
{
"operation_name": "DbFindUniqueAccount",
"api_mount_path": "db/FindUniqueAccount",
"file_path": "db/FindUniqueAccount.graphql",
"content": "query DbFindUniqueAccount($where: db_AccountWhereUniqueInput!, $db_findUniqueAccount_user_user_sessions_where: db_SessionWhereInput, $db_findUniqueAccount_user_user_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_findUniqueAccount_user_user_sessions_cursor: db_SessionWhereUniqueInput, $db_findUniqueAccount_user_user_sessions_take: Int, $db_findUniqueAccount_user_user_sessions_skip: Int, $db_findUniqueAccount_user_user_sessions_distinct: [db_SessionScalarFieldEnum]){db_findUniqueAccount(where: $where){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd sessions(where: $db_findUniqueAccount_user_user_sessions_where, orderBy: $db_findUniqueAccount_user_user_sessions_orderBy, cursor: $db_findUniqueAccount_user_user_sessions_cursor, take: $db_findUniqueAccount_user_user_sessions_take, skip: $db_findUniqueAccount_user_user_sessions_skip, distinct: $db_findUniqueAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}}"
},
{
"operation_name": "DbFindUniqueAccountOrThrow",
"api_mount_path": "db/FindUniqueAccountOrThrow",
"file_path": "db/FindUniqueAccountOrThrow.graphql",
"content": "query DbFindUniqueAccountOrThrow($where: db_AccountWhereUniqueInput!, $db_findUniqueAccountOrThrow_user_user_sessions_where: db_SessionWhereInput, $db_findUniqueAccountOrThrow_user_user_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_findUniqueAccountOrThrow_user_user_sessions_cursor: db_SessionWhereUniqueInput, $db_findUniqueAccountOrThrow_user_user_sessions_take: Int, $db_findUniqueAccountOrThrow_user_user_sessions_skip: Int, $db_findUniqueAccountOrThrow_user_user_sessions_distinct: [db_SessionScalarFieldEnum]){db_findUniqueAccountOrThrow(where: $where){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd sessions(where: $db_findUniqueAccountOrThrow_user_user_sessions_where, orderBy: $db_findUniqueAccountOrThrow_user_user_sessions_orderBy, cursor: $db_findUniqueAccountOrThrow_user_user_sessions_cursor, take: $db_findUniqueAccountOrThrow_user_user_sessions_take, skip: $db_findUniqueAccountOrThrow_user_user_sessions_skip, distinct: $db_findUniqueAccountOrThrow_user_user_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}}"
},
{
"operation_name": "DbFindUniqueSession",
"api_mount_path": "db/FindUniqueSession",
"file_path": "db/FindUniqueSession.graphql",
"content": "query DbFindUniqueSession($where: db_SessionWhereUniqueInput!, $db_findUniqueSession_user_user_accounts_where: db_AccountWhereInput, $db_findUniqueSession_user_user_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_findUniqueSession_user_user_accounts_cursor: db_AccountWhereUniqueInput, $db_findUniqueSession_user_user_accounts_take: Int, $db_findUniqueSession_user_user_accounts_skip: Int, $db_findUniqueSession_user_user_accounts_distinct: [db_AccountScalarFieldEnum]){db_findUniqueSession(where: $where){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_findUniqueSession_user_user_accounts_where, orderBy: $db_findUniqueSession_user_user_accounts_orderBy, cursor: $db_findUniqueSession_user_user_accounts_cursor, take: $db_findUniqueSession_user_user_accounts_take, skip: $db_findUniqueSession_user_user_accounts_skip, distinct: $db_findUniqueSession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {accounts sessions}}}}"
},
{
"operation_name": "DbFindUniqueSessionOrThrow",
"api_mount_path": "db/FindUniqueSessionOrThrow",
"file_path": "db/FindUniqueSessionOrThrow.graphql",
"content": "query DbFindUniqueSessionOrThrow($where: db_SessionWhereUniqueInput!, $db_findUniqueSessionOrThrow_user_user_accounts_where: db_AccountWhereInput, $db_findUniqueSessionOrThrow_user_user_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_findUniqueSessionOrThrow_user_user_accounts_cursor: db_AccountWhereUniqueInput, $db_findUniqueSessionOrThrow_user_user_accounts_take: Int, $db_findUniqueSessionOrThrow_user_user_accounts_skip: Int, $db_findUniqueSessionOrThrow_user_user_accounts_distinct: [db_AccountScalarFieldEnum]){db_findUniqueSessionOrThrow(where: $where){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_findUniqueSessionOrThrow_user_user_accounts_where, orderBy: $db_findUniqueSessionOrThrow_user_user_accounts_orderBy, cursor: $db_findUniqueSessionOrThrow_user_user_accounts_cursor, take: $db_findUniqueSessionOrThrow_user_user_accounts_take, skip: $db_findUniqueSessionOrThrow_user_user_accounts_skip, distinct: $db_findUniqueSessionOrThrow_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {accounts sessions}}}}"
},
{
"operation_name": "DbFindUniqueUser",
"api_mount_path": "db/FindUniqueUser",
"file_path": "db/FindUniqueUser.graphql",
"content": "query DbFindUniqueUser($where: db_UserWhereUniqueInput!, $db_findUniqueUser_accounts_where: db_AccountWhereInput, $db_findUniqueUser_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_findUniqueUser_accounts_cursor: db_AccountWhereUniqueInput, $db_findUniqueUser_accounts_take: Int, $db_findUniqueUser_accounts_skip: Int, $db_findUniqueUser_accounts_distinct: [db_AccountScalarFieldEnum], $db_findUniqueUser_sessions_where: db_SessionWhereInput, $db_findUniqueUser_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_findUniqueUser_sessions_cursor: db_SessionWhereUniqueInput, $db_findUniqueUser_sessions_take: Int, $db_findUniqueUser_sessions_skip: Int, $db_findUniqueUser_sessions_distinct: [db_SessionScalarFieldEnum]){db_findUniqueUser(where: $where){id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_findUniqueUser_accounts_where, orderBy: $db_findUniqueUser_accounts_orderBy, cursor: $db_findUniqueUser_accounts_cursor, take: $db_findUniqueUser_accounts_take, skip: $db_findUniqueUser_accounts_skip, distinct: $db_findUniqueUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $db_findUniqueUser_sessions_where, orderBy: $db_findUniqueUser_sessions_orderBy, cursor: $db_findUniqueUser_sessions_cursor, take: $db_findUniqueUser_sessions_take, skip: $db_findUniqueUser_sessions_skip, distinct: $db_findUniqueUser_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}"
},
{
"operation_name": "DbFindUniqueUserOrThrow",
"api_mount_path": "db/FindUniqueUserOrThrow",
"file_path": "db/FindUniqueUserOrThrow.graphql",
"content": "query DbFindUniqueUserOrThrow($where: db_UserWhereUniqueInput!, $db_findUniqueUserOrThrow_accounts_where: db_AccountWhereInput, $db_findUniqueUserOrThrow_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_findUniqueUserOrThrow_accounts_cursor: db_AccountWhereUniqueInput, $db_findUniqueUserOrThrow_accounts_take: Int, $db_findUniqueUserOrThrow_accounts_skip: Int, $db_findUniqueUserOrThrow_accounts_distinct: [db_AccountScalarFieldEnum], $db_findUniqueUserOrThrow_sessions_where: db_SessionWhereInput, $db_findUniqueUserOrThrow_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_findUniqueUserOrThrow_sessions_cursor: db_SessionWhereUniqueInput, $db_findUniqueUserOrThrow_sessions_take: Int, $db_findUniqueUserOrThrow_sessions_skip: Int, $db_findUniqueUserOrThrow_sessions_distinct: [db_SessionScalarFieldEnum]){db_findUniqueUserOrThrow(where: $where){id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_findUniqueUserOrThrow_accounts_where, orderBy: $db_findUniqueUserOrThrow_accounts_orderBy, cursor: $db_findUniqueUserOrThrow_accounts_cursor, take: $db_findUniqueUserOrThrow_accounts_take, skip: $db_findUniqueUserOrThrow_accounts_skip, distinct: $db_findUniqueUserOrThrow_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $db_findUniqueUserOrThrow_sessions_where, orderBy: $db_findUniqueUserOrThrow_sessions_orderBy, cursor: $db_findUniqueUserOrThrow_sessions_cursor, take: $db_findUniqueUserOrThrow_sessions_take, skip: $db_findUniqueUserOrThrow_sessions_skip, distinct: $db_findUniqueUserOrThrow_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}"
},
{
"operation_name": "DbFindUniqueVerificationToken",
"api_mount_path": "db/FindUniqueVerificationToken",
"file_path": "db/FindUniqueVerificationToken.graphql",
"content": "query DbFindUniqueVerificationToken($where: db_VerificationTokenWhereUniqueInput!){db_findUniqueVerificationToken(where: $where){identifier token expires}}"
},
{
"operation_name": "DbFindUniqueVerificationTokenOrThrow",
"api_mount_path": "db/FindUniqueVerificationTokenOrThrow",
"file_path": "db/FindUniqueVerificationTokenOrThrow.graphql",
"content": "query DbFindUniqueVerificationTokenOrThrow($where: db_VerificationTokenWhereUniqueInput!){db_findUniqueVerificationTokenOrThrow(where: $where){identifier token expires}}"
},
{
"operation_name": "DbGroupByAccount",
"api_mount_path": "db/GroupByAccount",
"file_path": "db/GroupByAccount.graphql",
"content": "query DbGroupByAccount($where: db_AccountWhereInput, $orderBy: [db_AccountOrderByWithAggregationInput], $by: [db_AccountScalarFieldEnum]!, $having: db_AccountScalarWhereWithAggregatesInput, $take: Int, $skip: Int){db_groupByAccount(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt _count {id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt _all} _avg {expires_at} _sum {expires_at} _min {id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _max {id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt}}}"
},
{
"operation_name": "DbGroupBySession",
"api_mount_path": "db/GroupBySession",
"file_path": "db/GroupBySession.graphql",
"content": "query DbGroupBySession($where: db_SessionWhereInput, $orderBy: [db_SessionOrderByWithAggregationInput], $by: [db_SessionScalarFieldEnum]!, $having: db_SessionScalarWhereWithAggregatesInput, $take: Int, $skip: Int){db_groupBySession(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id sessionToken userId expires _count {id sessionToken userId expires _all} _min {id sessionToken userId expires} _max {id sessionToken userId expires}}}"
},
{
"operation_name": "DbGroupByUser",
"api_mount_path": "db/GroupByUser",
"file_path": "db/GroupByUser.graphql",
"content": "query DbGroupByUser($where: db_UserWhereInput, $orderBy: [db_UserOrderByWithAggregationInput], $by: [db_UserScalarFieldEnum]!, $having: db_UserScalarWhereWithAggregatesInput, $take: Int, $skip: Int){db_groupByUser(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd _count {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd _all} _min {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd} _max {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd}}}"
},
{
"operation_name": "DbGroupByVerificationToken",
"api_mount_path": "db/GroupByVerificationToken",
"file_path": "db/GroupByVerificationToken.graphql",
"content": "query DbGroupByVerificationToken($where: db_VerificationTokenWhereInput, $orderBy: [db_VerificationTokenOrderByWithAggregationInput], $by: [db_VerificationTokenScalarFieldEnum]!, $having: db_VerificationTokenScalarWhereWithAggregatesInput, $take: Int, $skip: Int){db_groupByVerificationToken(where: $where, orderBy: $orderBy, by: $by, having: $having, take: $take, skip: $skip){identifier token expires _count {identifier token expires _all} _min {identifier token expires} _max {identifier token expires}}}"
},
{
"operation_name": "DbQueryRaw",
"api_mount_path": "db/QueryRaw",
"file_path": "db/QueryRaw.graphql",
"content": "query DbQueryRaw($query: String!, $parameters: [String]){db_queryRaw(query: $query, parameters: $parameters){ID Int Float String Boolean DateTime JSON Object {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} Array {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON OptionalObject {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON} OptionalArray {ID Int Float String Boolean DateTime JSON OptionalID OptionalInt OptionalFloat OptionalString OptionalBoolean OptionalDateTime OptionalJSON}}}"
},
{
"operation_name": "DbQueryRawJSON",
"api_mount_path": "db/QueryRawJSON",
"file_path": "db/QueryRawJSON.graphql",
"content": "query DbQueryRawJSON($query: String!, $parameters: [String]){db_queryRawJSON(query: $query, parameters: $parameters)}"
},
{
"operation_name": "DbUpdateManyAccount",
"api_mount_path": "db/UpdateManyAccount",
"file_path": "db/UpdateManyAccount.graphql",
"content": "mutation DbUpdateManyAccount($data: db_AccountUpdateManyMutationInput!, $where: db_AccountWhereInput){db_updateManyAccount(data: $data, where: $where){count}}"
},
{
"operation_name": "DbUpdateManySession",
"api_mount_path": "db/UpdateManySession",
"file_path": "db/UpdateManySession.graphql",
"content": "mutation DbUpdateManySession($data: db_SessionUpdateManyMutationInput!, $where: db_SessionWhereInput){db_updateManySession(data: $data, where: $where){count}}"
},
{
"operation_name": "DbUpdateManyUser",
"api_mount_path": "db/UpdateManyUser",
"file_path": "db/UpdateManyUser.graphql",
"content": "mutation DbUpdateManyUser($data: db_UserUpdateManyMutationInput!, $where: db_UserWhereInput){db_updateManyUser(data: $data, where: $where){count}}"
},
{
"operation_name": "DbUpdateManyVerificationToken",
"api_mount_path": "db/UpdateManyVerificationToken",
"file_path": "db/UpdateManyVerificationToken.graphql",
"content": "mutation DbUpdateManyVerificationToken($data: db_VerificationTokenUpdateManyMutationInput!, $where: db_VerificationTokenWhereInput){db_updateManyVerificationToken(data: $data, where: $where){count}}"
},
{
"operation_name": "DbUpdateOneAccount",
"api_mount_path": "db/UpdateOneAccount",
"file_path": "db/UpdateOneAccount.graphql",
"content": "mutation DbUpdateOneAccount($data: db_AccountUpdateInput!, $where: db_AccountWhereUniqueInput!, $db_updateOneAccount_user_user_sessions_where: db_SessionWhereInput, $db_updateOneAccount_user_user_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_updateOneAccount_user_user_sessions_cursor: db_SessionWhereUniqueInput, $db_updateOneAccount_user_user_sessions_take: Int, $db_updateOneAccount_user_user_sessions_skip: Int, $db_updateOneAccount_user_user_sessions_distinct: [db_SessionScalarFieldEnum]){db_updateOneAccount(data: $data, where: $where){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd sessions(where: $db_updateOneAccount_user_user_sessions_where, orderBy: $db_updateOneAccount_user_user_sessions_orderBy, cursor: $db_updateOneAccount_user_user_sessions_cursor, take: $db_updateOneAccount_user_user_sessions_take, skip: $db_updateOneAccount_user_user_sessions_skip, distinct: $db_updateOneAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}}"
},
{
"operation_name": "DbUpdateOneSession",
"api_mount_path": "db/UpdateOneSession",
"file_path": "db/UpdateOneSession.graphql",
"content": "mutation DbUpdateOneSession($data: db_SessionUpdateInput!, $where: db_SessionWhereUniqueInput!, $db_updateOneSession_user_user_accounts_where: db_AccountWhereInput, $db_updateOneSession_user_user_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_updateOneSession_user_user_accounts_cursor: db_AccountWhereUniqueInput, $db_updateOneSession_user_user_accounts_take: Int, $db_updateOneSession_user_user_accounts_skip: Int, $db_updateOneSession_user_user_accounts_distinct: [db_AccountScalarFieldEnum]){db_updateOneSession(data: $data, where: $where){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_updateOneSession_user_user_accounts_where, orderBy: $db_updateOneSession_user_user_accounts_orderBy, cursor: $db_updateOneSession_user_user_accounts_cursor, take: $db_updateOneSession_user_user_accounts_take, skip: $db_updateOneSession_user_user_accounts_skip, distinct: $db_updateOneSession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {accounts sessions}}}}"
},
{
"operation_name": "DbUpdateOneUser",
"api_mount_path": "db/UpdateOneUser",
"file_path": "db/UpdateOneUser.graphql",
"content": "mutation DbUpdateOneUser($data: db_UserUpdateInput!, $where: db_UserWhereUniqueInput!, $db_updateOneUser_accounts_where: db_AccountWhereInput, $db_updateOneUser_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_updateOneUser_accounts_cursor: db_AccountWhereUniqueInput, $db_updateOneUser_accounts_take: Int, $db_updateOneUser_accounts_skip: Int, $db_updateOneUser_accounts_distinct: [db_AccountScalarFieldEnum], $db_updateOneUser_sessions_where: db_SessionWhereInput, $db_updateOneUser_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_updateOneUser_sessions_cursor: db_SessionWhereUniqueInput, $db_updateOneUser_sessions_take: Int, $db_updateOneUser_sessions_skip: Int, $db_updateOneUser_sessions_distinct: [db_SessionScalarFieldEnum]){db_updateOneUser(data: $data, where: $where){id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_updateOneUser_accounts_where, orderBy: $db_updateOneUser_accounts_orderBy, cursor: $db_updateOneUser_accounts_cursor, take: $db_updateOneUser_accounts_take, skip: $db_updateOneUser_accounts_skip, distinct: $db_updateOneUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $db_updateOneUser_sessions_where, orderBy: $db_updateOneUser_sessions_orderBy, cursor: $db_updateOneUser_sessions_cursor, take: $db_updateOneUser_sessions_take, skip: $db_updateOneUser_sessions_skip, distinct: $db_updateOneUser_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}"
},
{
"operation_name": "DbUpdateOneVerificationToken",
"api_mount_path": "db/UpdateOneVerificationToken",
"file_path": "db/UpdateOneVerificationToken.graphql",
"content": "mutation DbUpdateOneVerificationToken($data: db_VerificationTokenUpdateInput!, $where: db_VerificationTokenWhereUniqueInput!){db_updateOneVerificationToken(data: $data, where: $where){identifier token expires}}"
},
{
"operation_name": "DbUpsertOneAccount",
"api_mount_path": "db/UpsertOneAccount",
"file_path": "db/UpsertOneAccount.graphql",
"content": "mutation DbUpsertOneAccount($where: db_AccountWhereUniqueInput!, $create: db_AccountCreateInput!, $update: db_AccountUpdateInput!, $db_upsertOneAccount_user_user_sessions_where: db_SessionWhereInput, $db_upsertOneAccount_user_user_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_upsertOneAccount_user_user_sessions_cursor: db_SessionWhereUniqueInput, $db_upsertOneAccount_user_user_sessions_take: Int, $db_upsertOneAccount_user_user_sessions_skip: Int, $db_upsertOneAccount_user_user_sessions_distinct: [db_SessionScalarFieldEnum]){db_upsertOneAccount(where: $where, create: $create, update: $update){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd sessions(where: $db_upsertOneAccount_user_user_sessions_where, orderBy: $db_upsertOneAccount_user_user_sessions_orderBy, cursor: $db_upsertOneAccount_user_user_sessions_cursor, take: $db_upsertOneAccount_user_user_sessions_take, skip: $db_upsertOneAccount_user_user_sessions_skip, distinct: $db_upsertOneAccount_user_user_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}}"
},
{
"operation_name": "DbUpsertOneSession",
"api_mount_path": "db/UpsertOneSession",
"file_path": "db/UpsertOneSession.graphql",
"content": "mutation DbUpsertOneSession($where: db_SessionWhereUniqueInput!, $create: db_SessionCreateInput!, $update: db_SessionUpdateInput!, $db_upsertOneSession_user_user_accounts_where: db_AccountWhereInput, $db_upsertOneSession_user_user_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_upsertOneSession_user_user_accounts_cursor: db_AccountWhereUniqueInput, $db_upsertOneSession_user_user_accounts_take: Int, $db_upsertOneSession_user_user_accounts_skip: Int, $db_upsertOneSession_user_user_accounts_distinct: [db_AccountScalarFieldEnum]){db_upsertOneSession(where: $where, create: $create, update: $update){id sessionToken userId expires user {id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_upsertOneSession_user_user_accounts_where, orderBy: $db_upsertOneSession_user_user_accounts_orderBy, cursor: $db_upsertOneSession_user_user_accounts_cursor, take: $db_upsertOneSession_user_user_accounts_take, skip: $db_upsertOneSession_user_user_accounts_skip, distinct: $db_upsertOneSession_user_user_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} _count {accounts sessions}}}}"
},
{
"operation_name": "DbUpsertOneUser",
"api_mount_path": "db/UpsertOneUser",
"file_path": "db/UpsertOneUser.graphql",
"content": "mutation DbUpsertOneUser($where: db_UserWhereUniqueInput!, $create: db_UserCreateInput!, $update: db_UserUpdateInput!, $db_upsertOneUser_accounts_where: db_AccountWhereInput, $db_upsertOneUser_accounts_orderBy: [db_AccountOrderByWithRelationInput], $db_upsertOneUser_accounts_cursor: db_AccountWhereUniqueInput, $db_upsertOneUser_accounts_take: Int, $db_upsertOneUser_accounts_skip: Int, $db_upsertOneUser_accounts_distinct: [db_AccountScalarFieldEnum], $db_upsertOneUser_sessions_where: db_SessionWhereInput, $db_upsertOneUser_sessions_orderBy: [db_SessionOrderByWithRelationInput], $db_upsertOneUser_sessions_cursor: db_SessionWhereUniqueInput, $db_upsertOneUser_sessions_take: Int, $db_upsertOneUser_sessions_skip: Int, $db_upsertOneUser_sessions_distinct: [db_SessionScalarFieldEnum]){db_upsertOneUser(where: $where, create: $create, update: $update){id name email emailVerified image createdAt updatedAt stripeCustomerId stripeSubscriptionId stripePriceId stripeCurrentPeriodEnd accounts(where: $db_upsertOneUser_accounts_where, orderBy: $db_upsertOneUser_accounts_orderBy, cursor: $db_upsertOneUser_accounts_cursor, take: $db_upsertOneUser_accounts_take, skip: $db_upsertOneUser_accounts_skip, distinct: $db_upsertOneUser_accounts_distinct){id userId type provider providerAccountId refresh_token access_token expires_at token_type scope id_token session_state createdAt updatedAt} sessions(where: $db_upsertOneUser_sessions_where, orderBy: $db_upsertOneUser_sessions_orderBy, cursor: $db_upsertOneUser_sessions_cursor, take: $db_upsertOneUser_sessions_take, skip: $db_upsertOneUser_sessions_skip, distinct: $db_upsertOneUser_sessions_distinct){id sessionToken userId expires} _count {accounts sessions}}}"
},
{
"operation_name": "DbUpsertOneVerificationToken",
"api_mount_path": "db/UpsertOneVerificationToken",
"file_path": "db/UpsertOneVerificationToken.graphql",
"content": "mutation DbUpsertOneVerificationToken($where: db_VerificationTokenWhereUniqueInput!, $create: db_VerificationTokenCreateInput!, $update: db_VerificationTokenUpdateInput!){db_upsertOneVerificationToken(where: $where, create: $create, update: $update){identifier token expires}}"
},
{
"operation_name": "UsersGetAllUsers",
"api_mount_path": "users/GetAllUsers",
"file_path": "users/GetAllUsers.graphql",
"content": ""
},
{
"operation_name": "WeatherGetCityById",
"api_mount_path": "weather/GetCityById",
"file_path": "weather/GetCityById.graphql",
"content": "query WeatherGetCityById($config: weather_ConfigInput, $id: [String!]){weather_getCityById(config: $config, id: $id){coord {lat lon} country id name weather {clouds {all humidity visibility} summary {description icon title} temperature {actual feelsLike max min} timestamp wind {deg speed}}}}"
},
{
"operation_name": "WeatherGetCityByName",
"api_mount_path": "weather/GetCityByName",
"file_path": "weather/GetCityByName.graphql",
"content": "query WeatherGetCityByName($config: weather_ConfigInput, $country: String, $name: String!){weather_getCityByName(config: $config, country: $country, name: $name){coord {lat lon} country id name weather {clouds {all humidity visibility} summary {description icon title} temperature {actual feelsLike max min} timestamp wind {deg speed}}}}"
}
],
"typescript_operation_files": [
{
"operation_name": "OpenaiExtract_website_metadata",
"api_mount_path": "openai/extract-website-metadata",
"file_path": "openai/extract-website-metadata.ts",
"module_path": "generated/bundle/operations/openai/extract-website-metadata"
},
{
"operation_name": "OpenaiLoad_url",
"api_mount_path": "openai/load-url",
"file_path": "openai/load-url.ts",
"module_path": "generated/bundle/operations/openai/load-url"
},
{
"operation_name": "OpenaiSummarize_url_content",
"api_mount_path": "openai/summarize-url-content",
"file_path": "openai/summarize-url-content.ts",
"module_path": "generated/bundle/operations/openai/summarize-url-content"
},
{
"operation_name": "OpenaiSummary",
"api_mount_path": "openai/summary",
"file_path": "openai/summary.ts",
"module_path": "generated/bundle/operations/openai/summary"
},
{
"operation_name": "OpenaiWeather",
"api_mount_path": "openai/weather",
"file_path": "openai/weather.ts",
"module_path": "generated/bundle/operations/openai/weather"
},
{
"operation_name": "UsersGet",
"api_mount_path": "users/get",
"file_path": "users/get.ts",
"module_path": "generated/bundle/operations/users/get"
},
{
"operation_name": "UsersSubscribe",
"api_mount_path": "users/subscribe",
"file_path": "users/subscribe.ts",
"module_path": "generated/bundle/operations/users/subscribe"
},
{
"operation_name": "UsersUpdate",
"api_mount_path": "users/update",
"file_path": "users/update.ts",
"module_path": "generated/bundle/operations/users/update"
}
],
"invalid": [
"UsersGetAllUsers"
],
"errors": [
"could not parse operation 'UsersGetAllUsers': external: unexpected token - got: EOF want one of: [RBRACE IDENT SPREAD], locations: [{Line:0 Column:0}], path: []"
]
}